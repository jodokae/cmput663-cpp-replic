<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/tests/libsvn_subr/hashdump-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl>, *<decl><type ref="prev"/><name>new_proplist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>review</name> <init>=
<expr>"A forthright entrance, yet coquettish on the tongue, its deceptively\n"
"fruity exterior hides the warm mahagony undercurrent that is the\n"
"hallmark of Chateau Fraisant-Pitre. Connoisseurs of the region will\n"
"be pleased to note the familiar, subtle hints of mulberries and\n"
"carburator fluid. Its confident finish is marred only by a barely\n"
"detectable suggestion of rancid squid ink."</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test1</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "write a hash to a file"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>proplist</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"color"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>, <argument><expr><name><name>key</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr>"red"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"wine review"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>, <argument><expr><name><name>key</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>review</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"price"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>, <argument><expr><name><name>key</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr>"US $6.50"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"twice-used property name"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>, <argument><expr><name><name>key</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr>"This is the FIRST value."</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>, <argument><expr><name><name>key</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr>"This is the SECOND value."</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr>"hashdump.out"</expr></argument>,
<argument><expr>(<name>APR_WRITE</name> | <name>APR_CREATE</name>)</expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>svn_hash_write2</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>, <argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_HASH_TERMINATOR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "read a file into a hash"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>new_proplist</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr>"hashdump.out"</expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>svn_hash_read2</name><argument_list>(<argument><expr><name>new_proplist</name></expr></argument>, <argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_HASH_TERMINATOR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>this</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_discrepancy</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ignored</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "write hash out, read back in, compare"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>test1</name><argument_list>(<argument><expr>&amp;<name>ignored</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>test2</name><argument_list>(<argument><expr>&amp;<name>ignored</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<for>for (<init><expr><name>this</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>proplist</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>this</name></expr>;</condition>
<incr><expr><name>this</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>orig_str</name></decl>, *<decl><type ref="prev"/><name>new_str</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>keylen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>orig_str</name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_str</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>new_proplist</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>new_str</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>found_discrepancy</name> = 1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>svn_string_compare</name><argument_list>(<argument><expr><name>orig_str</name></expr></argument>, <argument><expr><name>new_str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>found_discrepancy</name> = 1</expr>;</expr_stmt></then></if></else></if>
}</block></for>
<if>if <condition>(<expr><name>found_discrepancy</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"found discrepancy reading back hash table"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_TEST_NULL</name></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test3</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SVN_TEST_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
