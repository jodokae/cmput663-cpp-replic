<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/tests/libsvn_subr/stream-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_stream_from_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_TEST_STRINGS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BUF_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>strings</name><index>[<expr><name>NUM_TEST_STRINGS</name></expr>]</index></name> <init>= <expr><block>{
<expr>""</expr>,
<expr>"This is a string."</expr>,
<expr>"This is, by comparison to the previous string, a much longer string."</expr>,
<expr>"And if you thought that last string was long, you just wait until "
"I'm finished here. I mean, how can a string really claim to be long "
"when it fits on a single line of 80-columns? Give me a break. "
"Now, I'm not saying that I'm the longest string out there--far from "
"it--but I feel that it is safe to assume that I'm far longer than my "
"peers. And that demands some amount of respect, wouldn't you say?"</expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_stream_from_string"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NUM_TEST_STRINGS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>TEST_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>inbuf</name></decl>, *<decl><type ref="prev"/><name>outbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>inbuf</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outbuf</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>svn_stream_from_stringbuf</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name>TEST_BUF_SIZE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> == <name>TEST_BUF_SIZE</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>! <call><name>svn_stringbuf_compare</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Got unexpected result."</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NUM_TEST_STRINGS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>inbuf</name></decl>, *<decl><type ref="prev"/><name>outbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>amt_read</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>inbuf</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outbuf</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>svn_stream_from_stringbuf</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>amt_read</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>amt_read</name> &lt; <name><name>inbuf</name>-&gt;<name>len</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>len</name> = <name>TEST_BUF_SIZE</name> &lt; (<name><name>inbuf</name>-&gt;<name>len</name></name> - <name>amt_read</name>)
? <name>TEST_BUF_SIZE</name>
: <name><name>inbuf</name>-&gt;<name>len</name></name> - <name>amt_read</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>inbuf</name>-&gt;<name>data</name></name> + <name>amt_read</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>amt_read</name> += <name>len</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>! <call><name>svn_stringbuf_compare</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Got unexpected result."</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NUM_TEST_STRINGS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_BUF_SIZE</name></cpp:undef>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_stringbuf_t</name> *</type>
<name>generate_test_bytes</name><parameter_list>(<param><decl><type><name>int</name></type> <name>num_bytes</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>buffer</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>total</name></decl>, <decl><type ref="prev"/><name>repeat</name></decl>, <decl><type ref="prev"/><name>repeat_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<for>for (<init><expr><name>total</name> = 0</expr>, <expr><name>repeat</name> = <name>repeat_iter</name> = 1</expr>, <expr><name>c</name> = 0</expr>;</init> <condition><expr><name>total</name> &lt; <name>num_bytes</name></expr>;</condition> <incr><expr><name>total</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>repeat_iter</name>--</expr>;</expr_stmt>
<if>if <condition>(<expr><name>repeat_iter</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>c</name> == 127</expr>)</condition><then>
<expr_stmt><expr><name>repeat</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>c</name> = (<name>c</name> + 1) % 127</expr>;</expr_stmt>
<expr_stmt><expr><name>repeat_iter</name> = <name>repeat</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>buffer</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_stream_compressed</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_TEST_STRINGS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BUF_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENERATED_SIZE</name></cpp:macro> <cpp:value>20000</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name><name>bufs</name><index>[<expr><name>NUM_TEST_STRINGS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>strings</name><index>[<expr><name>NUM_TEST_STRINGS</name> - 1</expr>]</index></name> <init>= <expr><block>{
<expr>""</expr>,
<expr>"This is a string."</expr>,
<expr>"This is, by comparison to the previous string, a much longer string."</expr>,
<expr>"And if you thought that last string was long, you just wait until "
"I'm finished here. I mean, how can a string really claim to be long "
"when it fits on a single line of 80-columns? Give me a break. "
"Now, I'm not saying that I'm the longest string out there--far from "
"it--but I feel that it is safe to assume that I'm far longer than my "
"peers. And that demands some amount of respect, wouldn't you say?"</expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test compressed streams"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; (<name>NUM_TEST_STRINGS</name> - 1)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><name><name>bufs</name><index>[<expr><name>NUM_TEST_STRINGS</name> - 1</expr>]</index></name> = <call><name>generate_test_bytes</name><argument_list>(<argument><expr><name>GENERATED_SIZE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NUM_TEST_STRINGS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>origbuf</name></decl>, *<decl><type ref="prev"/><name>inbuf</name></decl>, *<decl><type ref="prev"/><name>outbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TEST_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>origbuf</name> = <name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inbuf</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outbuf</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>svn_stream_compressed</name><argument_list>(<argument><expr><call><name>svn_stream_from_stringbuf</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name><name>origbuf</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>origbuf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>svn_stream_compressed</name><argument_list>(<argument><expr><call><name>svn_stream_from_stringbuf</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name>TEST_BUF_SIZE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> &gt;= <name>TEST_BUF_SIZE</name></expr>)</condition> <block>{
<expr_stmt><expr><name>len</name> = <name>TEST_BUF_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></while>
<if>if <condition>(<expr>! <call><name>svn_stringbuf_compare</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>origbuf</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Got unexpected result."</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NUM_TEST_STRINGS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_BUF_SIZE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GENEREATED_SIZE</name></cpp:undef>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_TEST_NULL</name></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_stream_from_string</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_stream_compressed</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SVN_TEST_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
