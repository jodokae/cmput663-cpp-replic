<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/tests/libsvn_subr/string-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fail</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>msg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> = <call><name>apr_pvsprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>a</name> <init>= <expr><name>NULL</name></expr></init>, *<name>b</name> <init>= <expr><name>NULL</name></expr></init>, *<name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>phrase_1</name> <init>= <expr>"hello, "</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>phrase_2</name> <init>= <expr>"a longish phrase of sorts, longer than 16 anyway"</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test1</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "make svn_stringbuf_t from cstring"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>phrase_1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>a</name>-&gt;<name>len</name></name> == <call><name>strlen</name><argument_list>(<argument><expr><name>phrase_1</name></expr></argument>)</argument_list></call>) &amp;&amp; ((<call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>phrase_1</name></expr></argument>)</argument_list></call>) == 0)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "make svn_stringbuf_t from substring of cstring"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>b</name> = <call><name>svn_stringbuf_ncreate</name><argument_list>(<argument><expr><name>phrase_2</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>b</name>-&gt;<name>len</name></name> == 16) &amp;&amp; ((<call><name>strncmp</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>phrase_2</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call>) == 0)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>old_len</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "append svn_stringbuf_t to svn_stringbuf_t"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>phrase_1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>svn_stringbuf_ncreate</name><argument_list>(<argument><expr><name>phrase_2</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>(<name><name>a</name>-&gt;<name>len</name></name> + <name><name>b</name>-&gt;<name>len</name></name> + 1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_len</name> = <name><name>a</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendstr</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>a</name>-&gt;<name>len</name></name> == (<name>old_len</name> + <name><name>b</name>-&gt;<name>len</name></name>)) &amp;&amp; ((<call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call>) == 0)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test4</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "append C string to svn_stringbuf_t"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>phrase_1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"new bytes to append"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_stringbuf_compare</name>
<argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"hello, new bytes to append"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test5</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "append bytes, then compare two strings"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>phrase_1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"new bytes to append"</expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_stringbuf_compare</name>
<argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"hello, new bytes"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test6</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "dup two strings, then compare"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>phrase_1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>phrase_2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<call><name>svn_stringbuf_compare</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call>) &amp;&amp; (! <call><name>svn_stringbuf_compare</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test7</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>tmp_len</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "chopping a string"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>c</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>phrase_2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_len</name> = <name><name>c</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>len</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_chop</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>11</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>c</name>-&gt;<name>len</name></name> == (<name>tmp_len</name> - 11))
&amp;&amp; (<call><name>strncmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call> == 0)
&amp;&amp; (<name><name>c</name>-&gt;<name>data</name><index>[<expr><name><name>c</name>-&gt;<name>len</name></name></expr>]</index></name> == '\0')</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "emptying a string"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>c</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>phrase_2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>c</name>-&gt;<name>len</name></name> == 0) &amp;&amp; (<name><name>c</name>-&gt;<name>data</name><index>[<expr>0</expr>]</index></name> == '\0')</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test9</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "fill string with hashmarks"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>phrase_1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_fillchar</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>'#'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>"#######"</expr></argument>)</argument_list></call> == 0)
&amp;&amp; ((<call><name>strncmp</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>"############"</expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>len</name></name> - 1</expr></argument>)</argument_list></call>) == 0)
&amp;&amp; (<name><name>a</name>-&gt;<name>data</name><index>[<expr>(<name><name>a</name>-&gt;<name>len</name></name> - 1)</expr>]</index></name> == '#')
&amp;&amp; (<name><name>a</name>-&gt;<name>data</name><index>[<expr>(<name><name>a</name>-&gt;<name>len</name></name>)</expr>]</index></name> == '\0')</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test10</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>s</name></decl>, *<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len_1</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len_2</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_len_1</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>block_len_2</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "block initialization and growth"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>s</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"a small string"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len_1</name> = (<name><name>s</name>-&gt;<name>len</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>block_len_1</name> = (<name><name>s</name>-&gt;<name>blocksize</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>", plus a string more than twice as long"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len_2</name> = (<name><name>s</name>-&gt;<name>len</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>block_len_2</name> = (<name><name>s</name>-&gt;<name>blocksize</name></name>)</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>len_1</name> == (<name>block_len_1</name> - 1))
&amp;&amp; ((<name>block_len_2</name> / <name>block_len_1</name>) &gt; 2)
&amp;&amp; (((<name>block_len_2</name> / <name>block_len_1</name>) % 2) == 0)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test11</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "formatting strings from varargs"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>s</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"This %s is used in test %d."</expr></argument>,
<argument><expr>"string"</expr></argument>,
<argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>"This string is used in test 12."</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_string_contents</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>string</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ftext</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>ftext_len</name></decl></param>,
<param><decl><type><name>int</name></type> <name>repeat</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>data</name> = <name><name>string</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name><name>string</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>repeat</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name>len</name> &lt; <name>ftext_len</name> || <call><name>memcmp</name><argument_list>(<argument><expr><name>ftext</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ftext_len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"comparing failed"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>data</name> += <name>ftext_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= <name>ftext_len</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>len</name> &lt; 1 || <call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>"\0"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"comparing failed"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>data</name> += 1</expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= 1</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>repeat</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name>len</name> &lt; <name>ftext_len</name> || <call><name>memcmp</name><argument_list>(<argument><expr><name>ftext</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>ftext_len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"comparing failed"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>data</name> += <name>ftext_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= <name>ftext_len</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>len</name></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"comparing failed"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test12</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>fname</name><index>[]</index></name> <init>= <expr>"string-test.tmp"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>repeat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>ftext</name><index>[]</index></name> <init>=
<expr>"Just some boring text. Avoiding newlines 'cos I don't know"
"if any of the Subversion platfoms will mangle them! There's no"
"need to test newline handling here anyway, it's not relevant."</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "create string from file"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_WRITE</name> | <name>APR_TRUNCATE</name> | <name>APR_CREATE</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"opening file"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>repeat</name> = 100</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>repeat</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>ftext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ftext</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"writing file"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>"\0"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"writing file"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>repeat</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>ftext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ftext</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"writing file"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"closing file"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_string_contents</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ftext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ftext</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>, <argument><expr><name>repeat</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"opening file"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_aprfile</name><argument_list>(<argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_string_contents</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ftext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ftext</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>, <argument><expr><name>repeat</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"closing file"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_find_char_backward</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>char</name></type> <name>ch</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>pos</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <call><name>svn_stringbuf_find_char_backward</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> == <name>pos</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test13</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "find_char_backward; middle case"</expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"test, test"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return
<expr><call><name>test_find_char_backward</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr>','</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>msg_only</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test14</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "find_char_backward; 0 case"</expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>",test test"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return
<expr><call><name>test_find_char_backward</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr>','</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>msg_only</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test15</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "find_char_backward; strlen - 1 case"</expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"testing,"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>test_find_char_backward</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>a</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr>','</expr></argument>,
<argument><expr><name><name>a</name>-&gt;<name>len</name></name> - 1</expr></argument>,
<argument><expr><name>msg_only</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test16</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "find_char_backward; len = 0 case"</expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return
<expr><call><name>test_find_char_backward</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr>','</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>msg_only</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test17</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "find_char_backward; no occurence case"</expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"test test test"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>test_find_char_backward</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>a</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr>','</expr></argument>,
<argument><expr><name><name>a</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr><name>msg_only</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_first_non_whitespace</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_size_t</name></type> <name>pos</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <call><name>svn_stringbuf_first_non_whitespace</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> == <name>pos</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test18</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "check whitespace removal; common case"</expr>;</expr_stmt>
<return>return <expr><call><name>test_first_non_whitespace</name><argument_list>(<argument><expr>" \ttest"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>msg_only</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test19</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "check whitespace removal; no whitespace case"</expr>;</expr_stmt>
<return>return <expr><call><name>test_first_non_whitespace</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>msg_only</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test20</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "check whitespace removal; all whitespace case"</expr>;</expr_stmt>
<return>return <expr><call><name>test_first_non_whitespace</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>msg_only</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test21</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "check that whitespace will be stripped correctly"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>" \ttest\t\t \t "</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_strip_whitespace</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_stringbuf_compare</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> == <name>TRUE</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_stringbuf_unequal</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>str1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>str2</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>a</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>str2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_stringbuf_compare</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"test failed"</expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test22</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "compare stringbufs; different lengths"</expr>;</expr_stmt>
<return>return <expr><call><name>test_stringbuf_unequal</name><argument_list>(<argument><expr>"abc"</expr></argument>, <argument><expr>"abcd"</expr></argument>, <argument><expr><name>msg_only</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test23</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "compare stringbufs; same length, different content"</expr>;</expr_stmt>
<return>return <expr><call><name>test_stringbuf_unequal</name><argument_list>(<argument><expr>"abc"</expr></argument>, <argument><expr>"abb"</expr></argument>, <argument><expr><name>msg_only</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_TEST_NULL</name></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test1</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test3</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test4</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test5</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test6</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test7</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test8</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test9</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test10</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test11</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test12</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test13</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test14</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test15</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test16</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test17</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test18</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test19</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test20</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test21</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test22</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test23</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SVN_TEST_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
