<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/tests/libsvn_subr/revision-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_revnum_parse</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>failure_tests</name><index>[]</index></name> <init>= <expr><block>{
<expr>""</expr>,
<expr>"abc"</expr>,
<expr>"-456"</expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>success_tests</name><index>[]</index></name> <init>= <expr><block>{
<expr>"0"</expr>,
<expr>"12345"</expr>,
<expr>"12345ABC"</expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_revnum_parse"</expr>;</expr_stmt>
<for>for (<init><expr><name>t</name>=<name>success_tests</name></expr>;</init> <condition><expr>*<name>t</name></expr>;</condition> <incr><expr>++<name>t</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name> <init>= <expr>-123</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_revnum_parse</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>*<name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_revnum_parse</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>*<name>t</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>-123 == <name>rev</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"svn_revnum_parse('%s') should change the revision for "
"a good string"</expr></argument>,
<argument><expr>*<name>t</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>endptr</name> == *<name>t</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"End pointer for svn_revnum_parse('%s') should not "
"point to the start of the string"</expr></argument>,
<argument><expr>*<name>t</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<for>for (<init><expr><name>t</name>=<name>failure_tests</name></expr>;</init> <condition><expr>*<name>t</name></expr>;</condition> <incr><expr>++<name>t</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name> <init>= <expr>-123</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_revnum_parse</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>*<name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_revnum_parse</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>*<name>t</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"svn_revnum_parse('%s') succeeded when it should "
"have failed"</expr></argument>,
<argument><expr>*<name>t</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>-123 != <name>rev</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"svn_revnum_parse('%s') should not change the revision "
"for a bad string"</expr></argument>,
<argument><expr>*<name>t</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>endptr</name> != *<name>t</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"End pointer for svn_revnum_parse('%s') does not "
"point to the start of the string"</expr></argument>,
<argument><expr>*<name>t</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_TEST_NULL</name></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_revnum_parse</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SVN_TEST_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
