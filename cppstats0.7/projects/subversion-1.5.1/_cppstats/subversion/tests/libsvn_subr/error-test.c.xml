<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/tests/libsvn_subr/error-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_error_root_cause</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name><name>secondary_err_codes</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>SVN_ERR_STREAM_UNRECOGNIZED_DATA</name></expr>,
<expr><name>SVN_ERR_STREAM_MALFORMED_DATA</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>root_cause_err_code</name> <init>= <expr><name>SVN_ERR_STREAM_UNEXPECTED_EOF</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>root_err</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_error_root_cause"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>root_cause_err_code</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"root cause"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 2</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name><name>secondary_err_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><name>root_err</name> = <call><name>svn_error_root_cause</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>root_err</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"svn_error_root_cause failed to locate any "
"root error in the chain"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 2</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>root_err</name>-&gt;<name>apr_err</name></name> == <name><name>secondary_err_codes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"svn_error_root_cause returned the "
"wrong error from the chain"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>root_err</name>-&gt;<name>apr_err</name></name> != <name>root_cause_err_code</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"svn_error_root_cause failed to locate the "
"correct error from teh chain"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_TEST_NULL</name></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_error_root_cause</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SVN_TEST_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
