<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/tests/svn_test_editor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<struct>struct <name>edit_baton</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>out_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indentation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>verbose</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>node_baton</name> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>node_baton</name> *</type><name>parent_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>indent_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>newline</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>out_stream</name></name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>print</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>, <param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = 1</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; (<name><name>eb</name>-&gt;<name>indentation</name></name> * <name>level</name>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>out_stream</name></name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><name>len</name> = <name><name>str</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>out_stream</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>my_vcdiff_windoweater</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>node_baton</name> *</type><name>nb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>nb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name><name>eb</name>-&gt;<name>verbose</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>window</name></expr>)</condition><then>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"[%s] window_handler (%d ops)\n"</expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>editor_name</name></name></expr></argument>,
<argument><expr><name><name>window</name>-&gt;<name>num_ops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"[%s] window_handler (EOT)\n"</expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>editor_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name> + 2</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>window</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt;= <name><name>window</name>-&gt;<name>num_ops</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name><name>window</name>-&gt;<name>ops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>action_code</name></expr>)</condition> <block>{
<case>case <expr><name>svn_txdelta_new</name></expr>:
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"(%d) new text: length %" <name>APR_SIZE_T_FMT</name> "\n"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr>(<name><name>window</name>-&gt;<name>ops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>length</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_txdelta_source</name></expr>:
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"(%d) source text: offset %" <name>APR_SIZE_T_FMT</name>
", length %" <name>APR_SIZE_T_FMT</name> "\n"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>window</name>-&gt;<name>ops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>offset</name></expr></argument>, <argument><expr><name><name>window</name>-&gt;<name>ops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_txdelta_target</name></expr>:
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"(%d) target text: offset %" <name>APR_SIZE_T_FMT</name>
", length %" <name>APR_SIZE_T_FMT</name> "\n"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>window</name>-&gt;<name>ops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>offset</name></expr></argument>, <argument><expr><name><name>window</name>-&gt;<name>ops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"(%d) unknown window type\n"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name> + 2</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>newline</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>node_baton</name> *</type><name>nb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>nb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>full_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>root_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"[%s] delete_entry (%s)\n"</expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>editor_name</name></name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name> + 1</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>verbose</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>newline</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"[%s] set_target_revision (%ld)\n"</expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>editor_name</name></name></expr></argument>,
<argument><expr><name>target_revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>verbose</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>newline</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>node_baton</name> *</type><name>nb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>nb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>root_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>indent_level</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>root_baton</name> = <name>nb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"[%s] open_root (%s)\n"</expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>editor_name</name></name></expr></argument>,
<argument><expr><name><name>nb</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>eb</name>-&gt;<name>verbose</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"base_revision: %ld\n"</expr></argument>,
<argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>newline</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_or_open</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_dir</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pivot_string</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>node_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>node_baton</name> *</type><name>nb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>nb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>root_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>edit_baton</name></name> = <name><name>pb</name>-&gt;<name>edit_baton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>parent_baton</name></name> = <name>pb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>indent_level</name></name> = (<name><name>pb</name>-&gt;<name>indent_level</name></name> + 1)</expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_baton</name> = <name>nb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"[%s] %s_%s (%s)\n"</expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>editor_name</name></name></expr></argument>, <argument><expr><name>pivot_string</name></expr></argument>,
<argument><expr><name>is_dir</name> ? "directory" : "file"</expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>eb</name>-&gt;<name>verbose</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"parent: %s\n"</expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pivot_string</name></expr></argument>, <argument><expr>"add"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"copyfrom_path: %s\n"</expr></argument>,
<argument><expr><name>base_path</name> ? <name>base_path</name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"copyfrom_revision: %ld\n"</expr></argument>,
<argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"base_revision: %ld\n"</expr></argument>,
<argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>newline</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_file_or_dir</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_dir</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>node_baton</name> *</type><name>nb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>nb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"[%s] close_%s (%s)\n"</expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>editor_name</name></name></expr></argument>,
<argument><expr><name>is_dir</name> ? "directory" : "file"</expr></argument>,
<argument><expr><name><name>nb</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>verbose</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>newline</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_or_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_revision</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>child_baton</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>"add"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_or_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>child_baton</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>"open"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_or_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_revision</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"add"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_or_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"open"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>close_file_or_dir</name><argument_list>(<argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>absent_file_or_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_dir</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>node_baton</name> *</type><name>nb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>nb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"[%s] absent_%s (%s)\n"</expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>editor_name</name></name></expr></argument>,
<argument><expr><name>is_dir</name> ? "directory" : "file"</expr></argument>,
<argument><expr><name><name>nb</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>verbose</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>newline</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_absent_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>absent_file_or_dir</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>close_file_or_dir</name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_absent_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>absent_file_or_dir</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"[%s] close_edit\n"</expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>editor_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>verbose</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>newline</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_abort_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"[%s] ***ABORT_EDIT***\n"</expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>editor_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>verbose</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>newline</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>node_baton</name> *</type><name>nb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>nb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>handler</name> = <name>my_vcdiff_windoweater</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>handler_baton</name> = <name>nb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"[%s] apply_textdelta (%s)\n"</expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>editor_name</name></name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name> + 1</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>verbose</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>newline</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_dir</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>node_baton</name> *</type><name>nb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>nb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"[%s] change_%s_prop (%s)\n"</expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>editor_name</name></name></expr></argument>,
<argument><expr><name>is_dir</name> ? "directory" : "file"</expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name> + 1</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>eb</name>-&gt;<name>verbose</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"name: %s\n"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name> + 1</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"value: %s\n"</expr></argument>,
<argument><expr><name>value</name> ? <name><name>value</name>-&gt;<name>data</name></name> : "(null)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>indent_level</name></name> + 1</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>newline</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>change_prop</name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>change_prop</name><argument_list>(<argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_test_get_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_name</name></decl></param>,
<param><decl><type><name>svn_stream_t</name> *</type><name>out_stream</name></decl></param>,
<param><decl><type><name>int</name></type> <name>indentation</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>verbose</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>my_editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>my_edit_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><name>my_editor</name> = <call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>set_target_revision</name></name> = <name>test_set_target_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>open_root</name></name> = <name>test_open_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>delete_entry</name></name> = <name>test_delete_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>add_directory</name></name> = <name>test_add_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>open_directory</name></name> = <name>test_open_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>close_directory</name></name> = <name>test_close_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>absent_directory</name></name> = <name>test_absent_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>add_file</name></name> = <name>test_add_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>open_file</name></name> = <name>test_open_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>close_file</name></name> = <name>test_close_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>absent_file</name></name> = <name>test_absent_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>test_apply_textdelta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>change_file_prop</name></name> = <name>test_change_file_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>test_change_dir_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>close_edit</name></name> = <name>test_close_edit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_editor</name>-&gt;<name>abort_edit</name></name> = <name>test_abort_edit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>my_edit_baton</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>my_edit_baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_edit_baton</name>-&gt;<name>root_path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_edit_baton</name>-&gt;<name>editor_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>editor_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_edit_baton</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_edit_baton</name>-&gt;<name>indentation</name></name> = <name>indentation</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_edit_baton</name>-&gt;<name>verbose</name></name> = <name>verbose</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_edit_baton</name>-&gt;<name>out_stream</name></name> = <name>out_stream</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>editor</name> = <name>my_editor</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>edit_baton</name> = <name>my_edit_baton</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
