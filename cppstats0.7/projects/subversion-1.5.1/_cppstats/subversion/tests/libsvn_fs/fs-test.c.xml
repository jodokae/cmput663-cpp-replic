<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/tests/libsvn_fs/fs-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_delta/delta.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_STR</name><parameter_list>(<param><type><name>ps</name></type></param>, <param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((ps)-&gt;data = (s), (ps)-&gt;len = strlen(s))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_commit_txn</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>new_rev</name></decl></param>,
<param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expected_conflict</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr>&amp;<name>conflict</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_CONFLICT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>expected_conflict</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"commit conflicted at '%s', but no conflict expected"</expr></argument>,
<argument><expr><name>conflict</name> ? <name>conflict</name> : "(missing conflict info!)"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>conflict</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"commit conflicted as expected, "
"but no conflict path was returned ('%s' expected)"</expr></argument>,
<argument><expr><name>expected_conflict</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>expected_conflict</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call> != 0)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>conflict</name></expr></argument>, <argument><expr><name>expected_conflict</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"commit conflicted at '%s', but expected conflict at '%s')"</expr></argument>,
<argument><expr><name>conflict</name></expr></argument>, <argument><expr><name>expected_conflict</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_quick_wrap</name>
<argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"commit failed due to something other than a conflict"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>expected_conflict</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"commit succeeded that was expected to fail at '%s'"</expr></argument>,
<argument><expr><name>expected_conflict</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>trivial_transaction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>is_invalid_char</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "begin a txn, check its name, then close it"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-trivial-txn"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>txn_name</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>txn_name</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Got a NULL txn name."</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>is_invalid_char</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr>*<name>is_invalid_char</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
<expr_stmt><expr><name><name>is_invalid_char</name><index>[<expr><name>i</name></expr>]</index></name> = 1</expr>;</expr_stmt></for>
<for>for (<init><expr><name>i</name> = '0'</expr>;</init> <condition><expr><name>i</name> &lt;= '9'</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
<expr_stmt><expr><name><name>is_invalid_char</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt></for>
<for>for (<init><expr><name>i</name> = 'a'</expr>;</init> <condition><expr><name>i</name> &lt;= 'z'</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
<expr_stmt><expr><name><name>is_invalid_char</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt></for>
<for>for (<init><expr><name>i</name> = 'A'</expr>;</init> <condition><expr><name>i</name> &lt;= 'Z'</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
<expr_stmt><expr><name><name>is_invalid_char</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt></for>
<for>for (<init><expr><name>p</name> = "-."</expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr>++<name>p</name></expr></incr>)
<expr_stmt><expr><name><name>is_invalid_char</name><index>[<expr>(<name>unsigned</name> <name>char</name>) *<name>p</name></expr>]</index></name> = 0</expr>;</expr_stmt></for>
<for>for (<init><expr><name>p</name> = <name>txn_name</name></expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr>++<name>p</name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>is_invalid_char</name><index>[<expr>(<name>unsigned</name> <name>char</name>) *<name>p</name></expr>]</index></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"The txn name '%s' contains an illegal '%c' "
"character"</expr></argument>, <argument><expr><name>txn_name</name></expr></argument>, <argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>reopen_trivial_transaction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "open an existing transaction by name"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-reopen-trivial-txn"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>txn_name</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_open_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_file_transaction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "begin a txn, get the txn root, and add a file"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-create-file-txn"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"beer.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>verify_txn_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn1</name></decl>, *<decl><type ref="prev"/><name>txn2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name1</name></decl>, *<decl><type ref="prev"/><name>name2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>txn_list</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "create 2 txns, list them, and verify the list"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-verify-txn-list"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn1</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>name1</name></expr></argument>, <argument><expr><name>txn1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn2</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>name2</name></expr></argument>, <argument><expr><name>txn2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_list_transactions</name><argument_list>(<argument><expr>&amp;<name>txn_list</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>txn_list</name>-&gt;<name>nelts</name></name> != 2</expr>)</condition><then>
<goto>goto <name>all_bad</name>;</goto></then></if>
<if>if <condition>(<expr>(! <call><name>strcmp</name><argument_list>(<argument><expr><name>name1</name></expr></argument>, <argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>txn_list</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)
&amp;&amp; (! <call><name>strcmp</name><argument_list>(<argument><expr><name>name2</name></expr></argument>, <argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>txn_list</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>all_good</name>;</goto></then>
<else>else <if>if <condition>(<expr>(! <call><name>strcmp</name><argument_list>(<argument><expr><name>name2</name></expr></argument>, <argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>txn_list</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)
&amp;&amp; (! <call><name>strcmp</name><argument_list>(<argument><expr><name>name1</name></expr></argument>, <argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>txn_list</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>all_good</name>;</goto></then></if></else></if>
<label><name>all_bad</name>:</label>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Got a bogus txn list."</expr></argument>)</argument_list></call></expr>;</return>
<label><name>all_good</name>:</label>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_names_are_not_reused_helper1</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>txn_names</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr>10</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>txn_names</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>N</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr>*<name>txn_names</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"beginning a new transaction used an "
"existing transaction name '%s'"</expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>txn_names</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>txn_names</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr>(<name>svn_fs_txn_t</name> *)<name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>i</name> != <name>N</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"created %d transactions, but only aborted %d"</expr></argument>,
<argument><expr><name>N</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_names_are_not_reused_helper2</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>ht1</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>ht2</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ht1</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key_string</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key_string</name> = <name>key</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ht2</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"the transaction name '%s' was reused"</expr></argument>,
<argument><expr><name>key_string</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_names_are_not_reused</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>txn_names1</name></decl>, *<decl><type ref="prev"/><name>txn_names2</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "check that transaction names are not reused"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-txn-names-are-not-reused"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>txn_names_are_not_reused_helper1</name><argument_list>(<argument><expr>&amp;<name>txn_names1</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>txn_names_are_not_reused_helper1</name><argument_list>(<argument><expr>&amp;<name>txn_names2</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>txn_names_are_not_reused_helper2</name><argument_list>(<argument><expr><name>txn_names1</name></expr></argument>, <argument><expr><name>txn_names2</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>txn_names_are_not_reused_helper2</name><argument_list>(<argument><expr><name>txn_names2</name></expr></argument>, <argument><expr><name>txn_names1</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>write_and_read_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>rstream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>rstring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>wstring</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "write and read a file's contents"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>wstring</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"Wicki wild, wicki wicki wild."</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-read-and-write-file"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"beer.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"beer.txt"</expr></argument>,
<argument><expr><name><name>wstring</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_file_contents</name><argument_list>(<argument><expr>&amp;<name>rstream</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"beer.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__stream_to_string</name><argument_list>(<argument><expr>&amp;<name>rstring</name></expr></argument>, <argument><expr><name>rstream</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>svn_stringbuf_compare</name><argument_list>(<argument><expr><name>rstring</name></expr></argument>, <argument><expr><name>wstring</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"data read != data written."</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_mini_tree_transaction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test basic file and subdirectory creation"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-create-mini-tree-txn"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"wine.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"keg"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"keg/beer.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_greek_tree_transaction</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "make The Official Subversion Test Tree"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-create-greek-tree-txn"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>verify_entry</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_dirent_t</name> *</type><name>ent</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ent</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"didn't find dir entry for \"%s\""</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>ent</name>-&gt;<name>name</name></name> == <name>NULL</name>) &amp;&amp; (<name><name>ent</name>-&gt;<name>id</name></name> == <name>NULL</name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"dir entry for \"%s\" has null name and null id"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>ent</name>-&gt;<name>name</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"dir entry for \"%s\" has null name"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>ent</name>-&gt;<name>id</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"dir entry for \"%s\" has null id"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ent</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"dir entry for \"%s\" contains wrong name (\"%s\")"</expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ent</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>list_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "fill a directory, then list it"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-list-dir"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"q"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/x"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/y"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/z"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B/m"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B/n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B/o"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_dir_entries</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call> != 3</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"unexpected number of entries in dir"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_entry</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr>"x"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_entry</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr>"y"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_entry</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr>"z"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>revision_props</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>s1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>initial_props</name><index>[<expr>4</expr>]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"color"</expr>, <expr>"red"</expr> }</block></expr>,
<expr><block>{ <expr>"size"</expr>, <expr>"XXL"</expr> }</block></expr>,
<expr><block>{ <expr>"favorite saturday morning cartoon"</expr>, <expr>"looney tunes"</expr> }</block></expr>,
<expr><block>{ <expr>"auto"</expr>, <expr>"Green 1997 Saturn SL1"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>final_props</name><index>[<expr>4</expr>]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"color"</expr>, <expr>"violet"</expr> }</block></expr>,
<expr><block>{ <expr>"flower"</expr>, <expr>"violet"</expr> }</block></expr>,
<expr><block>{ <expr>"favorite saturday morning cartoon"</expr>, <expr>"looney tunes"</expr> }</block></expr>,
<expr><block>{ <expr>"auto"</expr>, <expr>"Red 2000 Chevrolet Blazer"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "set and get some revision properties"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-rev-props"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name><name>initial_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_rev_prop</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>initial_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr>"violet"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_rev_prop</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"color"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr>"Red 2000 Chevrolet Blazer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_rev_prop</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"auto"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_rev_prop</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"size"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"color"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s1</name>.<name>data</name></name> = <name><name>value</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s1</name>.<name>len</name></name> = <name><name>value</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_rev_prop</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"flower"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_proplist</name><argument_list>(<argument><expr>&amp;<name>proplist</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>prop_value</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>)</argument_list></call> &lt; 4</expr> )</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"too few revision properties found"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>prop_value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>,
<argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>prop_value</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"unable to find expected revision property"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop_value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"revision property had an unexpected value"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>transaction_props</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>after_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>s1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>initial_props</name><index>[<expr>4</expr>]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"color"</expr>, <expr>"red"</expr> }</block></expr>,
<expr><block>{ <expr>"size"</expr>, <expr>"XXL"</expr> }</block></expr>,
<expr><block>{ <expr>"favorite saturday morning cartoon"</expr>, <expr>"looney tunes"</expr> }</block></expr>,
<expr><block>{ <expr>"auto"</expr>, <expr>"Green 1997 Saturn SL1"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>final_props</name><index>[<expr>5</expr>]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"color"</expr>, <expr>"violet"</expr> }</block></expr>,
<expr><block>{ <expr>"flower"</expr>, <expr>"violet"</expr> }</block></expr>,
<expr><block>{ <expr>"favorite saturday morning cartoon"</expr>, <expr>"looney tunes"</expr> }</block></expr>,
<expr><block>{ <expr>"auto"</expr>, <expr>"Red 2000 Chevrolet Blazer"</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_PROP_REVISION_DATE</name></expr>, <expr>"&lt;some datestamp value&gt;"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "set/get txn props, commit, validate new rev props"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-txn-props"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name><name>initial_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_txn_prop</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name><name>initial_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr>"violet"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_txn_prop</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr>"color"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr>"Red 2000 Chevrolet Blazer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_txn_prop</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr>"auto"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_txn_prop</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr>"size"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_prop</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"color"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s1</name>.<name>data</name></name> = <name><name>value</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s1</name>.<name>len</name></name> = <name><name>value</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_txn_prop</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr>"flower"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_proplist</name><argument_list>(<argument><expr>&amp;<name>proplist</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>prop_value</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>)</argument_list></call> != 5</expr> )</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"unexpected number of transaction properties were found"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 5</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>prop_value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>,
<argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>prop_value</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"unable to find expected transaction property"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop_value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"transaction property had an unexpected value"</expr></argument>)</argument_list></call></expr>;</return></then></if></then></if>
}</block></for>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>after_rev</name> != 1</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"committed transaction got wrong revision number"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_proplist</name><argument_list>(<argument><expr>&amp;<name>proplist</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>prop_value</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>)</argument_list></call> &lt; 5</expr> )</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"unexpected number of revision properties were found"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 5</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>prop_value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>,
<argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>prop_value</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"unable to find expected revision property"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop_value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"revision property had an unexpected value"</expr></argument>)</argument_list></call></expr>;</return></then></if></then></if>
}</block></for>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>node_props</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>s1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>initial_props</name><index>[<expr>4</expr>]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"Best Rock Artist"</expr>, <expr>"Creed"</expr> }</block></expr>,
<expr><block>{ <expr>"Best Rap Artist"</expr>, <expr>"Eminem"</expr> }</block></expr>,
<expr><block>{ <expr>"Best Country Artist"</expr>, <expr>"(null)"</expr> }</block></expr>,
<expr><block>{ <expr>"Best Sound Designer"</expr>, <expr>"Pluessman"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>final_props</name><index>[<expr>4</expr>]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"Best Rock Artist"</expr>, <expr>"P.O.D."</expr> }</block></expr>,
<expr><block>{ <expr>"Best Rap Artist"</expr>, <expr>"Busta Rhymes"</expr> }</block></expr>,
<expr><block>{ <expr>"Best Sound Designer"</expr>, <expr>"Pluessman"</expr> }</block></expr>,
<expr><block>{ <expr>"Biggest Cakewalk Fanatic"</expr>, <expr>"Pluessman"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "set and get some node properties"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-node-props"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name><name>initial_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>, <argument><expr><name><name>initial_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr>"P.O.D."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>, <argument><expr>"Best Rock Artist"</expr></argument>,
<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr>"Busta Rhymes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>, <argument><expr>"Best Rap Artist"</expr></argument>,
<argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>,
<argument><expr>"Best Country Artist"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_prop</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>,
<argument><expr>"Best Sound Designer"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s1</name>.<name>data</name></name> = <name><name>value</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s1</name>.<name>len</name></name> = <name><name>value</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>,
<argument><expr>"Biggest Cakewalk Fanatic"</expr></argument>, <argument><expr>&amp;<name>s1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_proplist</name><argument_list>(<argument><expr>&amp;<name>proplist</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"music.txt"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>prop_value</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>)</argument_list></call> != 4</expr> )</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"unexpected number of node properties were found"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>prop_value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>,
<argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>prop_value</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"unable to find expected node property"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop_value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>final_props</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"node property had an unexpected value"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_entry</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>present</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_dirent_t</name> *</type><name>ent</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_dir_entries</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ent</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ent</name></expr>)</condition><then>
<expr_stmt><expr>*<name>present</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>present</name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_entry_present</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>present</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>present</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>present</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"entry \"%s\" absent when it should be present"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_entry_absent</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>present</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>present</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>present</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"entry \"%s\" present when it should be absent"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fetch_youngest_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>new_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>, <decl><type ref="prev"/><name>new_youngest_rev</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "fetch the youngest revision from a filesystem"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-youngest-rev"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>new_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>new_youngest_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>youngest_rev</name> == <name>new_rev</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"commit didn't bump up revision number"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>new_youngest_rev</name> != <name>new_rev</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"couldn't fetch youngest revision"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>basic_commit</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>revision_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>before_rev</name></decl>, <decl><type ref="prev"/><name>after_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "basic commit"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-basic-commit"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>before_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>after_rev</name> != <name>before_rev</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"youngest revision changed unexpectedly"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr>&amp;<name>conflict</name></expr></argument>, <argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>after_rev</name> == <name>before_rev</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"youngest revision failed to change"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__check_greek_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_tree_node_validation</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>revision_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>after_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "testing tree validation helper"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-validate-tree-entries"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"This is the file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr>&amp;<name>conflict</name></expr></argument>, <argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"This is a new version of 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C/kappa"</expr>, <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr>"This is a new version of 'iota'.\n"</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/delta"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/delta"</expr></argument>, <argument><expr>"This is the file 'delta'.\n"</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/epsilon"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/epsilon"</expr></argument>, <argument><expr>"This is the file 'epsilon'.\n"</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C/kappa"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C/kappa"</expr></argument>, <argument><expr>"This is the file 'kappa'.\n"</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>19</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr>&amp;<name>conflict</name></expr></argument>, <argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>19</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>merging_commit</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>revision_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>after_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name><name>revisions</name><index>[<expr>24</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision_count</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "merging commit"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-merging-commit"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init>
<condition><expr><name>i</name> &lt; ((<sizeof>sizeof<argument_list>(<argument><expr><name>revisions</name></expr></argument>)</argument_list></sizeof>) / (<sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof>))</expr>;</condition>
<incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>i</name></expr>]</index></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></for>
<expr_stmt><expr><name>revision_count</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"This is the file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/delta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/delta"</expr></argument>, <argument><expr>"This is the file 'delta'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/epsilon"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/I/epsilon"</expr></argument>, <argument><expr>"This is the file 'epsilon'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C/kappa"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C/kappa"</expr></argument>, <argument><expr>"This is the file 'kappa'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C/kappa"</expr>, <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>23</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr>"This is the new file 'iota'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"This is the new file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C/kappa"</expr>, <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C/kappa"</expr>, <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>19</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
<block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"theta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"theta"</expr></argument>, <argument><expr>"This is the file 'theta'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"theta"</expr>, <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C/kappa"</expr>, <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
<argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
}</block>
<block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"theta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"theta"</expr></argument>, <argument><expr>"This is another file 'theta'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/theta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"theta"</expr>, <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C/kappa"</expr>, <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
<argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
<block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name>
<argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr><name>revision_count</name> - 1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/zeta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"theta"</expr>, <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C/kappa"</expr>, <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
<argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>19</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
}</block>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr>"A new file 'mu'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/xi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/xi"</expr></argument>, <argument><expr>"This is the file 'xi'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"theta"</expr>, <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"A new file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C/kappa"</expr>, <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/xi"</expr>, <expr>"This is the file 'xi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>21</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
<block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr>"This is the file 'mu'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr>"A change to file 'mu'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>old_mu_contents</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__get_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr>&amp;<name>old_mu_contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name>old_mu_contents</name>) || (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>old_mu_contents</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr>"This is the file 'mu'.\n"</expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"got wrong contents from an old revision tree"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/sigma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/sigma"</expr></argument>, <argument><expr>"This is the file 'sigma'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"theta"</expr>, <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"A new file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/sigma"</expr>, <expr>"This is the file 'sigma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C/kappa"</expr>, <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/xi"</expr>, <expr>"This is the file 'xi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
<argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>22</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
}</block>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/lambda"</expr></argument>, <argument><expr>"Change to file 'lambda'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"theta"</expr>, <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"A new file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/sigma"</expr>, <expr>"This is the file 'sigma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"Change to file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C/kappa"</expr>, <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/xi"</expr>, <expr>"This is the file 'xi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>22</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
<block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/lambda"</expr></argument>, <argument><expr>"A different change to 'lambda'.\n"</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/B/lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/nu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/nu"</expr></argument>, <argument><expr>"This is the file 'nu'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"theta"</expr>, <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"A new file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/sigma"</expr>, <expr>"This is the file 'sigma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"Change to file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C/kappa"</expr>, <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/xi"</expr>, <expr>"This is the file 'xi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/nu"</expr>, <expr>"This is the file 'nu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
<argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>23</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/xi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/xi"</expr></argument>, <argument><expr>"This is a different file 'xi'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/D/G/xi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>old_lambda_ctnts</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__get_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/lambda"</expr></argument>, <argument><expr>&amp;<name>old_lambda_ctnts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name>old_lambda_ctnts</name>)
|| (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>old_lambda_ctnts</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr>"This is the file 'lambda'.\n"</expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"got wrong contents from an old revision tree"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/rho"</expr></argument>,
<argument><expr>"This is an irrelevant change to 'rho'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"theta"</expr>, <expr>"This is the file 'theta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"A new file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/sigma"</expr>, <expr>"This is the file 'sigma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"Change to file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C/kappa"</expr>, <expr>"This is the file 'kappa'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is an irrelevant change to 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/xi"</expr>, <expr>"This is the file 'xi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/nu"</expr>, <expr>"This is the file 'nu'.\n"</expr>}</block></expr>,
<expr><block>{ <expr>"A/D/I"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/I/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
<argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>23</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>revisions</name><index>[<expr><name>revision_count</name>++</expr>]</index></name> = <name>after_rev</name></expr>;</expr_stmt>
}</block>
}</block>
<block>{
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>revisions</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr>"New contents for 'iota'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>copy_test</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>after_rev</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "copying and tracking copy history"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-copy-test"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/G/pi"</expr></argument>,
<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/pi2"</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>,
<argument><expr>"A/D/H/pi2"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev</name> != <name>after_rev</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"pre-commit copy history not preserved (rev lost) for A/D/H/pi2"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/D/G/pi"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"pre-commit copy history not preserved (path lost) for A/D/H/pi2"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/pi2"</expr></argument>, <argument><expr>"This is the file 'pi2'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D/H/pi2"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev</name> != (<name>after_rev</name> - 1)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"post-commit copy history wrong (rev) for A/D/H/pi2"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/D/G/pi"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"post-commit copy history wrong (path) for A/D/H/pi2"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/H/pi2"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/pi3"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>after_rev</name> - 1)</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D/H/pi2"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev</name> != (<name>after_rev</name> - 2)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"first copy history wrong (rev) for A/D/H/pi2"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/D/G/pi"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"first copy history wrong (path) for A/D/H/pi2"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D/H/pi3"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev</name> != (<name>after_rev</name> - 1)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"second copy history wrong (rev) for A/D/H/pi3"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/D/H/pi2"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"second copy history wrong (path) for A/D/H/pi3"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/pi3"</expr></argument>, <argument><expr>"This is the file 'pi3'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>after_rev</name> - 1)</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D/H/pi3"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev</name> != (<name>after_rev</name> - 2)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"copy history wrong (rev) for A/D/H/pi3"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/D/H/pi2"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"copy history wrong (path) for A/D/H/pi3"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D/H/pi3"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev</name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"copy history wrong (rev) for A/D/H/pi3"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>path</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"copy history wrong (path) for A/D/H/pi3"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"H2"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"H2"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev</name> != (<name>after_rev</name> - 1)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"copy history wrong (rev) for H2"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/D/H"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"copy history wrong (path) for H2"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"H2/omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev</name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"copy history wrong (rev) for H2/omega"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>path</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"copy history wrong (path) for H2/omega"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/B/E/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev</name> != (<name>after_rev</name> - 1)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"copy history wrong (rev) for A/B/E/B"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"copy history wrong (path) for A/B/E/B"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev</name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"copy history wrong (rev) for A/B"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>path</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"copy history wrong (path) for A/B"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"This is the file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"H2"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"H2/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"H2/pi2"</expr>, <expr>"This is the file 'pi2'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"H2/pi3"</expr>, <expr>"This is the file 'pi3'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"H2/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"H2/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/pi2"</expr>, <expr>"This is the file 'pi2'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/pi3"</expr>, <expr>"This is the file 'pi3'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr>34</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_mutables</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "delete mutable nodes from directories"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-del-from-dir"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>gamma_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>gamma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>pi_id</name></decl>, *<decl><type ref="prev"/><name>rho_id</name></decl>, *<decl><type ref="prev"/><name>tau_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>pi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>rho_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>tau_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>tau_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>tau_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>G_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>G_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>C_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>C_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>root_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>root_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_FS_ROOT_DIR</name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"deleting root directory got wrong error"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>! <name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"deleting root directory failed to get error"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>iota_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>iota_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>new_rev</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "delete nodes tree"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-del-tree"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>iota_id</name></decl>, *<decl><type ref="prev"/><name>gamma_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>iota_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>gamma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>18</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>A_id</name></decl>, *<decl><type ref="prev"/><name>mu_id</name></decl>, *<decl><type ref="prev"/><name>B_id</name></decl>, *<decl><type ref="prev"/><name>lambda_id</name></decl>, *<decl><type ref="prev"/><name>E_id</name></decl>, *<decl><type ref="prev"/><name>alpha_id</name></decl>,
*<decl><type ref="prev"/><name>beta_id</name></decl>, *<decl><type ref="prev"/><name>F_id</name></decl>, *<decl><type ref="prev"/><name>C_id</name></decl>, *<decl><type ref="prev"/><name>D_id</name></decl>, *<decl><type ref="prev"/><name>gamma_id</name></decl>, *<decl><type ref="prev"/><name>H_id</name></decl>, *<decl><type ref="prev"/><name>chi_id</name></decl>,
*<decl><type ref="prev"/><name>psi_id</name></decl>, *<decl><type ref="prev"/><name>omega_id</name></decl>, *<decl><type ref="prev"/><name>G_id</name></decl>, *<decl><type ref="prev"/><name>pi_id</name></decl>, *<decl><type ref="prev"/><name>rho_id</name></decl>, *<decl><type ref="prev"/><name>tau_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>A_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>mu_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>B_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>lambda_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>E_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>alpha_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/alpha"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E"</expr></argument>, <argument><expr>"alpha"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>beta_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/beta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E"</expr></argument>, <argument><expr>"beta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>F_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>C_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>D_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"D"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>gamma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>H_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>chi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/chi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"chi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>psi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/psi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"psi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>omega_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>G_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>pi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>rho_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>tau_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"This is the file 'iota'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>new_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>A_id</name></decl>, *<decl><type ref="prev"/><name>mu_id</name></decl>, *<decl><type ref="prev"/><name>B_id</name></decl>, *<decl><type ref="prev"/><name>lambda_id</name></decl>, *<decl><type ref="prev"/><name>E_id</name></decl>, *<decl><type ref="prev"/><name>alpha_id</name></decl>,
*<decl><type ref="prev"/><name>beta_id</name></decl>, *<decl><type ref="prev"/><name>F_id</name></decl>, *<decl><type ref="prev"/><name>C_id</name></decl>, *<decl><type ref="prev"/><name>D_id</name></decl>, *<decl><type ref="prev"/><name>gamma_id</name></decl>, *<decl><type ref="prev"/><name>H_id</name></decl>, *<decl><type ref="prev"/><name>chi_id</name></decl>,
*<decl><type ref="prev"/><name>psi_id</name></decl>, *<decl><type ref="prev"/><name>omega_id</name></decl>, *<decl><type ref="prev"/><name>G_id</name></decl>, *<decl><type ref="prev"/><name>pi_id</name></decl>, *<decl><type ref="prev"/><name>rho_id</name></decl>, *<decl><type ref="prev"/><name>tau_id</name></decl>, *<decl><type ref="prev"/><name>sigma_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/sigma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/sigma"</expr></argument>,
<argument><expr>"This is another file 'sigma'.\n"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>A_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>mu_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>B_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>lambda_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>E_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>alpha_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/alpha"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E"</expr></argument>, <argument><expr>"alpha"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>beta_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/beta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E"</expr></argument>, <argument><expr>"beta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>F_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>C_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>D_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"D"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>gamma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>H_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>chi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/chi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"chi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>psi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/psi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"psi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>omega_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>G_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>pi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>rho_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>tau_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>sigma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/sigma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"sigma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"This is the file 'iota'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>iota_id</name></decl>, *<decl><type ref="prev"/><name>gamma_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>iota_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>gamma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>18</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>A_id</name></decl>, *<decl><type ref="prev"/><name>mu_id</name></decl>, *<decl><type ref="prev"/><name>B_id</name></decl>, *<decl><type ref="prev"/><name>lambda_id</name></decl>, *<decl><type ref="prev"/><name>E_id</name></decl>, *<decl><type ref="prev"/><name>alpha_id</name></decl>,
*<decl><type ref="prev"/><name>beta_id</name></decl>, *<decl><type ref="prev"/><name>F_id</name></decl>, *<decl><type ref="prev"/><name>C_id</name></decl>, *<decl><type ref="prev"/><name>D_id</name></decl>, *<decl><type ref="prev"/><name>gamma_id</name></decl>, *<decl><type ref="prev"/><name>H_id</name></decl>, *<decl><type ref="prev"/><name>chi_id</name></decl>,
*<decl><type ref="prev"/><name>psi_id</name></decl>, *<decl><type ref="prev"/><name>omega_id</name></decl>, *<decl><type ref="prev"/><name>G_id</name></decl>, *<decl><type ref="prev"/><name>pi_id</name></decl>, *<decl><type ref="prev"/><name>rho_id</name></decl>, *<decl><type ref="prev"/><name>tau_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>A_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>mu_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"mu"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>B_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>lambda_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"lambda"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>E_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>alpha_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/alpha"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E"</expr></argument>, <argument><expr>"alpha"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>beta_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/beta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E"</expr></argument>, <argument><expr>"beta"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>F_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B"</expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>C_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>D_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"D"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>gamma_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"gamma"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>H_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>chi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/chi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"chi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>psi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/psi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"psi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>omega_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/H/omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr>"omega"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>G_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr>"G"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>pi_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"pi"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>rho_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>tau_id</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/D/G/tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_present</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr>"tau"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_entry_absent</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"This is the file 'iota'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>commit_date</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>datestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>before_commit</name></decl>, <decl><type ref="prev"/><name>at_commit</name></decl>, <decl><type ref="prev"/><name>after_commit</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "commit datestamps"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-commit-date"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>before_commit</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>after_commit</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr>&amp;<name>datestamp</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>datestamp</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"failed to get datestamp of committed revision"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>at_commit</name></expr></argument>, <argument><expr><name><name>datestamp</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>at_commit</name> &lt; <name>before_commit</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"datestamp too early"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>at_commit</name> &gt; <name>after_commit</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"datestamp too late"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_old_revisions</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "check old revisions"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-check-old-revisions"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_1</name></cpp:macro> <cpp:value>"This is the file 'iota'.\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_2</name></cpp:macro> <cpp:value>"XThis is the file 'iota'.\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_3</name></cpp:macro> <cpp:value>"XThis is the file 'iota'.\nX"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_4</name></cpp:macro> <cpp:value>"XThis is the X file 'iota'.\nX"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_5</name></cpp:macro> <cpp:value>"XTYhQis is ACK, PHHHT! no longer 'ioZZZZZta'.blarf\nbye"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_6</name></cpp:macro> <cpp:value>"Matthew 5:18 (Revised Standard Version) --\nFor truly, I say to you, till heaven and earth pass away, not an iota,\nnot a dot, will pass from the law until all is accomplished."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iota_contents_7</name></cpp:macro> <cpp:value>"This is the file 'iota'.\n"</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>iota_contents_2</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>iota_contents_3</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>iota_contents_4</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>iota_contents_5</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>iota_contents_6</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>iota_contents_7</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr><name>iota_contents_1</name></expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr><name>iota_contents_2</name></expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr><name>iota_contents_3</name></expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr><name>iota_contents_4</name></expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr><name>iota_contents_5</name></expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr><name>iota_contents_6</name></expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr><name>iota_contents_7</name></expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
}</block>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>validate_revisions</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>svn_test__tree_t</name> *</type><name>expected_trees</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>max_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>revision_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= <name>max_rev</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr>(<name>svn_revnum_t</name>)<name>i</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
<argument><expr><name><name>expected_trees</name><index>[<expr><name>i</name></expr>]</index></name>.<name>entries</name></expr></argument>,
<argument><expr><name><name>expected_trees</name><index>[<expr><name>i</name></expr>]</index></name>.<name>num_entries</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"Error validating revision %ld (youngest is %ld)"</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>max_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_all_revisions</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_test__tree_t</name></type> <name><name>expected_trees</name><index>[<expr>5</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "after each commit, check all revisions"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-check-all-revisions"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validate_revisions</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>expected_trees</name></expr></argument>, <argument><expr><name>revision_count</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"This is the file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = <name>expected_entries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 20</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validate_revisions</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>expected_trees</name></expr></argument>, <argument><expr><name>revision_count</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__txn_script_command_t</name></type> <name><name>script_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>'a'</expr>, <expr>"A/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"A/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"A/B/Z"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"A/B/Z/zeta"</expr>, <expr>"This is the file 'zeta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"A/mu"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"A/D/G/tau"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"A/D/H/omega"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>'e'</expr>, <expr>"iota"</expr>, <expr>"Changed file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'e'</expr>, <expr>"A/D/G/rho"</expr>, <expr>"Changed file 'rho'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__txn_script_exec</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>script_entries</name></expr></argument>, <argument><expr>10</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"Changed file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/Z"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/Z/zeta"</expr>, <expr>"This is the file 'zeta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"Changed file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = <name>expected_entries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 20</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validate_revisions</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>expected_trees</name></expr></argument>, <argument><expr><name>revision_count</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__txn_script_command_t</name></type> <name><name>script_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>'a'</expr>, <expr>"A/mu"</expr>, <expr>"Re-added file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"A/D/H/omega"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"iota"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>'e'</expr>, <expr>"A/delta"</expr>, <expr>"This is the file 'delta'.\nLine 2.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__txn_script_exec</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>script_entries</name></expr></argument>, <argument><expr>4</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/delta"</expr>, <expr>"This is the file 'delta'.\nLine 2.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"Re-added file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/Z"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/Z/zeta"</expr>, <expr>"This is the file 'zeta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"Changed file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = <name>expected_entries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 21</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validate_revisions</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>expected_trees</name></expr></argument>, <argument><expr><name>revision_count</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__txn_script_command_t</name></type> <name><name>script_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>'c'</expr>, <expr>"A/D/G"</expr>, <expr>"A/D/G2"</expr> }</block></expr>,
<expr><block>{ <expr>'c'</expr>, <expr>"A/epsilon"</expr>, <expr>"A/B/epsilon"</expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__txn_script_exec</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>script_entries</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/delta"</expr>, <expr>"This is the file 'delta'.\nLine 2.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"Re-added file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/Z"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/Z/zeta"</expr>, <expr>"This is the file 'zeta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"Changed file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G2"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G2/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G2/rho"</expr>, <expr>"Changed file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = <name>expected_entries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 25</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validate_revisions</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>expected_trees</name></expr></argument>, <argument><expr><name>revision_count</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_file_digest</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl></param>,
<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_size_t</name></type> <name>buf_size</name> <init>= <expr>100000</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_md5_ctx_t</name></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_file_contents</name><argument_list>(<argument><expr>&amp;<name>stream</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5_init</name><argument_list>(<argument><expr>&amp;<name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>len</name> = <name>buf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;<name>context</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>len</name> == <name>buf_size</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>apr_md5_final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>&amp;<name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>my_rand</name><parameter_list>(<param><decl><type><name>int</name></type> <name>scalar</name></decl></param>, <param><decl><type><name>apr_uint32_t</name> *</type><name>seed</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>apr_uint32_t</name></type> <name>TEST_RAND_MAX</name> <init>= <expr>0xffffffffUL</expr></init></decl>;</decl_stmt>
<return>return <expr><call>(<name>int</name>)<argument_list>(<argument><expr>((<name>double</name>)<call><name>svn_test_rand</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call>
/ ((<name>double</name>)<name>TEST_RAND_MAX</name>+1.0))
* (<name>double</name>)<name>scalar</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>random_data_to_buffer</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>buf_len</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>full</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name> *</type><name>seed</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>num_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ds_off</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dataset</name> <init>= <expr>"0123456789"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dataset_size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>full</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>buf_len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>ds_off</name> = <call><name>my_rand</name><argument_list>(<argument><expr><name>dataset_size</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>dataset</name><index>[<expr><name>ds_off</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>num_bytes</name> = <call><name>my_rand</name><argument_list>(<argument><expr><name>buf_len</name> / 100</expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_bytes</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>offset</name> = <call><name>my_rand</name><argument_list>(<argument><expr><name>buf_len</name> - 1</expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ds_off</name> = <call><name>my_rand</name><argument_list>(<argument><expr><name>dataset_size</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name></expr>]</index></name> = <name><name>dataset</name><index>[<expr><name>ds_off</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<return>return;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>file_integrity_helper</name><parameter_list>(<param><decl><type><name>apr_size_t</name></type> <name>filesize</name></decl></param>, <param><decl><type><name>apr_uint32_t</name> *</type><name>seed</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_type</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_name</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>contents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>content_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest_list</name><index>[<expr>100</expr>]</index><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>wh_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>wh_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr><name>fs_name</name></expr></argument>, <argument><expr><name>fs_type</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>content_buffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>contents</name>.<name>data</name></name> = <name>content_buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>contents</name>.<name>len</name></name> = <name>filesize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"bigfile"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>random_data_to_buffer</name><argument_list>(<argument><expr><name>content_buffer</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>contents</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>contents</name>.<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_apply_textdelta</name>
<argument_list>(<argument><expr>&amp;<name>wh_func</name></expr></argument>, <argument><expr>&amp;<name>wh_baton</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"bigfile"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_send_string</name><argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>wh_func</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_deltify_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>digest_list</name><index>[<expr><name>youngest_rev</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>random_data_to_buffer</name><argument_list>(<argument><expr><name>content_buffer</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>contents</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>contents</name>.<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_apply_textdelta</name>
<argument_list>(<argument><expr>&amp;<name>wh_func</name></expr></argument>, <argument><expr>&amp;<name>wh_baton</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"bigfile"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_send_string</name><argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>wh_func</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_deltify_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>digest_list</name><index>[<expr><name>youngest_rev</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>random_data_to_buffer</name><argument_list>(<argument><expr><name>content_buffer</name> + (<name>filesize</name> - 20)</expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>contents</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>contents</name>.<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_apply_textdelta</name>
<argument_list>(<argument><expr>&amp;<name>wh_func</name></expr></argument>, <argument><expr>&amp;<name>wh_baton</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"bigfile"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_send_string</name><argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>wh_func</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_deltify_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>digest_list</name><index>[<expr><name>youngest_rev</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>random_data_to_buffer</name><argument_list>(<argument><expr><name>content_buffer</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>random_data_to_buffer</name><argument_list>(<argument><expr><name>content_buffer</name> + (<name>filesize</name> - 20)</expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>contents</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>contents</name>.<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_apply_textdelta</name>
<argument_list>(<argument><expr>&amp;<name>wh_func</name></expr></argument>, <argument><expr>&amp;<name>wh_baton</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"bigfile"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_send_string</name><argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>wh_func</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_deltify_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>digest_list</name><index>[<expr><name>youngest_rev</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = <name>youngest_rev</name></expr>;</init> <condition><expr><name>j</name> &lt; 30</expr>;</condition> <incr><expr><name>j</name> = <name>youngest_rev</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>random_data_to_buffer</name><argument_list>(<argument><expr><name>content_buffer</name></expr></argument>, <argument><expr><name>filesize</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>contents</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>contents</name>.<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_apply_textdelta</name><argument_list>(<argument><expr>&amp;<name>wh_func</name></expr></argument>, <argument><expr>&amp;<name>wh_baton</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>,
<argument><expr>"bigfile"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_send_string</name>
<argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>wh_func</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_deltify_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>digest_list</name><index>[<expr><name>youngest_rev</name></expr>]</index></name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>j</name> = <name>youngest_rev</name></expr>;</init> <condition><expr><name>j</name> &gt; 0</expr>;</condition> <incr><expr><name>j</name>--</expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_file_digest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"bigfile"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>digest_list</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"MD5 checksum failure, revision %ld"</expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>medium_file_integrity</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>seed</name> <init>= <expr>(<name>apr_uint32_t</name>) <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"create and modify medium file (seed=%lu)"</expr></argument>,
<argument><expr>(<name>unsigned</name> <name>long</name>) <name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<return>return <expr><call><name>file_integrity_helper</name><argument_list>(<argument><expr><name>SVN_DELTA_WINDOW_SIZE</name></expr></argument>, <argument><expr>&amp;<name>seed</name></expr></argument>, <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>,
<argument><expr>"test-repo-medium-file-integrity"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>large_file_integrity</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>seed</name> <init>= <expr>(<name>apr_uint32_t</name>) <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"create and modify large file (seed=%lu)"</expr></argument>,
<argument><expr>(<name>unsigned</name> <name>long</name>) <name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<return>return <expr><call><name>file_integrity_helper</name><argument_list>(<argument><expr><name>SVN_DELTA_WINDOW_SIZE</name> + 1</expr></argument>, <argument><expr>&amp;<name>seed</name></expr></argument>, <argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>,
<argument><expr>"test-repo-large-file-integrity"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_root_revision</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>, <decl><type ref="prev"/><name>test_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "ensure accurate storage of root node"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-check-root-revision"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_created_rev</name><argument_list>(<argument><expr>&amp;<name>test_rev</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>test_rev</name> != <name>youngest_rev</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Root node in revision %ld has unexpected stored revision %ld"</expr></argument>,
<argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>test_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 10</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>"iota version %d"</expr></argument>, <argument><expr><name>i</name> + 2</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_created_rev</name><argument_list>(<argument><expr>&amp;<name>test_rev</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>test_rev</name> != <name>youngest_rev</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Root node in revision %ld has unexpected stored revision %ld"</expr></argument>,
<argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>test_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>node_created_rev_args</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>verify_path_revs</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type>struct <name>node_created_rev_args</name> *</type><name>args</name></decl></param>,
<param><decl><type><name>int</name></type> <name>num_path_revs</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_path_revs</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_created_rev</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev</name> != <name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rev</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"verify_path_revs: '%s' has created rev '%ld' "
"(expected '%ld')"</expr></argument>,
<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_node_created_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>node_created_rev_args</name></type> <name><name>path_revs</name><index>[<expr>21</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>greek_paths</name><index>[<expr>21</expr>]</index></name> <init>= <expr><block>{
<expr>""</expr>,
<expr>"iota"</expr>,
<expr>"A"</expr>,
<expr>"A/mu"</expr>,
<expr>"A/B"</expr>,
<expr>"A/B/lambda"</expr>,
<expr>"A/B/E"</expr>,
<expr>"A/B/E/alpha"</expr>,
<expr>"A/B/E/beta"</expr>,
<expr>"A/B/F"</expr>,
<expr>"A/C"</expr>,
<expr>"A/D"</expr>,
<expr>"A/D/gamma"</expr>,
<expr>"A/D/G"</expr>,
<expr>"A/D/G/pi"</expr>,
<expr>"A/D/G/rho"</expr>,
<expr>"A/D/G/tau"</expr>,
<expr>"A/D/H"</expr>,
<expr>"A/D/H/chi"</expr>,
<expr>"A/D/H/psi"</expr>,
<expr>"A/D/H/omega"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "svn_fs_node_created_rev test"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 20</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>path_revs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name> = <name><name>greek_paths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-node-created-rev"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 20</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>path_revs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 20</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>path_revs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rev</name> = 1</expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr>"pointless mod here"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>0</expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>1</expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>0</expr>]</index></name>.<name>rev</name> = 2</expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>1</expr>]</index></name>.<name>rev</name> = 2</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/omega"</expr></argument>, <argument><expr>"pointless mod here"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>0</expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>2</expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>11</expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>17</expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>20</expr>]</index></name>.<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>0</expr>]</index></name>.<name>rev</name> = 3</expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>2</expr>]</index></name>.<name>rev</name> = 3</expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>11</expr>]</index></name>.<name>rev</name> = 3</expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>17</expr>]</index></name>.<name>rev</name> = 3</expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_revs</name><index>[<expr>20</expr>]</index></name>.<name>rev</name> = 3</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_path_revs</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_related</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_fs_check_related"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-check-related"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"1"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"3"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr>"5"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr>"5"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr>"6"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr>"6"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"D"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"D"</expr></argument>, <argument><expr>"5"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"D"</expr></argument>, <argument><expr>"7"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr>"7"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr>"8"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr>"9"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"F"</expr></argument>, <argument><expr>"10"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<struct>struct <name>path_rev_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name><name>path_revs</name><index>[<expr>16</expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"A"</expr>, <expr>1</expr> }</block></expr>, <expr><block>{ <expr>"A"</expr>, <expr>2</expr> }</block></expr>, <expr><block>{ <expr>"A"</expr>, <expr>3</expr> }</block></expr>, <expr><block>{ <expr>"A"</expr>, <expr>4</expr> }</block></expr>,
<expr><block>{ <expr>"B"</expr>, <expr>4</expr> }</block></expr>, <expr><block>{ <expr>"B"</expr>, <expr>5</expr> }</block></expr>, <expr><block>{ <expr>"B"</expr>, <expr>6</expr> }</block></expr>, <expr><block>{ <expr>"C"</expr>, <expr>4</expr> }</block></expr>,
<expr><block>{ <expr>"C"</expr>, <expr>5</expr> }</block></expr>, <expr><block>{ <expr>"C"</expr>, <expr>6</expr> }</block></expr>, <expr><block>{ <expr>"D"</expr>, <expr>6</expr> }</block></expr>, <expr><block>{ <expr>"D"</expr>, <expr>7</expr> }</block></expr>,
<expr><block>{ <expr>"E"</expr>, <expr>7</expr> }</block></expr>, <expr><block>{ <expr>"E"</expr>, <expr>8</expr> }</block></expr>, <expr><block>{ <expr>"F"</expr>, <expr>9</expr> }</block></expr>, <expr><block>{ <expr>"F"</expr>, <expr>10</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>related_matrix</name><index>[<expr>16</expr>]</index><index>[<expr>16</expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 16</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; 16</expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name>pr1</name> <init>= <expr><name><name>path_revs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name>pr2</name> <init>= <expr><name><name>path_revs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id1</name></decl>, *<decl><type ref="prev"/><name>id2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>related</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>pr1</name>.<name>rev</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>id1</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name><name>pr1</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>pr2</name>.<name>rev</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>id2</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name><name>pr2</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>related</name> = <call><name>svn_fs_check_related</name><argument_list>(<argument><expr><name>id1</name></expr></argument>, <argument><expr><name>id2</name></expr></argument>)</argument_list></call> ? 1 : 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>related</name> == <name><name>related_matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><name>related</name> &amp;&amp; (! <name><name>related_matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected '%s:%d' to be related to '%s:%d'; it was not"</expr></argument>,
<argument><expr><name><name>pr1</name>.<name>path</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>pr1</name>.<name>rev</name></name></expr></argument>, <argument><expr><name><name>pr2</name>.<name>path</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>pr2</name>.<name>rev</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>(! <name>related</name>) &amp;&amp; <name><name>related_matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected '%s:%d' to not be related to '%s:%d'; it was"</expr></argument>,
<argument><expr><name><name>pr1</name>.<name>path</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>pr1</name>.<name>rev</name></name></expr></argument>, <argument><expr><name><name>pr2</name>.<name>path</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>pr2</name>.<name>rev</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if></else></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></for>
}</block>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>branch_test</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>spool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test complex copies (branches)"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-branch-test"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/G/rho"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/rho2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/rho"</expr></argument>,
<argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/rho2"</expr></argument>,
<argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G2/rho"</expr></argument>,
<argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G2/rho2"</expr></argument>,
<argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G/rho"</expr></argument>,
<argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G/rho2"</expr></argument>,
<argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G2/rho"</expr></argument>,
<argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G2/rho2"</expr></argument>,
<argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>verify_checksum</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>expected_digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>actual_digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test checksums"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>"My text editor charges me rent."</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>expected_digest</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-verify-checksum"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"fact"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"fact"</expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_file_md5_checksum</name><argument_list>(<argument><expr><name>actual_digest</name></expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"fact"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>expected_digest</name></expr></argument>, <argument><expr><name>actual_digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"verify-checksum: checksum mismatch:\n"
" expected: %s\n"
" actual: %s\n"</expr></argument>,
<argument><expr><call><name>svn_md5_digest_to_cstring</name><argument_list>(<argument><expr><name>expected_digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_md5_digest_to_cstring</name><argument_list>(<argument><expr><name>actual_digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_closest_copy_pair</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>closest_root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>closest_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>expected_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expected_path</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>closest_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>((! <name>expected_path</name>) &amp;&amp; (! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>expected_revision</name></expr></argument>)</argument_list></call>))
|| (<name>expected_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>expected_revision</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>closest_path</name> &amp;&amp; (! <name>closest_root</name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"got closest path but no closest root"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(! <name>closest_path</name>) &amp;&amp; <name>closest_root</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"got closest root but no closest path"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>closest_path</name> &amp;&amp; (! <name>expected_path</name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"got closest path ('%s') when none expected"</expr></argument>,
<argument><expr><name>closest_path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(! <name>closest_path</name>) &amp;&amp; <name>expected_path</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"got no closest path; expected '%s'"</expr></argument>,
<argument><expr><name>expected_path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>closest_path</name> &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>closest_path</name></expr></argument>, <argument><expr><name>expected_path</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"got a different closest path than expected:\n"
" expected: %s\n"
" actual: %s"</expr></argument>,
<argument><expr><name>expected_path</name></expr></argument>, <argument><expr><name>closest_path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>closest_root</name></expr>)</condition><then>
<expr_stmt><expr><name>closest_rev</name> = <call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>closest_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>closest_rev</name> != <name>expected_revision</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"got a different closest rev than expected:\n"
" expected: %ld\n"
" actual: %ld"</expr></argument>,
<argument><expr><name>expected_revision</name></expr></argument>, <argument><expr><name>closest_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>closest_copy_test</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>, *<decl><type ref="prev"/><name>croot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>after_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>spool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "calculating closest history-affecting copies"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-closest-copy"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"/Z"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z/D/G"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"/Z"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z/mu"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"/Z"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z/B/E/beta"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"/Z"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/B/E/beta"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z/mu"</expr></argument>,
<argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/H"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z2/D/H2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z2/D/H2/chi"</expr></argument>,
<argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z/t"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z2/D/H2/t"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z2/D/H2/t"</expr></argument>,
<argument><expr>"Edited text."</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z/mu"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"/Z"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z2/D/H2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"/Z2/D/H2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z2/D"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"/Z2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z/t"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>croot</name></expr></argument>, <argument><expr>&amp;<name>cpath</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"Z2/D/H2/t"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_closest_copy_pair</name><argument_list>(<argument><expr><name>croot</name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>root_revisions</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>after_rev</name></decl>, <decl><type ref="prev"/><name>fetched_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>spool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "svn_fs_root_t (base) revisions"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-root-revisions"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>after_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fetched_rev</name> = <call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>after_rev</name> != <name>fetched_rev</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected revision '%d'; "
"got '%d' from svn_fs_revision_root_revision(rev_root)"</expr></argument>,
<argument><expr>(<name>int</name>)<name>after_rev</name></expr></argument>, <argument><expr>(<name>int</name>)<name>fetched_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>fetched_rev</name> = <call><name>svn_fs_txn_root_base_revision</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fetched_rev</name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected SVN_INVALID_REVNUM; "
"got '%d' from svn_fs_txn_root_base_revision(rev_root)"</expr></argument>,
<argument><expr>(<name>int</name>)<name>fetched_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>after_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fetched_rev</name> = <call><name>svn_fs_txn_root_base_revision</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>after_rev</name> != <name>fetched_rev</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected '%d'; "
"got '%d' from svn_fs_txn_root_base_revision(txn_root)"</expr></argument>,
<argument><expr>(<name>int</name>)<name>after_rev</name></expr></argument>, <argument><expr>(<name>int</name>)<name>fetched_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>fetched_rev</name> = <call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fetched_rev</name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected SVN_INVALID_REVNUM; "
"got '%d' from svn_fs_revision_root_revision(txn_root)"</expr></argument>,
<argument><expr>(<name>int</name>)<name>fetched_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>unordered_txn_dirprops</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>, *<decl><type ref="prev"/><name>txn2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>txn_root2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>pval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>new_rev</name></decl>, <decl><type ref="prev"/><name>not_rev</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test dir prop preservation in unordered txns"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-unordered-txn-dirprops"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>new_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn2</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root2</name></expr></argument>, <argument><expr><name>txn2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/alpha"</expr></argument>,
<argument><expr>"New contents"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>pval</name></expr></argument>, <argument><expr>"/A/C:1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name>txn_root2</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr>"svn:mergeinfo"</expr></argument>,
<argument><expr>&amp;<name>pval</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>new_rev</name></expr></argument>, <argument><expr><name>txn2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>not_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn2</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root2</name></expr></argument>, <argument><expr><name>txn2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/A/B/E/alpha"</expr></argument>,
<argument><expr>"New contents"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_STR</name><argument_list>(<argument><expr>&amp;<name>pval</name></expr></argument>, <argument><expr>"/A/C:1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_node_prop</name><argument_list>(<argument><expr><name>txn_root2</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr>"svn:mergeinfo"</expr></argument>,
<argument><expr>&amp;<name>pval</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>new_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>test_commit_txn</name><argument_list>(<argument><expr>&amp;<name>not_rev</name></expr></argument>, <argument><expr><name>txn2</name></expr></argument>, <argument><expr>"/A/B"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_uuid</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fixed_uuid</name> <init>= <expr><call><name>svn_uuid_generate</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fetched_uuid</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_fs_set_uuid"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-set-uuid"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_set_uuid</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>fixed_uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_uuid</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name>fetched_uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fixed_uuid</name></expr></argument>, <argument><expr><name>fetched_uuid</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"expected UUID '%s'; got '%s'"</expr></argument>,
<argument><expr><name>fixed_uuid</name></expr></argument>, <argument><expr><name>fetched_uuid</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_set_uuid</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_uuid</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name>fetched_uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fixed_uuid</name></expr></argument>, <argument><expr><name>fetched_uuid</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected something other than UUID '%s', but got that one"</expr></argument>,
<argument><expr><name>fixed_uuid</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>node_origin_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<struct>struct <name>path_rev_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
}</block>;</struct>
<expr_stmt><expr>*<name>msg</name> = "test svn_fs_node_origin_rev"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-node-origin-rev"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/chi"</expr></argument>, <argument><expr>"2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E/alpha"</expr></argument>, <argument><expr>"2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/floop"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/chi"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/H/chi"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E/alfalfa"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D2/G"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D2"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/floop"</expr></argument>, <argument><expr>"7"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name><name>pathrevs</name><index>[<expr>4</expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr>"A/D"</expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/floop"</expr>, <expr>3</expr> }</block></expr>,
<expr><block>{ <expr>"iota"</expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alfalfa"</expr>, <expr>5</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; (<sizeof>sizeof<argument_list>(<argument><expr><name>pathrevs</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_rev_t</name></expr></argument>)</argument_list></sizeof>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name>path_rev</name> <init>= <expr><name><name>pathrevs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_origin_rev</name><argument_list>(<argument><expr>&amp;<name>revision</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>path_rev</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>path_rev</name>.<name>rev</name></name> != <name>revision</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected origin revision of '%ld' for '%s'; got '%ld'"</expr></argument>,
<argument><expr><name><name>path_rev</name>.<name>rev</name></name></expr></argument>, <argument><expr><name><name>path_rev</name>.<name>path</name></name></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"bloop"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/blarp"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name><name>pathrevs</name><index>[<expr>6</expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr>"A/D"</expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/floop"</expr>, <expr>3</expr> }</block></expr>,
<expr><block>{ <expr>"bloop"</expr>, <expr>-1</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/blarp"</expr>, <expr>-1</expr> }</block></expr>,
<expr><block>{ <expr>"iota"</expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alfalfa"</expr>, <expr>5</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>root</name> = <name>txn_root</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; (<sizeof>sizeof<argument_list>(<argument><expr><name>pathrevs</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_rev_t</name></expr></argument>)</argument_list></sizeof>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>path_rev_t</name></type> <name>path_rev</name> <init>= <expr><name><name>pathrevs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_origin_rev</name><argument_list>(<argument><expr>&amp;<name>revision</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>path_rev</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>revision</name> = -1</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>path_rev</name>.<name>rev</name></name> != <name>revision</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected origin revision of '%ld' for '%s'; got '%ld'"</expr></argument>,
<argument><expr><name><name>path_rev</name>.<name>rev</name></name></expr></argument>, <argument><expr><name><name>path_rev</name>.<name>path</name></name></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_TEST_NULL</name></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>trivial_transaction</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>reopen_trivial_transaction</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>create_file_transaction</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>verify_txn_list</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>txn_names_are_not_reused</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>write_and_read_file</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>create_mini_tree_transaction</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>create_greek_tree_transaction</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>list_directory</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>revision_props</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>transaction_props</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>node_props</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>delete_mutables</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>delete</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>fetch_youngest_rev</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>basic_commit</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_tree_node_validation</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_XFAIL</name><argument_list>(<argument><expr><name>merging_commit</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>copy_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>commit_date</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>check_old_revisions</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>check_all_revisions</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>medium_file_integrity</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>large_file_integrity</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>check_root_revision</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_node_created_rev</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>check_related</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>branch_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>verify_checksum</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>closest_copy_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>root_revisions</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>unordered_txn_dirprops</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>set_uuid</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>node_origin_rev</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SVN_TEST_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
