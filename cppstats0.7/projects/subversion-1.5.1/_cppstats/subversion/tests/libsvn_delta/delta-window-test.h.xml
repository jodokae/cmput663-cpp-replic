<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/tests/libsvn_delta/delta-window-test.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_DELTA_WINDOW_TEST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DELTA_WINDOW_TEST_H</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>apr_off_t</name></type>
<name>delta_window_size_estimate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>window</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>len</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>window</name>-&gt;<name>num_ops</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_size_t</name> <specifier>const</specifier></type> <name>offset</name> <init>= <expr><name><name>window</name>-&gt;<name>ops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name> <specifier>const</specifier></type> <name>length</name> <init>= <expr><name><name>window</name>-&gt;<name>ops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>length</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>window</name>-&gt;<name>ops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>action_code</name> == <name>svn_txdelta_new</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> += 1</expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += (<name>length</name> &gt; 255 ? 2 : 1)</expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += <name>length</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>len</name> += 1</expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += (<name>offset</name> &gt; 255 ? 2 : 1)</expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += (<name>length</name> &gt; 255 ? 2 : 1)</expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<return>return <expr><name>len</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_off_t</name></type>
<name>delta_window_print</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_off_t</name></type> <name>len</name> <init>= <expr><call><name>delta_window_size_estimate</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>op_offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>window</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"%s: (WINDOW %" <name>APR_OFF_T_FMT</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>,
<argument><expr>" (%" <name>SVN_FILESIZE_T_FMT</name>
" %" <name>APR_SIZE_T_FMT</name> " %" <name>APR_SIZE_T_FMT</name> ")"</expr></argument>,
<argument><expr><name><name>window</name>-&gt;<name>sview_offset</name></name></expr></argument>, <argument><expr><name><name>window</name>-&gt;<name>sview_len</name></name></expr></argument>, <argument><expr><name><name>window</name>-&gt;<name>tview_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>window</name>-&gt;<name>num_ops</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_size_t</name> <specifier>const</specifier></type> <name>offset</name> <init>= <expr><name><name>window</name>-&gt;<name>ops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name> <specifier>const</specifier></type> <name>length</name> <init>= <expr><name><name>window</name>-&gt;<name>ops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>length</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>window</name>-&gt;<name>ops</name><index>[<expr><name>i</name></expr>]</index></name>.<name>action_code</name></expr>)</condition> <block>{
<case>case <expr><name>svn_txdelta_source</name></expr>:
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"\n%s: (%" <name>APR_OFF_T_FMT</name> " SRC %" <name>APR_SIZE_T_FMT</name>
" %" <name>APR_SIZE_T_FMT</name> ")"</expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>op_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_txdelta_target</name></expr>:
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"\n%s: (%" <name>APR_OFF_T_FMT</name> " TGT %" <name>APR_SIZE_T_FMT</name>
" %" <name>APR_SIZE_T_FMT</name> ")"</expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>op_offset</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_txdelta_new</name></expr>:
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"\n%s: (%" <name>APR_OFF_T_FMT</name> " NEW %"
<name>APR_SIZE_T_FMT</name> " \""</expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>op_offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>tmp</name> = <name>offset</name></expr>;</init> <condition><expr><name>tmp</name> &lt; <name>offset</name> + <name>length</name></expr>;</condition> <incr><expr>++<name>tmp</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>dat</name> <init>= <expr><name><name>window</name>-&gt;<name>new_data</name>-&gt;<name>data</name><index>[<expr><name>tmp</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_iscntrl</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call> || !<call><name>apr_isascii</name><argument_list>(<argument><expr><name>dat</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"\\%3.3o"</expr></argument>, <argument><expr><name>dat</name> &amp; 0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>dat</name> == '\\'</expr>)</condition><then>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr>"\\\\"</expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>dat</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
}</block></for>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr>"\")"</expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"\n%s: (BAD-OP)"</expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
<expr_stmt><expr><name>op_offset</name> += <name>length</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr>")\n"</expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
