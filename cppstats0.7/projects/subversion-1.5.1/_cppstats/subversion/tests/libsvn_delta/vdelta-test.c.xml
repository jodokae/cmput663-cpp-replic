<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/tests/libsvn_delta/vdelta-test.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_delta/delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"delta-window-test.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>apr_off_t</name></type>
<name>print_delta_window</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl></param>, <param><decl><type><name>int</name></type> <name>quiet</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>quiet</name></expr>)</condition><then>
<return>return <expr><call><name>delta_window_size_estimate</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>delta_window_print</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>do_one_diff</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>source_file</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>target_file</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>count</name></decl></param>, <param><decl><type><name>apr_off_t</name> *</type><name>len</name></decl></param>,
<param><decl><type><name>int</name></type> <name>quiet</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl></param>, <param><decl><type><name>FILE</name>*</type> <name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_txdelta_stream_t</name> *</type><name>delta_stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_t</name> *</type><name>delta_window</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>fpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>wpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>count</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_txdelta</name><argument_list>(<argument><expr>&amp;<name>delta_stream</name></expr></argument>,
<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>source_file</name></expr></argument>, <argument><expr><name>fpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>target_file</name></expr></argument>, <argument><expr><name>fpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>fpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_txdelta_next_window</name><argument_list>(<argument><expr>&amp;<name>delta_window</name></expr></argument>, <argument><expr><name>delta_stream</name></expr></argument>, <argument><expr><name>wpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>"vdelta-test: "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>delta_window</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>len</name> += <call><name>print_delta_window</name><argument_list>(<argument><expr><name>delta_window</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>quiet</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>wpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++*<name>count</name></expr>;</expr_stmt>
}</block></then></if>
}</block> while <condition>(<expr><name>delta_window</name> != <name>NULL</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"%s: (LENGTH %" <name>APR_OFF_T_FMT</name> " +%d)\n"</expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>, <argument><expr>*<name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>fpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>wpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_file_t</name> *</type>
<name>open_binary_read</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>(<name>APR_READ</name> | <name>APR_BINARY</name>)</expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"unable to open \"%s\" for reading\n"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>fp</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>source_file_A</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>target_file_A</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count_A</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len_A</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>source_file_B</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>target_file_B</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count_B</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len_B</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>quiet</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>argc</name> &gt; 1 &amp;&amp; <name><name>argv</name><index>[<expr>1</expr>]</index><index>[<expr>0</expr>]</index></name> == '-' &amp;&amp; <name><name>argv</name><index>[<expr>1</expr>]</index><index>[<expr>1</expr>]</index></name> == 'q'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>quiet</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr>--<name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>argv</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>argc</name> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>target_file_A</name> = <call><name>open_binary_read</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>argc</name> == 3</expr>)</condition><then> <block>{
<expr_stmt><expr><name>source_file_A</name> = <call><name>open_binary_read</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target_file_A</name> = <call><name>open_binary_read</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>argc</name> == 4</expr>)</condition><then> <block>{
<expr_stmt><expr><name>source_file_A</name> = <call><name>open_binary_read</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target_file_A</name> = <call><name>open_binary_read</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>source_file_B</name> = <call><name>open_binary_read</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target_file_B</name> = <call><name>open_binary_read</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"Usage: vdelta-test [-q] &lt;target&gt;\n"
" or: vdelta-test [-q] &lt;source&gt; &lt;target&gt;\n"
" or: vdelta-test [-q] &lt;source&gt; &lt;intermediate&gt; &lt;target&gt;\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><call><name>do_one_diff</name><argument_list>(<argument><expr><name>source_file_A</name></expr></argument>, <argument><expr><name>target_file_A</name></expr></argument>,
<argument><expr>&amp;<name>count_A</name></expr></argument>, <argument><expr>&amp;<name>len_A</name></expr></argument>, <argument><expr><name>quiet</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"A "</expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>source_file_B</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>fpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>wpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_stream_t</name> *</type><name>stream_A</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_stream_t</name> *</type><name>stream_B</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_t</name> *</type><name>window_A</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_t</name> *</type><name>window_B</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_t</name> *</type><name>window_AB</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count_AB</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len_AB</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr>'\n'</expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_one_diff</name><argument_list>(<argument><expr><name>source_file_B</name></expr></argument>, <argument><expr><name>target_file_B</name></expr></argument>,
<argument><expr>&amp;<name>count_B</name></expr></argument>, <argument><expr>&amp;<name>len_B</name></expr></argument>, <argument><expr><name>quiet</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"B "</expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr>'\n'</expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_seek</name><argument_list>(<argument><expr><name>source_file_A</name></expr></argument>, <argument><expr><name>APR_SET</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_seek</name><argument_list>(<argument><expr><name>target_file_A</name></expr></argument>, <argument><expr><name>APR_SET</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_seek</name><argument_list>(<argument><expr><name>source_file_B</name></expr></argument>, <argument><expr><name>APR_SET</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_seek</name><argument_list>(<argument><expr><name>target_file_B</name></expr></argument>, <argument><expr><name>APR_SET</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_txdelta</name><argument_list>(<argument><expr>&amp;<name>stream_A</name></expr></argument>,
<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>source_file_A</name></expr></argument>, <argument><expr><name>fpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>target_file_A</name></expr></argument>, <argument><expr><name>fpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>fpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_txdelta</name><argument_list>(<argument><expr>&amp;<name>stream_B</name></expr></argument>,
<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>source_file_B</name></expr></argument>, <argument><expr><name>fpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>target_file_B</name></expr></argument>, <argument><expr><name>fpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>fpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>count_AB</name> = 0</expr>;</init> <condition><expr><name>count_AB</name> &lt; <name>count_B</name></expr>;</condition> <incr><expr>++<name>count_AB</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_txdelta_next_window</name><argument_list>(<argument><expr>&amp;<name>window_A</name></expr></argument>, <argument><expr><name>stream_A</name></expr></argument>, <argument><expr><name>wpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>"vdelta-test: "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_txdelta_next_window</name><argument_list>(<argument><expr>&amp;<name>window_B</name></expr></argument>, <argument><expr><name>stream_B</name></expr></argument>, <argument><expr><name>wpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>"vdelta-test: "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>window_A</name> != <name>NULL</name> || <name><name>window_B</name>-&gt;<name>src_ops</name></name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>window_B</name>-&gt;<name>src_ops</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>window_AB</name> = <name>window_B</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window_AB</name>-&gt;<name>sview_len</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>window_AB</name> = <call><name>svn_txdelta_compose_windows</name><argument_list>(<argument><expr><name>window_A</name></expr></argument>, <argument><expr><name>window_B</name></expr></argument>,
<argument><expr><name>wpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>len_AB</name> += <call><name>print_delta_window</name><argument_list>(<argument><expr><name>window_AB</name></expr></argument>, <argument><expr>"AB"</expr></argument>, <argument><expr><name>quiet</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>wpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr>"AB: (LENGTH %" <name>APR_OFF_T_FMT</name> " +%d)\n"</expr></argument>,
<argument><expr><name>len_AB</name></expr></argument>, <argument><expr><name>count_AB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>source_file_A</name></expr>)</condition><then> <expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>source_file_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>target_file_A</name></expr>)</condition><then> <expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>target_file_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>source_file_B</name></expr>)</condition><then> <expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>source_file_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>target_file_B</name></expr>)</condition><then> <expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>source_file_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
