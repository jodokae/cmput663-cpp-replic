<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/tests/libsvn_delta/svndiff-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_quoprint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>source_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>target_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stdout_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_stream_t</name> *</type><name>txdelta_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>svndiff_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>encoder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>svndiff_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>argc</name> &lt; 3</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"usage: %s source target [version]\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>source_file</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>(<name>APR_READ</name> | <name>APR_BINARY</name>)</expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"unable to open \"%s\" for reading\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>target_file</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>(<name>APR_READ</name> | <name>APR_BINARY</name>)</expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"unable to open \"%s\" for reading\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>argc</name> == 4</expr>)</condition><then>
<expr_stmt><expr><name>version</name> = <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_txdelta</name><argument_list>(<argument><expr>&amp;<name>txdelta_stream</name></expr></argument>,
<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>source_file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>target_file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_stream_for_stdout</name><argument_list>(<argument><expr>&amp;<name>stdout_stream</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>"svndiff-test: "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QUOPRINT_SVNDIFFS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>encoder</name> = <call><name>svn_quoprint_encode</name><argument_list>(<argument><expr><name>stdout_stream</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>encoder</name> = <call><name>svn_base64_encode</name><argument_list>(<argument><expr><name>stdout_stream</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>svn_txdelta_to_svndiff2</name><argument_list>(<argument><expr>&amp;<name>svndiff_handler</name></expr></argument>, <argument><expr>&amp;<name>svndiff_baton</name></expr></argument>,
<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_txdelta_send_txstream</name><argument_list>(<argument><expr><name>txdelta_stream</name></expr></argument>,
<argument><expr><name>svndiff_handler</name></expr></argument>,
<argument><expr><name>svndiff_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>"svndiff-test: "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>source_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>target_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
