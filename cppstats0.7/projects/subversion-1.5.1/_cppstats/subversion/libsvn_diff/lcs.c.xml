<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_diff/lcs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<typedef>typedef <type>struct <name>svn_diff__snake_t</name></type> <name>svn_diff__snake_t</name>;</typedef>
<struct>struct <name>svn_diff__snake_t</name> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__lcs_t</name> *</type><name>lcs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__position_t</name> *</type><name><name>position</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>void</name></type>
<name>svn_diff__snake</name><parameter_list>(<param><decl><type><name>apr_off_t</name></type> <name>k</name></decl></param>,
<param><decl><type><name>svn_diff__snake_t</name> *</type><name>fp</name></decl></param>,
<param><decl><type><name>int</name></type> <name>idx</name></decl></param>,
<param><decl><type><name>svn_diff__lcs_t</name> **</type><name>freelist</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff__position_t</name> *</type><name><name>start_position</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__position_t</name> *</type><name><name>position</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__lcs_t</name> *</type><name>lcs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__lcs_t</name> *</type><name>previous_lcs</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lcs</name> = <name><name>fp</name><index>[<expr><name>k</name></expr>]</index></name>.<name>lcs</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>lcs</name></expr>)</condition> <block>{
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>refcount</name></name>--</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>lcs</name>-&gt;<name>refcount</name></name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>previous_lcs</name> = <name><name>lcs</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>next</name></name> = *<name>freelist</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>freelist</name> = <name>lcs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lcs</name> = <name>previous_lcs</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>fp</name><index>[<expr><name>k</name> - 1</expr>]</index></name>.<name>y</name> + 1 &gt; <name><name>fp</name><index>[<expr><name>k</name> + 1</expr>]</index></name>.<name>y</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>start_position</name><index>[<expr>0</expr>]</index></name> = <name><name>fp</name><index>[<expr><name>k</name> - 1</expr>]</index></name>.<name><name>position</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>start_position</name><index>[<expr>1</expr>]</index></name> = <name><name>fp</name><index>[<expr><name>k</name> - 1</expr>]</index></name>.<name><name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>previous_lcs</name> = <name><name>fp</name><index>[<expr><name>k</name> - 1</expr>]</index></name>.<name>lcs</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>start_position</name><index>[<expr>0</expr>]</index></name> = <name><name>fp</name><index>[<expr><name>k</name> + 1</expr>]</index></name>.<name><name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>start_position</name><index>[<expr>1</expr>]</index></name> = <name><name>fp</name><index>[<expr><name>k</name> + 1</expr>]</index></name>.<name><name>position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>previous_lcs</name> = <name><name>fp</name><index>[<expr><name>k</name> + 1</expr>]</index></name>.<name>lcs</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>position</name><index>[<expr>0</expr>]</index></name> = <name><name>start_position</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>position</name><index>[<expr>1</expr>]</index></name> = <name><name>start_position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>node</name> == <name><name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>node</name></expr>)</condition> <block>{
<expr_stmt><expr><name><name>position</name><index>[<expr>0</expr>]</index></name> = <name><name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>position</name><index>[<expr>1</expr>]</index></name> = <name><name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>position</name><index>[<expr>1</expr>]</index></name> != <name><name>start_position</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lcs</name> = *<name>freelist</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lcs</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>freelist</name> = <name><name>lcs</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>lcs</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>lcs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>position</name><index>[<expr><name>idx</name></expr>]</index></name> = <name><name>start_position</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>position</name><index>[<expr><call><name>abs</name><argument_list>(<argument><expr>1 - <name>idx</name></expr></argument>)</argument_list></call></expr>]</index></name> = <name><name>start_position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>length</name></name> = <name><name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name> - <name><name>start_position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>next</name></name> = <name>previous_lcs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>refcount</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><index>[<expr><name>k</name></expr>]</index></name>.<name>lcs</name> = <name>lcs</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>fp</name><index>[<expr><name>k</name></expr>]</index></name>.<name>lcs</name> = <name>previous_lcs</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>previous_lcs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>previous_lcs</name>-&gt;<name>refcount</name></name>++</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>fp</name><index>[<expr><name>k</name></expr>]</index></name>.<name><name>position</name><index>[<expr>0</expr>]</index></name> = <name><name>position</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><index>[<expr><name>k</name></expr>]</index></name>.<name><name>position</name><index>[<expr>1</expr>]</index></name> = <name><name>position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><index>[<expr><name>k</name></expr>]</index></name>.<name>y</name> = <name><name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_diff__lcs_t</name> *</type>
<name>svn_diff__lcs_reverse</name><parameter_list>(<param><decl><type><name>svn_diff__lcs_t</name> *</type><name>lcs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff__lcs_t</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__lcs_t</name> *</type><name>prev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>next</name> = <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>lcs</name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>prev</name> = <name><name>lcs</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>next</name></name> = <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> = <name>lcs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lcs</name> = <name>prev</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>next</name></expr>;</return>
}</block></function>
<function><type><name>svn_diff__lcs_t</name> *</type>
<name>svn_diff__lcs</name><parameter_list>(<param><decl><type><name>svn_diff__position_t</name> *</type><name>position_list1</name></decl></param>,
<param><decl><type><name>svn_diff__position_t</name> *</type><name>position_list2</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name><name>length</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__snake_t</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>p</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__lcs_t</name> *</type><name>lcs</name></decl>, *<decl><type ref="prev"/><name>lcs_freelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__position_t</name></type> <name><name>sentinel_position</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>lcs</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>lcs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>lcs</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name> = <name>position_list1</name> ? <name><name>position_list1</name>-&gt;<name>offset</name></name> + 1 : 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>lcs</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name> = <name>position_list2</name> ? <name><name>position_list2</name>-&gt;<name>offset</name></name> + 1 : 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>length</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>refcount</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>position_list1</name> == <name>NULL</name> || <name>position_list2</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>lcs</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>length</name><index>[<expr>0</expr>]</index></name> = <name><name>position_list1</name>-&gt;<name>offset</name></name> - <name><name>position_list1</name>-&gt;<name>next</name>-&gt;<name>offset</name></name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>length</name><index>[<expr>1</expr>]</index></name> = <name><name>position_list2</name>-&gt;<name>offset</name></name> - <name><name>position_list2</name>-&gt;<name>next</name>-&gt;<name>offset</name></name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> = <name><name>length</name><index>[<expr>0</expr>]</index></name> &gt; <name><name>length</name><index>[<expr>1</expr>]</index></name> ? 1 : 0</expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>fp</name></expr></argument>)</argument_list></sizeof> * <call>(<name>apr_size_t</name>)<argument_list>(<argument><expr><name><name>length</name><index>[<expr>0</expr>]</index></name> + <name><name>length</name><index>[<expr>1</expr>]</index></name> + 3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fp</name> += <name><name>length</name><index>[<expr><name>idx</name></expr>]</index></name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel_position</name><index>[<expr><name>idx</name></expr>]</index></name>.<name>next</name> = <name><name>position_list1</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>position_list1</name>-&gt;<name>next</name></name> = &amp;<name><name>sentinel_position</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel_position</name><index>[<expr><name>idx</name></expr>]</index></name>.<name>offset</name> = <name><name>position_list1</name>-&gt;<name>offset</name></name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel_position</name><index>[<expr><call><name>abs</name><argument_list>(<argument><expr>1 - <name>idx</name></expr></argument>)</argument_list></call></expr>]</index></name>.<name>next</name> = <name><name>position_list2</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>position_list2</name>-&gt;<name>next</name></name> = &amp;<name><name>sentinel_position</name><index>[<expr><call><name>abs</name><argument_list>(<argument><expr>1 - <name>idx</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel_position</name><index>[<expr><call><name>abs</name><argument_list>(<argument><expr>1 - <name>idx</name></expr></argument>)</argument_list></call></expr>]</index></name>.<name>offset</name> = <name><name>position_list2</name>-&gt;<name>offset</name></name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel_position</name><index>[<expr>0</expr>]</index></name>.<name>node</name> = (<name>void</name>*)&amp;<name><name>sentinel_position</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sentinel_position</name><index>[<expr>1</expr>]</index></name>.<name>node</name> = (<name>void</name>*)&amp;<name><name>sentinel_position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <name><name>length</name><index>[<expr><call><name>abs</name><argument_list>(<argument><expr>1 - <name>idx</name></expr></argument>)</argument_list></call></expr>]</index></name> - <name><name>length</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><index>[<expr>-1</expr>]</index></name>.<name><name>position</name><index>[<expr>0</expr>]</index></name> = <name><name>sentinel_position</name><index>[<expr>0</expr>]</index></name>.<name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fp</name><index>[<expr>-1</expr>]</index></name>.<name><name>position</name><index>[<expr>1</expr>]</index></name> = &amp;<name><name>sentinel_position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = 0</expr>;</expr_stmt>
<do>do <block>{
<for>for (<init><expr><name>k</name> = -<name>p</name></expr>;</init> <condition><expr><name>k</name> &lt; <name>d</name></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>svn_diff__snake</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr>&amp;<name>lcs_freelist</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>k</name> = <name>d</name> + <name>p</name></expr>;</init> <condition><expr><name>k</name> &gt;= <name>d</name></expr>;</condition> <incr><expr><name>k</name>--</expr></incr>) <block>{
<expr_stmt><expr><call><name>svn_diff__snake</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr>&amp;<name>lcs_freelist</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
}</block> while <condition>(<expr><name><name>fp</name><index>[<expr><name>d</name></expr>]</index></name>.<name><name>position</name><index>[<expr>1</expr>]</index></name> != &amp;<name><name>sentinel_position</name><index>[<expr>1</expr>]</index></name></expr>)</condition>;</do>
<expr_stmt><expr><name><name>lcs</name>-&gt;<name>next</name></name> = <name><name>fp</name><index>[<expr><name>d</name></expr>]</index></name>.<name>lcs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lcs</name> = <call><name>svn_diff__lcs_reverse</name><argument_list>(<argument><expr><name>lcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>position_list1</name>-&gt;<name>next</name></name> = <name><name>sentinel_position</name><index>[<expr><name>idx</name></expr>]</index></name>.<name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>position_list2</name>-&gt;<name>next</name></name> = <name><name>sentinel_position</name><index>[<expr><call><name>abs</name><argument_list>(<argument><expr>1 - <name>idx</name></expr></argument>)</argument_list></call></expr>]</index></name>.<name>next</name></expr>;</expr_stmt>
<return>return <expr><name>lcs</name></expr>;</return>
}</block></function>
</unit>
