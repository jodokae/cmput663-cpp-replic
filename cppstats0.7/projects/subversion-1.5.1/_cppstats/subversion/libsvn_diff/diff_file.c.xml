<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_diff/diff_file.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_info.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_mmap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ctype.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>svn_diff__file_token_t</name> <block>{
<decl_stmt><decl><type>struct <name>svn_diff__file_token_t</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff_datasource_e</name></type> <name>datasource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>norm_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>raw_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>length</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_diff__file_token_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>svn_diff__file_baton_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>path</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name><name>file</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name><name>size</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>chunk</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>buffer</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>curp</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>endp</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__file_token_t</name> *</type><name>tokens</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__normalize_state_t</name></type> <name><name>normalize_state</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_diff__file_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>char</name> *</type>
<name>find_eol_start</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<for>for (<init>;</init> <condition><expr><name>len</name> &gt; 0</expr>;</condition> <incr><expr>++<name>buf</name></expr>, <expr>--<name>len</name></expr></incr>) <block>{
<if>if <condition>(<expr>*<name>buf</name> == '\n' || *<name>buf</name> == '\r'</expr>)</condition><then>
<return>return <expr><name>buf</name></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>datasource_to_index</name><parameter_list>(<param><decl><type><name>svn_diff_datasource_e</name></type> <name>datasource</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>datasource</name></expr>)</condition> <block>{
<case>case <expr><name>svn_diff_datasource_original</name></expr>:
<return>return <expr>0</expr>;</return>
</case><case>case <expr><name>svn_diff_datasource_modified</name></expr>:
<return>return <expr>1</expr>;</return>
</case><case>case <expr><name>svn_diff_datasource_latest</name></expr>:
<return>return <expr>2</expr>;</return>
</case><case>case <expr><name>svn_diff_datasource_ancestor</name></expr>:
<return>return <expr>3</expr>;</return>
</case>}</block></switch>
<return>return <expr>-1</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_SHIFT</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; CHUNK_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chunk_to_offset</name><parameter_list>(<param><type><name>chunk</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((chunk) &lt;&lt; CHUNK_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>offset_to_chunk</name><parameter_list>(<param><type><name>offset</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((offset) &gt;&gt; CHUNK_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>offset_in_chunk</name><parameter_list>(<param><type><name>offset</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((offset) &amp; (CHUNK_SIZE - 1))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>svn_error_t</name> *</type>
<name>read_chunk</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>file</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>offset</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_seek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>APR_SET</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_read_full</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMAP_T_PARAM</name><parameter_list>(<param><type><name>NAME</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_mmap_t **NAME,</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMAP_T_ARG</name><parameter_list>(<param><type><name>NAME</name></type></param>)</parameter_list></cpp:macro> <cpp:value>&amp;(NAME),</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMAP_T_PARAM</name><parameter_list>(<param><type><name>NAME</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMAP_T_ARG</name><parameter_list>(<param><type><name>NAME</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>map_or_read_file</name><argument_list>(<argument><expr><name>apr_file_t</name> **<name>file</name></expr></argument>,
<argument><expr><macro><name>MMAP_T_PARAM</name><argument_list>(<argument>mm</argument>)</argument_list></macro>
<name>char</name> **<name>buffer</name></expr></argument>, <argument><expr><name>apr_off_t</name> *<name>size</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>path</name></expr></argument>, <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list> <block>{
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>buffer</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_info_get</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>APR_FINFO_SIZE</name></expr></argument>, <argument><expr>*<name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>finfo</name>.<name>size</name></name> &gt; <name>APR_MMAP_THRESHOLD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_mmap_create</name><argument_list>(<argument><expr><name>mm</name></expr></argument>, <argument><expr>*<name>file</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>finfo</name>.<name>size</name></name></expr></argument>, <argument><expr><name>APR_MMAP_READ</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>buffer</name> = <name>(*<name>mm</name>)-&gt;<name>mm</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>*<name>buffer</name> == <name>NULL</name> &amp;&amp; <name><name>finfo</name>.<name>size</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>buffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>finfo</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_read_full</name><argument_list>(<argument><expr>*<name>file</name></expr></argument>, <argument><expr>*<name>buffer</name></expr></argument>, <argument><expr><name><name>finfo</name>.<name>size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr>*<name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>size</name> = <name><name>finfo</name>.<name>size</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></decl></decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>datasource_open</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>svn_diff_datasource_e</name></type> <name>datasource</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff__file_baton_t</name> *</type><name>file_baton</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>curp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>endp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> = <call><name>datasource_to_index</name><argument_list>(<argument><expr><name>datasource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name><name>file_baton</name>-&gt;<name>file</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>file_baton</name>-&gt;<name>path</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,
<argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>file_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_info_get</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>APR_FINFO_SIZE</name></expr></argument>,
<argument><expr><name><name>file_baton</name>-&gt;<name>file</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>file_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_baton</name>-&gt;<name>size</name><index>[<expr><name>idx</name></expr>]</index></name> = <name><name>finfo</name>.<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> = <name><name>finfo</name>.<name>size</name></name> &gt; <name>CHUNK_SIZE</name> ? <name>CHUNK_SIZE</name> : <name><name>finfo</name>.<name>size</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>length</name> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>endp</name> = <name>curp</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> += <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_baton</name>-&gt;<name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name> = <name><name>file_baton</name>-&gt;<name>curp</name><index>[<expr><name>idx</name></expr>]</index></name> = <name>curp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_baton</name>-&gt;<name>endp</name><index>[<expr><name>idx</name></expr>]</index></name> = <name>endp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_chunk</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>file</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>file_baton</name>-&gt;<name>path</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,
<argument><expr><name>curp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>file_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>datasource_close</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>svn_diff_datasource_e</name></type> <name>datasource</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>datasource_get_next_token</name><parameter_list>(<param><decl><type><name>apr_uint32_t</name> *</type><name>hash</name></decl></param>, <param><decl><type><name>void</name> **</type><name>token</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_diff_datasource_e</name></type> <name>datasource</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff__file_baton_t</name> *</type><name>file_baton</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__file_token_t</name> *</type><name>file_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>curp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>eol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_chunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>h</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>had_cr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>token</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> = <call><name>datasource_to_index</name><argument_list>(<argument><expr><name>datasource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curp</name> = <name><name>file_baton</name>-&gt;<name>curp</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> = <name><name>file_baton</name>-&gt;<name>endp</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_chunk</name> = <call><name>offset_to_chunk</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>size</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>curp</name> == <name>endp</name>
&amp;&amp; <name>last_chunk</name> == <name><name>file_baton</name>-&gt;<name>chunk</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>file_token</name> = <name><name>file_baton</name>-&gt;<name>tokens</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>file_token</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>file_baton</name>-&gt;<name>tokens</name></name> = <name><name>file_token</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>file_token</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>file_token</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>file_token</name>-&gt;<name>datasource</name></name> = <name>datasource</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_token</name>-&gt;<name>offset</name></name> = <call><name>chunk_to_offset</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>chunk</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call>
+ (<name>curp</name> - <name><name>file_baton</name>-&gt;<name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_token</name>-&gt;<name>raw_length</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_token</name>-&gt;<name>length</name></name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><name>eol</name> = <call><name>find_eol_start</name><argument_list>(<argument><expr><name>curp</name></expr></argument>, <argument><expr><name>endp</name> - <name>curp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>eol</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>had_cr</name> = (*<name>eol</name> == '\r')</expr>;</expr_stmt>
<expr_stmt><expr><name>eol</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>had_cr</name> || <name>eol</name> != <name>endp</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>had_cr</name> &amp;&amp; *<name>eol</name> == '\n'</expr>)</condition><then>
<expr_stmt><expr>++<name>eol</name></expr>;</expr_stmt></then></if>
<break>break;</break>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>file_baton</name>-&gt;<name>chunk</name><index>[<expr><name>idx</name></expr>]</index></name> == <name>last_chunk</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>eol</name> = <name>endp</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>length</name> = <name>endp</name> - <name>curp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_token</name>-&gt;<name>raw_length</name></name> += <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_diff__normalize_buffer</name><argument_list>(<argument><expr>&amp;<name>curp</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>,
<argument><expr>&amp;<name><name>file_baton</name>-&gt;<name>normalize_state</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,
<argument><expr><name>curp</name></expr></argument>, <argument><expr><name><name>file_baton</name>-&gt;<name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_token</name>-&gt;<name>length</name></name> += <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> = <call><name>svn_diff__adler32</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>curp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curp</name> = <name>endp</name> = <name><name>file_baton</name>-&gt;<name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_baton</name>-&gt;<name>chunk</name><index>[<expr><name>idx</name></expr>]</index></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> = <name><name>file_baton</name>-&gt;<name>chunk</name><index>[<expr><name>idx</name></expr>]</index></name> == <name>last_chunk</name> ?
<call><name>offset_in_chunk</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>size</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call> : <name>CHUNK_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> += <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_baton</name>-&gt;<name>endp</name><index>[<expr><name>idx</name></expr>]</index></name> = <name>endp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_chunk</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>file</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>file_baton</name>-&gt;<name>path</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,
<argument><expr><name>curp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
<argument><expr><call><name>chunk_to_offset</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>chunk</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>file_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>had_cr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>eol</name> = <name>curp</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>curp</name> == '\n'</expr>)</condition><then>
<expr_stmt><expr>++<name>eol</name></expr>;</expr_stmt></then></if>
<break>break;</break>
}</block></then></if>
}</block></while>
<expr_stmt><expr><name>length</name> = <name>eol</name> - <name>curp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_token</name>-&gt;<name>raw_length</name></name> += <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_baton</name>-&gt;<name>curp</name><index>[<expr><name>idx</name></expr>]</index></name> = <name>eol</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>file_token</name>-&gt;<name>raw_length</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>c</name> <init>= <expr><name>curp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_diff__normalize_buffer</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>,
<argument><expr>&amp;<name><name>file_baton</name>-&gt;<name>normalize_state</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,
<argument><expr><name>curp</name></expr></argument>, <argument><expr><name><name>file_baton</name>-&gt;<name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_token</name>-&gt;<name>norm_offset</name></name> = <name><name>file_token</name>-&gt;<name>offset</name></name> + (<name>c</name> - <name>curp</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_token</name>-&gt;<name>length</name></name> += <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>hash</name> = <call><name>svn_diff__adler32</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>token</name> = <name>file_token</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPARE_CHUNK_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>token_compare</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>void</name> *</type><name>token1</name></decl></param>, <param><decl><type><name>void</name> *</type><name>token2</name></decl></param>, <param><decl><type><name>int</name> *</type><name>compare</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff__file_baton_t</name> *</type><name>file_baton</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__file_token_t</name> *</type><name><name>file_token</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>2</expr>]</index><index>[<expr><name>COMPARE_CHUNK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>bufp</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name><name>offset</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>idx</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name><name>length</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>total_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name><name>raw_length</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>chunk</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__normalize_state_t</name></type> <name><name>state</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>file_token</name><index>[<expr>0</expr>]</index></name> = <name>token1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_token</name><index>[<expr>1</expr>]</index></name> = <name>token2</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>file_token</name><index>[<expr>0</expr>]</index></name>-&gt;<name>length</name> &lt; <name><name>file_token</name><index>[<expr>1</expr>]</index></name>-&gt;<name>length</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>compare</name> = -1</expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>file_token</name><index>[<expr>0</expr>]</index></name>-&gt;<name>length</name> &gt; <name><name>file_token</name><index>[<expr>1</expr>]</index></name>-&gt;<name>length</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>compare</name> = 1</expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>total_length</name> = <name><name>file_token</name><index>[<expr>0</expr>]</index></name>-&gt;<name>length</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>total_length</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>compare</name> = 0</expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 2</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>datasource_to_index</name><argument_list>(<argument><expr><name><name>file_token</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>datasource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>file_token</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>norm_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>file_baton</name>-&gt;<name>chunk</name><index>[<expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name> = <name>svn_diff__normalize_state_normal</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>offset_to_chunk</name><argument_list>(<argument><expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> == <name><name>chunk</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>bufp</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>file_baton</name>-&gt;<name>buffer</name><index>[<expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufp</name><index>[<expr><name>i</name></expr>]</index></name> += <call><name>offset_in_chunk</name><argument_list>(<argument><expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name> = <name>total_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>raw_length</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>raw_length</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>file_token</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>raw_length</name></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<do>do <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 2</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>raw_length</name><index>[<expr><name>i</name></expr>]</index></name> == 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_DIFF_DATASOURCE_MODIFIED</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The file '%s' changed unexpectedly"
" during diff"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>file_baton</name>-&gt;<name>path</name><index>[<expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>bufp</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>raw_length</name><index>[<expr><name>i</name></expr>]</index></name> &gt; <name>COMPARE_CHUNK_SIZE</name> ?
<name>COMPARE_CHUNK_SIZE</name> : <name><name>raw_length</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_chunk</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>file</name><index>[<expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>file_baton</name>-&gt;<name>path</name><index>[<expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>bufp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>file_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> += <name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>raw_length</name><index>[<expr><name>i</name></expr>]</index></name> -= <name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_diff__normalize_buffer</name><argument_list>(<argument><expr>&amp;<name><name>bufp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>bufp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>file_baton</name>-&gt;<name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>len</name> = <name><name>length</name><index>[<expr>0</expr>]</index></name> &gt; <name><name>length</name><index>[<expr>1</expr>]</index></name> ? <name><name>length</name><index>[<expr>1</expr>]</index></name> : <name><name>length</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>compare</name> = <call><name>memcmp</name><argument_list>(<argument><expr><name><name>bufp</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>bufp</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>compare</name> != 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>total_length</name> -= <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>length</name><index>[<expr>0</expr>]</index></name> -= <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>length</name><index>[<expr>1</expr>]</index></name> -= <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufp</name><index>[<expr>0</expr>]</index></name> += <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bufp</name><index>[<expr>1</expr>]</index></name> += <name>len</name></expr>;</expr_stmt>
}</block> while<condition>(<expr><name>total_length</name> &gt; 0</expr>)</condition>;</do>
<expr_stmt><expr>*<name>compare</name> = 0</expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>token_discard</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>void</name> *</type><name>token</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff__file_baton_t</name> *</type><name>file_baton</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__file_token_t</name> *</type><name>file_token</name> <init>= <expr><name>token</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>file_token</name>-&gt;<name>next</name></name> = <name><name>file_baton</name>-&gt;<name>tokens</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_baton</name>-&gt;<name>tokens</name></name> = <name>file_token</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>token_discard_all</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff__file_baton_t</name> *</type><name>file_baton</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_diff_fns_t</name></type> <name>svn_diff__file_vtable</name> <init>= <expr><block>{
<expr><name>datasource_open</name></expr>,
<expr><name>datasource_close</name></expr>,
<expr><name>datasource_get_next_token</name></expr>,
<expr><name>token_compare</name></expr>,
<expr><name>token_discard</name></expr>,
<expr><name>token_discard_all</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DIFF__OPT_IGNORE_EOL_STYLE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>apr_getopt_option_t</name></type> <name><name>diff_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"ignore-space-change"</expr>, <expr>'b'</expr>, <expr>0</expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr>"ignore-all-space"</expr>, <expr>'w'</expr>, <expr>0</expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr>"ignore-eol-style"</expr>, <expr><name>SVN_DIFF__OPT_IGNORE_EOL_STYLE</name></expr>, <expr>0</expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr>"show-c-function"</expr>, <expr>'p'</expr>, <expr>0</expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr>"unified"</expr>, <expr>'u'</expr>, <expr>0</expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>svn_diff_file_options_t</name> *</type>
<name>svn_diff_file_options_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_diff_file_options_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_file_options_parse</name><parameter_list>(<param><decl><type><name>svn_diff_file_options_t</name> *</type><name>options</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>args</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>argv</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name>*</expr></argument>)</argument_list></sizeof> * (<name><name>args</name>-&gt;<name>nelts</name></name> + 2)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call>(<name>void</name> *) <argument_list>(<argument><expr><name>argv</name> + 1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name>*</expr></argument>)</argument_list></sizeof> * <name><name>args</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr><name><name>args</name>-&gt;<name>nelts</name></name> + 1</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_getopt_init</name><argument_list>(<argument><expr>&amp;<name>os</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>nelts</name></name> + 1</expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>os</name>-&gt;<name>errfn</name></name> = <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>err</name> <init>= <expr><call><name>apr_getopt_long</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>diff_options</name></expr></argument>, <argument><expr>&amp;<name>opt_id</name></expr></argument>, <argument><expr>&amp;<name>opt_arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error parsing diff options"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<switch>switch <condition>(<expr><name>opt_id</name></expr>)</condition> <block>{
<case>case <expr>'b'</expr>:
<if>if <condition>(<expr>! <name><name>options</name>-&gt;<name>ignore_space</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>options</name>-&gt;<name>ignore_space</name></name> = <name>svn_diff_file_ignore_space_change</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr>'w'</expr>:
<expr_stmt><expr><name><name>options</name>-&gt;<name>ignore_space</name></name> = <name>svn_diff_file_ignore_space_all</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SVN_DIFF__OPT_IGNORE_EOL_STYLE</name></expr>:
<expr_stmt><expr><name><name>options</name>-&gt;<name>ignore_eol_style</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'p'</expr>:
<expr_stmt><expr><name><name>options</name>-&gt;<name>show_c_function</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></while>
<if>if <condition>(<expr><name><name>os</name>-&gt;<name>ind</name></name> &lt; <name><name>os</name>-&gt;<name>argc</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_INVALID_DIFF_OPTION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid argument '%s' in diff options"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>os</name>-&gt;<name>argv</name><index>[<expr><name><name>os</name>-&gt;<name>ind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_file_diff_2</name><parameter_list>(<param><decl><type><name>svn_diff_t</name> **</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>options</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff__file_baton_t</name></type> <name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>options</name></name> = <name>options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>0</expr>]</index></name> = <name>original</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>1</expr>]</index></name> = <name>modified</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_diff</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>&amp;<name>svn_diff__file_vtable</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>baton</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_file_diff</name><parameter_list>(<param><decl><type><name>svn_diff_t</name> **</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_diff_file_diff_2</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>,
<argument><expr><call><name>svn_diff_file_options_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_file_diff3_2</name><parameter_list>(<param><decl><type><name>svn_diff_t</name> **</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>latest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>options</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff__file_baton_t</name></type> <name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>options</name></name> = <name>options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>0</expr>]</index></name> = <name>original</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>1</expr>]</index></name> = <name>modified</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>2</expr>]</index></name> = <name>latest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_diff3</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>&amp;<name>svn_diff__file_vtable</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>baton</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_file_diff3</name><parameter_list>(<param><decl><type><name>svn_diff_t</name> **</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>latest</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_diff_file_diff3_2</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>, <argument><expr><name>latest</name></expr></argument>,
<argument><expr><call><name>svn_diff_file_options_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_file_diff4_2</name><parameter_list>(<param><decl><type><name>svn_diff_t</name> **</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>latest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ancestor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>options</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff__file_baton_t</name></type> <name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>options</name></name> = <name>options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>0</expr>]</index></name> = <name>original</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>1</expr>]</index></name> = <name>modified</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>2</expr>]</index></name> = <name>latest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>3</expr>]</index></name> = <name>ancestor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_diff4</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>&amp;<name>svn_diff__file_vtable</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>baton</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_file_diff4</name><parameter_list>(<param><decl><type><name>svn_diff_t</name> **</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>latest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ancestor</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_diff_file_diff4_2</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>, <argument><expr><name>latest</name></expr></argument>, <argument><expr><name>ancestor</name></expr></argument>,
<argument><expr><call><name>svn_diff_file_options_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DIFF__EXTRA_CONTEXT_LENGTH</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>svn_diff__file_output_baton_t</name> <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>output_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>context_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>delete_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>insert_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>path</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name><name>file</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name><name>current_line</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>2</expr>]</index><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name><name>length</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>curp</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name><name>hunk_start</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name><name>hunk_length</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>hunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>show_c_function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>extra_skip_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>extra_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hunk_extra_context</name><index>[<expr><name>SVN_DIFF__EXTRA_CONTEXT_LENGTH</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_diff__file_output_baton_t</name>;</typedef>
<typedef>typedef <type><enum>enum <name>svn_diff__file_output_unified_type_e</name> <block>{
<decl><name>svn_diff__file_output_unified_skip</name></decl>,
<decl><name>svn_diff__file_output_unified_context</name></decl>,
<decl><name>svn_diff__file_output_unified_delete</name></decl>,
<decl><name>svn_diff__file_output_unified_insert</name></decl>
}</block></enum></type> <name>svn_diff__file_output_unified_type_e</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_unified_line</name><parameter_list>(<param><decl><type><name>svn_diff__file_output_baton_t</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_diff__file_output_unified_type_e</name></type> <name>type</name></decl></param>, <param><decl><type><name>int</name></type> <name>idx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>curp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>eol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>bytes_processed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>had_cr</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>collect_extra</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>length</name> = <name><name>baton</name>-&gt;<name>length</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curp</name> = <name><name>baton</name>-&gt;<name>curp</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>current_line</name><index>[<expr><name>idx</name></expr>]</index></name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>length</name> == 0 &amp;&amp; <call><name>apr_file_eof</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>file</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<do>do <block>{
<if>if <condition>(<expr><name>length</name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>bytes_processed</name></expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
<case>case <expr><name>svn_diff__file_output_unified_context</name></expr>:
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>hunk</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>context_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>1</expr>]</index></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_diff__file_output_unified_delete</name></expr>:
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>hunk</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>delete_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_diff__file_output_unified_insert</name></expr>:
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>hunk</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>insert_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>1</expr>]</index></name>++</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name><name>baton</name>-&gt;<name>show_c_function</name></name>
&amp;&amp; (<name>type</name> == <name>svn_diff__file_output_unified_skip</name>
|| <name>type</name> == <name>svn_diff__file_output_unified_context</name>)
&amp;&amp; (<call><name>svn_ctype_isalpha</name><argument_list>(<argument><expr>*<name>curp</name></expr></argument>)</argument_list></call> || *<name>curp</name> == '$' || *<name>curp</name> == '_')
&amp;&amp; !<call><name>svn_cstring_match_glob_list</name><argument_list>(<argument><expr><name>curp</name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>extra_skip_match</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>extra_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>collect_extra</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>eol</name> = <call><name>find_eol_start</name><argument_list>(<argument><expr><name>curp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>eol</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>had_cr</name> = (*<name>eol</name> == '\r')</expr>;</expr_stmt>
<expr_stmt><expr><name>eol</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call>(<name>apr_size_t</name>)<argument_list>(<argument><expr><name>eol</name> - <name>curp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>had_cr</name> || <name>len</name> &lt; <name>length</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>had_cr</name> &amp;&amp; *<name>eol</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>eol</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>len</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>length</name> -= <name>len</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>type</name> != <name>svn_diff__file_output_unified_skip</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>hunk</name></name></expr></argument>, <argument><expr><name>curp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>collect_extra</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>extra_context</name></name></expr></argument>,
<argument><expr><name>curp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>curp</name><index>[<expr><name>idx</name></expr>]</index></name> = <name>eol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>length</name><index>[<expr><name>idx</name></expr>]</index></name> = <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>type</name> != <name>svn_diff__file_output_unified_skip</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>hunk</name></name></expr></argument>, <argument><expr><name>curp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>collect_extra</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>extra_context</name></name></expr></argument>, <argument><expr><name>curp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>bytes_processed</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>curp</name> = <name><name>baton</name>-&gt;<name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_file_read</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>file</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>curp</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>had_cr</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name>err</name> &amp;&amp; <name>length</name> &gt; 0 &amp;&amp; *<name>curp</name> == '\n'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>type</name> != <name>svn_diff__file_output_unified_skip</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>hunk</name></name></expr></argument>, <argument><expr><name>curp</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>++<name>curp</name></expr>;</expr_stmt>
<expr_stmt><expr>--<name>length</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>curp</name><index>[<expr><name>idx</name></expr>]</index></name> = <name>curp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>length</name><index>[<expr><name>idx</name></expr>]</index></name> = <name>length</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block> while <condition>(<expr>! <name>err</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>err</name> &amp;&amp; ! <call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bytes_processed</name> &amp;&amp; (<name>type</name> != <name>svn_diff__file_output_unified_skip</name>)
&amp;&amp; ! <name>had_cr</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>out_str</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8_ex2</name>
<argument_list>(<argument><expr>&amp;<name>out_str</name></expr></argument>,
<argument><expr><name>APR_EOL_STR</name> "\\ No newline at end of file" <name>APR_EOL_STR</name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>header_encoding</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>hunk</name></name></expr></argument>, <argument><expr><name>out_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>length</name><index>[<expr><name>idx</name></expr>]</index></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_unified_flush_hunk</name><parameter_list>(<param><decl><type><name>svn_diff__file_output_baton_t</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>target_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>hunk_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_stringbuf_isempty</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>hunk</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>target_line</name> = <name><name>baton</name>-&gt;<name>hunk_start</name><index>[<expr>0</expr>]</index></name> + <name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name>
+ <name>SVN_DIFF__UNIFIED_CONTEXT_SIZE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>baton</name>-&gt;<name>current_line</name><index>[<expr>0</expr>]</index></name> &lt; <name>target_line</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_line</name>
<argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>svn_diff__file_output_unified_context</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 2</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr><name>i</name></expr>]</index></name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>hunk_start</name><index>[<expr><name>i</name></expr>]</index></name>++</expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>output_stream</name></name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>header_encoding</name></name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"@@ -%" <name>APR_OFF_T_FMT</name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>hunk_start</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name> != 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>output_stream</name></name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>header_encoding</name></name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>",%" <name>APR_OFF_T_FMT</name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>output_stream</name></name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>header_encoding</name></name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>" +%" <name>APR_OFF_T_FMT</name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>hunk_start</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>1</expr>]</index></name> != 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>output_stream</name></name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>header_encoding</name></name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>",%" <name>APR_OFF_T_FMT</name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>output_stream</name></name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>header_encoding</name></name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>" @@%s%s" <name>APR_EOL_STR</name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>hunk_extra_context</name><index>[<expr>0</expr>]</index></name>
? " " : ""</expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>hunk_extra_context</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hunk_len</name> = <name><name>baton</name>-&gt;<name>hunk</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>output_stream</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>hunk</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr>&amp;<name>hunk_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>1</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>hunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_unified_diff_modified</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>latest_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff__file_output_baton_t</name> *</type><name>output_baton</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name><name>target_line</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>target_line</name><index>[<expr>0</expr>]</index></name> = <name>original_start</name> &gt;= <name>SVN_DIFF__UNIFIED_CONTEXT_SIZE</name>
? <name>original_start</name> - <name>SVN_DIFF__UNIFIED_CONTEXT_SIZE</name> : 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>target_line</name><index>[<expr>1</expr>]</index></name> = <name>modified_start</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>output_baton</name>-&gt;<name>current_line</name><index>[<expr>0</expr>]</index></name> &lt; <name><name>target_line</name><index>[<expr>0</expr>]</index></name>
&amp;&amp; (<name><name>output_baton</name>-&gt;<name>hunk_start</name><index>[<expr>0</expr>]</index></name> + <name><name>output_baton</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name>
+ <name>SVN_DIFF__UNIFIED_CONTEXT_SIZE</name> &lt; <name><name>target_line</name><index>[<expr>0</expr>]</index></name>
|| <name><name>output_baton</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name> == 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_flush_hunk</name><argument_list>(<argument><expr><name>output_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_baton</name>-&gt;<name>hunk_start</name><index>[<expr>0</expr>]</index></name> = <name><name>target_line</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>output_baton</name>-&gt;<name>hunk_start</name><index>[<expr>1</expr>]</index></name> = <name><name>target_line</name><index>[<expr>1</expr>]</index></name> + <name><name>target_line</name><index>[<expr>0</expr>]</index></name>
- <name>original_start</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>output_baton</name>-&gt;<name>current_line</name><index>[<expr>0</expr>]</index></name> &lt; <name><name>target_line</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_line</name><argument_list>(<argument><expr><name>output_baton</name></expr></argument>,
<argument><expr><name>svn_diff__file_output_unified_skip</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>output_baton</name>-&gt;<name>show_c_function</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>output_baton</name>-&gt;<name>hunk_extra_context</name></name></expr></argument>,
<argument><expr><name><name>output_baton</name>-&gt;<name>extra_context</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>SVN_DIFF__EXTRA_CONTEXT_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>output_baton</name>-&gt;<name>hunk_extra_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name> &gt; 0
&amp;&amp; <call><name>svn_ctype_isspace</name><argument_list>(<argument><expr><name><name>output_baton</name>-&gt;<name>hunk_extra_context</name><index>[<expr><name>p</name> - 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name><name>output_baton</name>-&gt;<name>hunk_extra_context</name><index>[<expr>--<name>p</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></while>
}</block></then></if>
}</block></then></if>
<while>while <condition>(<expr><name><name>output_baton</name>-&gt;<name>current_line</name><index>[<expr>1</expr>]</index></name> &lt; <name><name>target_line</name><index>[<expr>1</expr>]</index></name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_line</name><argument_list>(<argument><expr><name>output_baton</name></expr></argument>,
<argument><expr><name>svn_diff__file_output_unified_skip</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name><name>output_baton</name>-&gt;<name>current_line</name><index>[<expr>0</expr>]</index></name> &lt; <name>original_start</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_line</name><argument_list>(<argument><expr><name>output_baton</name></expr></argument>,
<argument><expr><name>svn_diff__file_output_unified_context</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>target_line</name><index>[<expr>0</expr>]</index></name> = <name>original_start</name> + <name>original_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>target_line</name><index>[<expr>1</expr>]</index></name> = <name>modified_start</name> + <name>modified_length</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 2</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<while>while <condition>(<expr><name><name>output_baton</name>-&gt;<name>current_line</name><index>[<expr><name>i</name></expr>]</index></name> &lt; <name><name>target_line</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_line</name>
<argument_list>(<argument><expr><name>output_baton</name></expr></argument>,
<argument><expr><name>i</name> == 0 ? <name>svn_diff__file_output_unified_delete</name>
: <name>svn_diff__file_output_unified_insert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_unified_default_hdr</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>header</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>file_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>exploded_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>time_buffer</name><index>[<expr>64</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>time_len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_stat</name><argument_list>(<argument><expr>&amp;<name>file_info</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_FINFO_MTIME</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_time_exp_lt</name><argument_list>(<argument><expr>&amp;<name>exploded_time</name></expr></argument>, <argument><expr><name><name>file_info</name>.<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_strftime</name><argument_list>(<argument><expr><name>time_buffer</name></expr></argument>, <argument><expr>&amp;<name>time_len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_buffer</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr>"%a %b %e %H:%M:%S %Y"</expr></argument>, <argument><expr>&amp;<name>exploded_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>header</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s\t%s"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>time_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_diff_output_fns_t</name></type> <name>svn_diff__file_output_unified_vtable</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>output_unified_diff_modified</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_file_output_unified3</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>output_stream</name></decl></param>,
<param><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original_header</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified_header</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header_encoding</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relative_to_dir</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_c_function</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff__file_output_baton_t</name></type> <name>baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_diff_contains_diffs</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>output_stream</name></name> = <name>output_stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>header_encoding</name></name> = <name>header_encoding</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>0</expr>]</index></name> = <name>original_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>1</expr>]</index></name> = <name>modified_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>hunk</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>show_c_function</name></name> = <name>show_c_function</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>extra_context</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>extra_skip_match</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> **</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>baton</name>.<name>extra_skip_match</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>c</name> = "public:*"</expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>baton</name>.<name>extra_skip_match</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>c</name> = "private:*"</expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>baton</name>.<name>extra_skip_match</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>c</name> = "protected:*"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8_ex2</name><argument_list>(<argument><expr>&amp;<name><name>baton</name>.<name>context_str</name></name></expr></argument>, <argument><expr>" "</expr></argument>,
<argument><expr><name>header_encoding</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8_ex2</name><argument_list>(<argument><expr>&amp;<name><name>baton</name>.<name>delete_str</name></name></expr></argument>, <argument><expr>"-"</expr></argument>,
<argument><expr><name>header_encoding</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8_ex2</name><argument_list>(<argument><expr>&amp;<name><name>baton</name>.<name>insert_str</name></name></expr></argument>, <argument><expr>"+"</expr></argument>,
<argument><expr><name>header_encoding</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>relative_to_dir</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_path</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>original_header</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>child_path</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>relative_to_dir</name></expr></argument>,
<argument><expr><name>original_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>child_path</name></expr>)</condition><then>
<expr_stmt><expr><name>original_path</name> = <name>child_path</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_RELATIVE_PATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' must be an immediate child of "
"the directory '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>original_path</name></expr></argument>, <argument><expr><name>relative_to_dir</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then></if>
<if>if <condition>(<expr>! <name>modified_header</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>child_path</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>relative_to_dir</name></expr></argument>, <argument><expr><name>modified_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>child_path</name></expr>)</condition><then>
<expr_stmt><expr><name>modified_path</name> = <name>child_path</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_RELATIVE_PATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' must be an immediate child of "
"the directory '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>modified_path</name></expr></argument>, <argument><expr><name>relative_to_dir</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then></if>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 2</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name><name>baton</name>.<name>file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>baton</name>.<name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>original_header</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_default_hdr</name>
<argument_list>(<argument><expr>&amp;<name>original_header</name></expr></argument>, <argument><expr><name>original_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>modified_header</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_default_hdr</name>
<argument_list>(<argument><expr>&amp;<name>modified_header</name></expr></argument>, <argument><expr><name>modified_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name><argument_list>(<argument><expr><name>output_stream</name></expr></argument>, <argument><expr><name>header_encoding</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr>"--- %s" <name>APR_EOL_STR</name>
"+++ %s" <name>APR_EOL_STR</name></expr></argument>,
<argument><expr><name>original_header</name></expr></argument>, <argument><expr><name>modified_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_output</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>,
<argument><expr>&amp;<name>svn_diff__file_output_unified_vtable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_flush_hunk</name><argument_list>(<argument><expr>&amp;<name>baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 2</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name><name>baton</name>.<name>file</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_file_output_unified2</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>output_stream</name></decl></param>,
<param><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original_header</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified_header</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header_encoding</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_diff_file_output_unified3</name><argument_list>(<argument><expr><name>output_stream</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>,
<argument><expr><name>original_path</name></expr></argument>, <argument><expr><name>modified_path</name></expr></argument>,
<argument><expr><name>original_header</name></expr></argument>, <argument><expr><name>modified_header</name></expr></argument>,
<argument><expr><name>header_encoding</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_file_output_unified</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>output_stream</name></decl></param>,
<param><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original_header</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified_header</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_diff_file_output_unified2</name><argument_list>(<argument><expr><name>output_stream</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>,
<argument><expr><name>original_path</name></expr></argument>, <argument><expr><name>modified_path</name></expr></argument>,
<argument><expr><name>original_header</name></expr></argument>, <argument><expr><name>modified_header</name></expr></argument>,
<argument><expr><name>SVN_APR_LOCALE_CHARSET</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <name>svn_diff3__file_output_baton_t</name> <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>output_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>path</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name><name>current_line</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>buffer</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>endp</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>curp</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_modified</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_original</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_separator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_latest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>display_original_in_conflict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>display_resolved_conflicts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_diff3__file_output_baton_t</name>;</typedef>
<typedef>typedef <type><enum>enum <name>svn_diff3__file_output_type_e</name> <block>{
<decl><name>svn_diff3__file_output_skip</name></decl>,
<decl><name>svn_diff3__file_output_normal</name></decl>
}</block></enum></type> <name>svn_diff3__file_output_type_e</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_line</name><parameter_list>(<param><decl><type><name>svn_diff3__file_output_baton_t</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_diff3__file_output_type_e</name></type> <name>type</name></decl></param>, <param><decl><type><name>int</name></type> <name>idx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>curp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>eol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>curp</name> = <name><name>baton</name>-&gt;<name>curp</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> = <name><name>baton</name>-&gt;<name>endp</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>current_line</name><index>[<expr><name>idx</name></expr>]</index></name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>curp</name> == <name>endp</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>eol</name> = <call><name>find_eol_start</name><argument_list>(<argument><expr><name>curp</name></expr></argument>, <argument><expr><name>endp</name> - <name>curp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>eol</name></expr>)</condition><then>
<expr_stmt><expr><name>eol</name> = <name>endp</name></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>had_cr</name> <init>= <expr>(*<name>eol</name> == '\r')</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>eol</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>had_cr</name> &amp;&amp; <name>eol</name> != <name>endp</name> &amp;&amp; *<name>eol</name> == '\n'</expr>)</condition><then>
<expr_stmt><expr><name>eol</name>++</expr>;</expr_stmt></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>type</name> != <name>svn_diff3__file_output_skip</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <name>eol</name> - <name>curp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>output_stream</name></name></expr></argument>, <argument><expr><name>curp</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>curp</name><index>[<expr><name>idx</name></expr>]</index></name> = <name>eol</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_hunk</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>idx</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>target_line</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>target_length</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff3__file_output_baton_t</name> *</type><name>output_baton</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>output_baton</name>-&gt;<name>current_line</name><index>[<expr><name>idx</name></expr>]</index></name> &lt; <name>target_line</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_line</name><argument_list>(<argument><expr><name>output_baton</name></expr></argument>, <argument><expr><name>svn_diff3__file_output_skip</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>target_line</name> += <name>target_length</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>output_baton</name>-&gt;<name>current_line</name><index>[<expr><name>idx</name></expr>]</index></name> &lt; <name>target_line</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_line</name><argument_list>(<argument><expr><name>output_baton</name></expr></argument>, <argument><expr><name>svn_diff3__file_output_normal</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_common</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>latest_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>output_hunk</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>modified_start</name></expr></argument>, <argument><expr><name>modified_length</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_diff_modified</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>latest_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>output_hunk</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>modified_start</name></expr></argument>, <argument><expr><name>modified_length</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_diff_latest</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>latest_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>output_hunk</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>latest_start</name></expr></argument>, <argument><expr><name>latest_length</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_conflict</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>latest_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl></param>,
<param><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_diff_output_fns_t</name></type> <name>svn_diff3__file_output_vtable</name> <init>= <expr><block>{
<expr><name>output_common</name></expr>,
<expr><name>output_diff_modified</name></expr>,
<expr><name>output_diff_latest</name></expr>,
<expr><name>output_diff_modified</name></expr>,
<expr><name>output_conflict</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_conflict</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>latest_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl></param>,
<param><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff3__file_output_baton_t</name> *</type><name>file_baton</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>diff</name> &amp;&amp; <name><name>file_baton</name>-&gt;<name>display_resolved_conflicts</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_diff_output</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>,
<argument><expr>&amp;<name>svn_diff3__file_output_vtable</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>conflict_modified</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>output_stream</name></name></expr></argument>,
<argument><expr><name><name>file_baton</name>-&gt;<name>conflict_modified</name></name></expr></argument>,
<argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_hunk</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>modified_start</name></expr></argument>, <argument><expr><name>modified_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>file_baton</name>-&gt;<name>display_original_in_conflict</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>conflict_original</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>output_stream</name></name></expr></argument>,
<argument><expr><name><name>file_baton</name>-&gt;<name>conflict_original</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_hunk</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>original_start</name></expr></argument>, <argument><expr><name>original_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>conflict_separator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>output_stream</name></name></expr></argument>,
<argument><expr><name><name>file_baton</name>-&gt;<name>conflict_separator</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_hunk</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>latest_start</name></expr></argument>, <argument><expr><name>latest_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>conflict_latest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>file_baton</name>-&gt;<name>output_stream</name></name></expr></argument>,
<argument><expr><name><name>file_baton</name>-&gt;<name>conflict_latest</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>detect_eol</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>char</name> *</type><name>endp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol</name> <init>= <expr><call><name>find_eol_start</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>endp</name> - <name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>eol</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>eol</name> == '\n'</expr>)</condition><then>
<return>return <expr>"\n"</expr>;</return></then></if>
<expr_stmt><expr>++<name>eol</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>eol</name> == <name>endp</name> || *<name>eol</name> != '\n'</expr>)</condition><then>
<return>return <expr>"\r"</expr>;</return></then></if>
<return>return <expr>"\r\n"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_file_output_merge</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>output_stream</name></decl></param>,
<param><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>latest_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_original</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_modified</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_latest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_separator</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>display_original_in_conflict</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>display_resolved_conflicts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff3__file_output_baton_t</name></type> <name>baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name><name>file</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_mmap_t</name> *</type><name><name>mm</name><index>[<expr>3</expr>]</index></name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>output_stream</name></name> = <name>output_stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>0</expr>]</index></name> = <name>original_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>1</expr>]</index></name> = <name>modified_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>path</name><index>[<expr>2</expr>]</index></name> = <name>latest_path</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name><name>baton</name>.<name>conflict_modified</name></name></expr></argument>,
<argument><expr><name>conflict_modified</name> ? <name>conflict_modified</name>
: <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;&lt;&lt;&lt;&lt;&lt;&lt; %s"</expr></argument>,
<argument><expr><name>modified_path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name><name>baton</name>.<name>conflict_original</name></name></expr></argument>,
<argument><expr><name>conflict_original</name> ? <name>conflict_original</name>
: <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"||||||| %s"</expr></argument>,
<argument><expr><name>original_path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name><name>baton</name>.<name>conflict_separator</name></name></expr></argument>,
<argument><expr><name>conflict_separator</name> ? <name>conflict_separator</name>
: "======="</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name><name>baton</name>.<name>conflict_latest</name></name></expr></argument>,
<argument><expr><name>conflict_latest</name> ? <name>conflict_latest</name>
: <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&gt;&gt;&gt;&gt;&gt;&gt;&gt; %s"</expr></argument>,
<argument><expr><name>latest_path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>display_original_in_conflict</name></name> = <name>display_original_in_conflict</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>display_resolved_conflicts</name></name> = <name>display_resolved_conflicts</name> &amp;&amp;
!<name>display_original_in_conflict</name></expr>;</expr_stmt>
<for>for (<init><expr><name>idx</name> = 0</expr>;</init> <condition><expr><name>idx</name> &lt; 3</expr>;</condition> <incr><expr><name>idx</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>map_or_read_file</name><argument_list>(<argument><expr>&amp;<name><name>file</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>MMAP_T_ARG</name><argument_list>(<argument><expr><name><name>mm</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call>
&amp;<name><name>baton</name>.<name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>,
<argument><expr><name><name>baton</name>.<name>path</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>curp</name><index>[<expr><name>idx</name></expr>]</index></name> = <name><name>baton</name>.<name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>endp</name><index>[<expr><name>idx</name></expr>]</index></name> = <name><name>baton</name>.<name>buffer</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>baton</name>.<name>endp</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><name><name>baton</name>.<name>endp</name><index>[<expr><name>idx</name></expr>]</index></name> += <name>size</name></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><name>eol</name> = <call><name>detect_eol</name><argument_list>(<argument><expr><name><name>baton</name>.<name>buffer</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>baton</name>.<name>endp</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>eol</name></expr>)</condition><then>
<expr_stmt><expr><name>eol</name> = <name>APR_EOL_STR</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>baton</name>.<name>conflict_modified</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>baton</name>.<name>conflict_modified</name></name></expr></argument>, <argument><expr><name>eol</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>conflict_original</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>baton</name>.<name>conflict_original</name></name></expr></argument>, <argument><expr><name>eol</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>conflict_separator</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>baton</name>.<name>conflict_separator</name></name></expr></argument>, <argument><expr><name>eol</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>conflict_latest</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>baton</name>.<name>conflict_latest</name></name></expr></argument>, <argument><expr><name>eol</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_output</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>,
<argument><expr>&amp;<name>svn_diff3__file_output_vtable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>idx</name> = 0</expr>;</init> <condition><expr><name>idx</name> &lt; 3</expr>;</condition> <incr><expr><name>idx</name>++</expr></incr>) <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>mm</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_mmap_delete</name><argument_list>(<argument><expr><name><name>mm</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to delete mmap '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>baton</name>.<name>path</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>file</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name><name>file</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
