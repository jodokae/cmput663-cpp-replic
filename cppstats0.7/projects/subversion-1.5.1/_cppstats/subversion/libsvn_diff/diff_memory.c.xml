<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_diff/diff_memory.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WANT_MEMFUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>source_tokens_t</name> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>tokens</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>next_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ends_without_eol</name></decl>;</decl_stmt>
}</block></struct></type> <name>source_tokens_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>diff_mem_baton_t</name> <block>{
<decl_stmt><decl><type><name>source_tokens_t</name></type> <name><name>sources</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name><name>normalization_buf</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>normalization_options</name></decl>;</decl_stmt>
}</block></struct></type> <name>diff_mem_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>datasource_to_index</name><parameter_list>(<param><decl><type><name>svn_diff_datasource_e</name></type> <name>datasource</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>datasource</name></expr>)</condition> <block>{
<case>case <expr><name>svn_diff_datasource_original</name></expr>:
<return>return <expr>0</expr>;</return>
</case><case>case <expr><name>svn_diff_datasource_modified</name></expr>:
<return>return <expr>1</expr>;</return>
</case><case>case <expr><name>svn_diff_datasource_latest</name></expr>:
<return>return <expr>2</expr>;</return>
</case><case>case <expr><name>svn_diff_datasource_ancestor</name></expr>:
<return>return <expr>3</expr>;</return>
</case>}</block></switch>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>datasource_open</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>svn_diff_datasource_e</name></type> <name>datasource</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>datasource_close</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>svn_diff_datasource_e</name></type> <name>datasource</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>datasource_get_next_token</name><parameter_list>(<param><decl><type><name>apr_uint32_t</name> *</type><name>hash</name></decl></param>, <param><decl><type><name>void</name> **</type><name>token</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_diff_datasource_e</name></type> <name>datasource</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>diff_mem_baton_t</name> *</type><name>mem_baton</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>source_tokens_t</name> *</type><name>src</name> <init>= <expr>&amp;(<name><name>mem_baton</name>-&gt;<name>sources</name><index>[<expr><call><name>datasource_to_index</name><argument_list>(<argument><expr><name>datasource</name></expr></argument>)</argument_list></call></expr>]</index></name>)</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>src</name>-&gt;<name>tokens</name>-&gt;<name>nelts</name></name> &gt; <name><name>src</name>-&gt;<name>next_token</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name> <init>= <expr><name><name>mem_baton</name>-&gt;<name>normalization_buf</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>tok</name> <init>= <expr>(*<name>token</name>)
= <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>next_token</name></name></expr></argument>, <argument><expr><name>svn_string_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name> <init>= <expr><name><name>tok</name>-&gt;<name>len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__normalize_state_t</name></type> <name>state</name>
<init>= <expr><name>svn_diff__normalize_state_normal</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_diff__normalize_buffer</name><argument_list>(<argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>tok</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>mem_baton</name>-&gt;<name>normalization_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>hash</name> = <call><name>svn_diff__adler32</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name>-&gt;<name>next_token</name></name>++</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>token</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>token_compare</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>void</name> *</type><name>token1</name></decl></param>, <param><decl><type><name>void</name> *</type><name>token2</name></decl></param>, <param><decl><type><name>int</name> *</type><name>result</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>diff_mem_baton_t</name> *</type><name>btn</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>t1</name> <init>= <expr><name>token1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>t2</name> <init>= <expr><name>token2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf1</name> <init>= <expr><name><name>btn</name>-&gt;<name>normalization_buf</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf2</name> <init>= <expr><name><name>btn</name>-&gt;<name>normalization_buf</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len1</name> <init>= <expr><name><name>t1</name>-&gt;<name>len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len2</name> <init>= <expr><name><name>t2</name>-&gt;<name>len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff__normalize_state_t</name></type> <name>state</name> <init>= <expr><name>svn_diff__normalize_state_normal</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_diff__normalize_buffer</name><argument_list>(<argument><expr>&amp;<name>buf1</name></expr></argument>, <argument><expr>&amp;<name>len1</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>t1</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>btn</name>-&gt;<name>normalization_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> = <name>svn_diff__normalize_state_normal</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_diff__normalize_buffer</name><argument_list>(<argument><expr>&amp;<name>buf2</name></expr></argument>, <argument><expr>&amp;<name>len2</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>t2</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>btn</name>-&gt;<name>normalization_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len1</name> != <name>len2</name></expr>)</condition><then>
<expr_stmt><expr>*<name>result</name> = (<name>len1</name> &lt; <name>len2</name>) ? -1 : 1</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>result</name> = (<name>len1</name> == 0) ? 0 : <call><name>memcmp</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>token_discard</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>void</name> *</type><name>token</name></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>token_discard_all</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_diff_fns_t</name></type> <name>svn_diff__mem_vtable</name> <init>= <expr><block>{
<expr><name>datasource_open</name></expr>,
<expr><name>datasource_close</name></expr>,
<expr><name>datasource_get_next_token</name></expr>,
<expr><name>token_compare</name></expr>,
<expr><name>token_discard</name></expr>,
<expr><name>token_discard_all</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_source_tokens</name><parameter_list>(<param><decl><type><name>source_tokens_t</name> *</type><name>src</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>text</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>curp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>startp</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>src</name>-&gt;<name>tokens</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_string_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name>-&gt;<name>next_token</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name>-&gt;<name>source</name></name> = (<name>svn_string_t</name> *)<name>text</name></expr>;</expr_stmt>
<for>for (<init><expr><name>startp</name> = <name>curp</name> = <name><name>text</name>-&gt;<name>data</name></name></expr>, <expr><name>endp</name> = <name>curp</name> + <name><name>text</name>-&gt;<name>len</name></name></expr>;</init>
<condition><expr><name>curp</name> != <name>endp</name></expr>;</condition> <incr><expr><name>curp</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name>curp</name> != <name>endp</name> &amp;&amp; *<name>curp</name> == '\r' &amp;&amp; *(<name>curp</name> + 1) == '\n'</expr>)</condition><then>
<expr_stmt><expr><name>curp</name>++</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>curp</name> == '\r' || *<name>curp</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>svn_string_t</name> *</expr></argument>)</argument_list></call> =
<call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name>startp</name></expr></argument>, <argument><expr><name>curp</name> - <name>startp</name> + 1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>startp</name> = <name>curp</name> + 1</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>startp</name> != <name>endp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>svn_string_t</name> *</expr></argument>)</argument_list></call> =
<call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name>startp</name></expr></argument>, <argument><expr><name>endp</name> - <name>startp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name>-&gt;<name>ends_without_eol</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>src</name>-&gt;<name>ends_without_eol</name></name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>alloc_normalization_bufs</name><parameter_list>(<param><decl><type><name>diff_mem_baton_t</name> *</type><name>btn</name></decl></param>,
<param><decl><type><name>int</name></type> <name>sources</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>max_len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>sources</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>tokens</name> <init>= <expr><name><name>btn</name>-&gt;<name>sources</name><index>[<expr><name>i</name></expr>]</index></name>.<name>tokens</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>tokens</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
<for>for (<init><expr><name>idx</name> = 0</expr>;</init> <condition><expr><name>idx</name> &lt; <name><name>tokens</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>idx</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>token_len</name>
<init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>svn_string_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>len</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>max_len</name> = (<name>max_len</name> &lt; <name>token_len</name>) ? <name>token_len</name> : <name>max_len</name></expr>;</expr_stmt>
}</block></for></then></if>
}</block></for>
<expr_stmt><expr><name><name>btn</name>-&gt;<name>normalization_buf</name><index>[<expr>0</expr>]</index></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>btn</name>-&gt;<name>normalization_buf</name><index>[<expr>1</expr>]</index></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_mem_string_diff</name><parameter_list>(<param><decl><type><name>svn_diff_t</name> **</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>original</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>modified</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>options</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>diff_mem_baton_t</name></type> <name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;(<name><name>baton</name>.<name>sources</name><index>[<expr>0</expr>]</index></name>)</expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;(<name><name>baton</name>.<name>sources</name><index>[<expr>1</expr>]</index></name>)</expr></argument>, <argument><expr><name>modified</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alloc_normalization_bufs</name><argument_list>(<argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>normalization_options</name></name> = <name>options</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_diff</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>&amp;<name>svn_diff__mem_vtable</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_mem_string_diff3</name><parameter_list>(<param><decl><type><name>svn_diff_t</name> **</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>original</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>modified</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>latest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>options</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>diff_mem_baton_t</name></type> <name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;(<name><name>baton</name>.<name>sources</name><index>[<expr>0</expr>]</index></name>)</expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;(<name><name>baton</name>.<name>sources</name><index>[<expr>1</expr>]</index></name>)</expr></argument>, <argument><expr><name>modified</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;(<name><name>baton</name>.<name>sources</name><index>[<expr>2</expr>]</index></name>)</expr></argument>, <argument><expr><name>latest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alloc_normalization_bufs</name><argument_list>(<argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>normalization_options</name></name> = <name>options</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_diff3</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>&amp;<name>svn_diff__mem_vtable</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_mem_string_diff4</name><parameter_list>(<param><decl><type><name>svn_diff_t</name> **</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>original</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>modified</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>latest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>ancestor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>options</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>diff_mem_baton_t</name></type> <name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;(<name><name>baton</name>.<name>sources</name><index>[<expr>0</expr>]</index></name>)</expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;(<name><name>baton</name>.<name>sources</name><index>[<expr>1</expr>]</index></name>)</expr></argument>, <argument><expr><name>modified</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;(<name><name>baton</name>.<name>sources</name><index>[<expr>2</expr>]</index></name>)</expr></argument>, <argument><expr><name>latest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;(<name><name>baton</name>.<name>sources</name><index>[<expr>3</expr>]</index></name>)</expr></argument>, <argument><expr><name>ancestor</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>alloc_normalization_bufs</name><argument_list>(<argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>normalization_options</name></name> = <name>options</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_diff4</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>&amp;<name>svn_diff__mem_vtable</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<typedef>typedef <type><enum>enum <name>unified_output_e</name> <block>{
<decl><name>unified_output_context</name> <init>= <expr>0</expr></init></decl>,
<decl><name>unified_output_delete</name></decl>,
<decl><name>unified_output_insert</name></decl>
}</block></enum></type> <name>unified_output_e</name>;</typedef>
<typedef>typedef <type><struct>struct <name>unified_output_baton_t</name> <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>output_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>source_tokens_t</name></type> <name><name>sources</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>next_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>prefix_str</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>hunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name><name>hunk_length</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name><name>hunk_start</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>output_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_unified_token_range</name><parameter_list>(<param><decl><type><name>output_baton_t</name> *</type><name>btn</name></decl></param>,
<param><decl><type><name>int</name></type> <name>tokens</name></decl></param>,
<param><decl><type><name>unified_output_e</name></type> <name>type</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>first</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>past_last</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>source_tokens_t</name> *</type><name>source</name> <init>= <expr>&amp;<name><name>btn</name>-&gt;<name>sources</name><index>[<expr><name>tokens</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>idx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>past_last</name> = (<name>past_last</name> &gt; <name><name>source</name>-&gt;<name>tokens</name>-&gt;<name>nelts</name></name>)
? <name><name>source</name>-&gt;<name>tokens</name>-&gt;<name>nelts</name></name> : <name>past_last</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tokens</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>first</name> = (<name>first</name> &lt; <name><name>btn</name>-&gt;<name>next_token</name></name>) ? <name><name>btn</name>-&gt;<name>next_token</name></name> : <name>first</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>first</name> &gt;= <name>past_last</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<for>for (<init><expr><name>idx</name> = <name>first</name></expr>;</init> <condition><expr><name>idx</name> &lt; <name>past_last</name></expr>;</condition> <incr><expr><name>idx</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>token</name>
<init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>source</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>svn_string_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name><name>btn</name>-&gt;<name>hunk</name></name></expr></argument>, <argument><expr><name><name>btn</name>-&gt;<name>prefix_str</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>btn</name>-&gt;<name>hunk</name></name></expr></argument>, <argument><expr><name><name>token</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>token</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>type</name> == <name>unified_output_context</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>btn</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>btn</name>-&gt;<name>hunk_length</name><index>[<expr>1</expr>]</index></name>++</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>type</name> == <name>unified_output_delete</name></expr>)</condition><then>
<expr_stmt><expr><name><name>btn</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name>++</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>btn</name>-&gt;<name>hunk_length</name><index>[<expr>1</expr>]</index></name>++</expr>;</expr_stmt></else></if></else></if>
}</block></for>
<if>if <condition>(<expr><name>past_last</name> == <name><name>source</name>-&gt;<name>tokens</name>-&gt;<name>nelts</name></name> &amp;&amp; <name><name>source</name>-&gt;<name>ends_without_eol</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>out_str</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8_ex2</name>
<argument_list>(<argument><expr>&amp;<name>out_str</name></expr></argument>,
<argument><expr><name>APR_EOL_STR</name> "\\ No newline at end of file" <name>APR_EOL_STR</name></expr></argument>,
<argument><expr><name><name>btn</name>-&gt;<name>header_encoding</name></name></expr></argument>, <argument><expr><name><name>btn</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name><name>btn</name>-&gt;<name>hunk</name></name></expr></argument>, <argument><expr><name>out_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>tokens</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>btn</name>-&gt;<name>next_token</name></name> = <name>past_last</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_unified_flush_hunk</name><parameter_list>(<param><decl><type><name>output_baton_t</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>target_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>hunk_len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_stringbuf_isempty</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>hunk</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target_token</name> = <name><name>baton</name>-&gt;<name>hunk_start</name><index>[<expr>0</expr>]</index></name> + <name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name>
+ <name>SVN_DIFF__UNIFIED_CONTEXT_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_token_range</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr>0</expr></argument> ,
<argument><expr><name>unified_output_context</name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>next_token</name></name></expr></argument>, <argument><expr><name>target_token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>hunk_start</name><index>[<expr>0</expr>]</index></name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name>
<argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>output_stream</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>header_encoding</name></name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>(<name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name> == 1)
? ("@@ -%" <name>APR_OFF_T_FMT</name>)
: ("@@ -%" <name>APR_OFF_T_FMT</name> ",%" <name>APR_OFF_T_FMT</name>)</expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>hunk_start</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>1</expr>]</index></name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>hunk_start</name><index>[<expr>1</expr>]</index></name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name>
<argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>output_stream</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>header_encoding</name></name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>(<name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>1</expr>]</index></name> == 1)
? (" +%" <name>APR_OFF_T_FMT</name> " @@" <name>APR_EOL_STR</name>)
: (" +%" <name>APR_OFF_T_FMT</name> ",%" <name>APR_OFF_T_FMT</name> " @@" <name>APR_EOL_STR</name>)</expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>hunk_start</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hunk_len</name> = <name><name>baton</name>-&gt;<name>hunk</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>output_stream</name></name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>hunk</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>hunk_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name> = <name><name>baton</name>-&gt;<name>hunk_length</name><index>[<expr>1</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>hunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_unified_diff_modified</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>latest_start</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>output_baton_t</name> *</type><name>btn</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>targ_orig</name></decl>, <decl><type ref="prev"/><name>targ_mod</name></decl>;</decl_stmt>
<expr_stmt><expr><name>targ_orig</name> = <name>original_start</name> - <name>SVN_DIFF__UNIFIED_CONTEXT_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>targ_orig</name> = (<name>targ_orig</name> &lt; 0) ? 0 : <name>targ_orig</name></expr>;</expr_stmt>
<expr_stmt><expr><name>targ_mod</name> = <name>modified_start</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>btn</name>-&gt;<name>next_token</name></name> + <name>SVN_DIFF__UNIFIED_CONTEXT_SIZE</name> &lt; <name>targ_orig</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_flush_hunk</name><argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>btn</name>-&gt;<name>hunk_length</name><index>[<expr>0</expr>]</index></name> == 0
&amp;&amp; <name><name>btn</name>-&gt;<name>hunk_length</name><index>[<expr>1</expr>]</index></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>btn</name>-&gt;<name>hunk_start</name><index>[<expr>0</expr>]</index></name> = <name>targ_orig</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>btn</name>-&gt;<name>hunk_start</name><index>[<expr>1</expr>]</index></name> = <name>targ_mod</name> + <name>targ_orig</name> - <name>original_start</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_token_range</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>unified_output_context</name></expr></argument>,
<argument><expr><name>targ_orig</name></expr></argument>, <argument><expr><name>original_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_token_range</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>unified_output_delete</name></expr></argument>,
<argument><expr><name>original_start</name></expr></argument>,
<argument><expr><name>original_start</name> + <name>original_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_token_range</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>unified_output_insert</name></expr></argument>,
<argument><expr><name>modified_start</name></expr></argument>,
<argument><expr><name>modified_start</name> + <name>modified_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_diff_output_fns_t</name></type> <name>mem_output_unified_vtable</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>output_unified_diff_modified</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_mem_string_output_unified</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>output_stream</name></decl></param>,
<param><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original_header</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modified_header</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header_encoding</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>original</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>modified</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>svn_diff_contains_diffs</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>output_baton_t</name></type> <name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>output_stream</name></name> = <name>output_stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>header_encoding</name></name> = <name>header_encoding</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>.<name>hunk</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8_ex2</name>
<argument_list>(<argument><expr>&amp;(<name><name>baton</name>.<name>prefix_str</name><index>[<expr><name>unified_output_context</name></expr>]</index></name>)</expr></argument>, <argument><expr>" "</expr></argument>,
<argument><expr><name>header_encoding</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8_ex2</name>
<argument_list>(<argument><expr>&amp;(<name><name>baton</name>.<name>prefix_str</name><index>[<expr><name>unified_output_delete</name></expr>]</index></name>)</expr></argument>, <argument><expr>"-"</expr></argument>,
<argument><expr><name>header_encoding</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8_ex2</name>
<argument_list>(<argument><expr>&amp;(<name><name>baton</name>.<name>prefix_str</name><index>[<expr><name>unified_output_insert</name></expr>]</index></name>)</expr></argument>, <argument><expr>"+"</expr></argument>,
<argument><expr><name>header_encoding</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;<name><name>baton</name>.<name>sources</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;<name><name>baton</name>.<name>sources</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>modified</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name>
<argument_list>(<argument><expr><name>output_stream</name></expr></argument>, <argument><expr><name>header_encoding</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr>"--- %s" <name>APR_EOL_STR</name>
"+++ %s" <name>APR_EOL_STR</name></expr></argument>,
<argument><expr><name>original_header</name></expr></argument>, <argument><expr><name>modified_header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_output</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>,
<argument><expr>&amp;<name>mem_output_unified_vtable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_unified_flush_hunk</name><argument_list>(<argument><expr>&amp;<name>baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>baton</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <name>merge_output_baton_t</name> <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>output_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>source_tokens_t</name></type> <name><name>sources</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>next_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>markers</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>display_original_in_conflict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>display_resolved_conflicts</name></decl>;</decl_stmt>
}</block></struct></type> <name>merge_output_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_merge_token_range</name><parameter_list>(<param><decl><type><name>merge_output_baton_t</name> *</type><name>btn</name></decl></param>,
<param><decl><type><name>int</name></type> <name>idx</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>first</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>tokens</name> <init>= <expr><name><name>btn</name>-&gt;<name>sources</name><index>[<expr><name>idx</name></expr>]</index></name>.<name>tokens</name></expr></init></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr><name>length</name> &gt; 0</expr>;</condition> <incr><expr><name>length</name>--</expr>, <expr><name>first</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>token</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>svn_string_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name><name>token</name>-&gt;<name>len</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>btn</name>-&gt;<name>output_stream</name></name></expr></argument>, <argument><expr><name><name>token</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_merge_marker</name><parameter_list>(<param><decl><type><name>merge_output_baton_t</name> *</type><name>btn</name></decl></param>, <param><decl><type><name>int</name></type> <name>idx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>btn</name>-&gt;<name>markers</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>btn</name>-&gt;<name>output_stream</name></name></expr></argument>, <argument><expr><name><name>btn</name>-&gt;<name>markers</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_common_modified</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>latest_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>output_merge_token_range</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name>modified_start</name></expr></argument>, <argument><expr><name>modified_length</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_latest</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>latest_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>output_merge_token_range</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr>2</expr></argument>,
<argument><expr><name>latest_start</name></expr></argument>, <argument><expr><name>latest_length</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_conflict</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>latest_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl></param>,
<param><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_diff_output_fns_t</name></type> <name>merge_output_vtable</name> <init>= <expr><block>{
<expr><name>output_common_modified</name></expr>,
<expr><name>output_common_modified</name></expr>,
<expr><name>output_latest</name></expr>,
<expr><name>output_common_modified</name></expr>,
<expr><name>output_conflict</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_conflict</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>latest_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl></param>,
<param><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>merge_output_baton_t</name> *</type><name>btn</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>diff</name> &amp;&amp; <name><name>btn</name>-&gt;<name>display_resolved_conflicts</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_diff_output</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr>&amp;<name>merge_output_vtable</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_merge_marker</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_merge_token_range</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name>modified_start</name></expr></argument>, <argument><expr><name>modified_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>btn</name>-&gt;<name>display_original_in_conflict</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_merge_marker</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_merge_token_range</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>original_start</name></expr></argument>, <argument><expr><name>original_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_merge_marker</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_merge_token_range</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr>2</expr></argument>,
<argument><expr><name>latest_start</name></expr></argument>, <argument><expr><name>latest_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>output_merge_marker</name><argument_list>(<argument><expr><name>btn</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>detect_eol</name><parameter_list>(<param><decl><type><name>svn_string_t</name> *</type><name>token</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>curp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>token</name>-&gt;<name>len</name></name> == 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>curp</name> = <name><name>token</name>-&gt;<name>data</name></name> + <name><name>token</name>-&gt;<name>len</name></name> - 1</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>curp</name> == '\r'</expr>)</condition><then>
<return>return <expr>"\r"</expr>;</return></then>
<else>else <if>if <condition>(<expr>*<name>curp</name> != '\n'</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then>
<else>else <block>{
<if>if <condition>(<expr><name><name>token</name>-&gt;<name>len</name></name> == 1
|| *(--<name>curp</name>) != '\r'</expr>)</condition><then>
<return>return <expr>"\n"</expr>;</return></then>
<else>else
<return>return <expr>"\r\n"</expr>;</return></else></if>
}</block></else></if></else></if>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_mem_string_output_merge</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>output_stream</name></decl></param>,
<param><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>original</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>modified</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>latest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_original</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_modified</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_latest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflict_separator</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>display_original_in_conflict</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>display_resolved_conflicts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>merge_output_baton_t</name></type> <name>btn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>btn</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>btn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>btn</name>.<name>output_stream</name></name> = <name>output_stream</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;(<name><name>btn</name>.<name>sources</name><index>[<expr>0</expr>]</index></name>)</expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;(<name><name>btn</name>.<name>sources</name><index>[<expr>1</expr>]</index></name>)</expr></argument>, <argument><expr><name>modified</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fill_source_tokens</name><argument_list>(<argument><expr>&amp;(<name><name>btn</name>.<name>sources</name><index>[<expr>2</expr>]</index></name>)</expr></argument>, <argument><expr><name>latest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>btn</name>.<name>display_original_in_conflict</name></name> = <name>display_original_in_conflict</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>btn</name>.<name>display_resolved_conflicts</name></name> = <name>display_resolved_conflicts</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>btn</name>.<name>sources</name><index>[<expr>1</expr>]</index></name>.<name><name>tokens</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>eol</name> = <call><name>detect_eol</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>btn</name>.<name>sources</name><index>[<expr>1</expr>]</index></name>.<name>tokens</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>svn_string_t</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>eol</name></expr>)</condition><then>
<expr_stmt><expr><name>eol</name> = <name>APR_EOL_STR</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else
<expr_stmt><expr><name>eol</name> = <name>APR_EOL_STR</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8</name>
<argument_list>(<argument><expr>&amp;<name><name>btn</name>.<name>markers</name><index>[<expr>1</expr>]</index></name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
<argument><expr><name>conflict_modified</name>
? <name>conflict_modified</name> : "&lt;&lt;&lt;&lt;&lt;&lt;&lt; (modified)"</expr></argument>,
<argument><expr><name>eol</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8</name>
<argument_list>(<argument><expr>&amp;<name><name>btn</name>.<name>markers</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
<argument><expr><name>conflict_original</name>
? <name>conflict_original</name> : "||||||| (original)"</expr></argument>,
<argument><expr><name>eol</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8</name>
<argument_list>(<argument><expr>&amp;<name><name>btn</name>.<name>markers</name><index>[<expr>2</expr>]</index></name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
<argument><expr><name>conflict_separator</name>
? <name>conflict_separator</name> : "======="</expr></argument>,
<argument><expr><name>eol</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8</name>
<argument_list>(<argument><expr>&amp;<name><name>btn</name>.<name>markers</name><index>[<expr>3</expr>]</index></name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
<argument><expr><name>conflict_latest</name>
? <name>conflict_latest</name> : "&gt;&gt;&gt;&gt;&gt;&gt;&gt; (latest)"</expr></argument>,
<argument><expr><name>eol</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_output</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr>&amp;<name>btn</name></expr></argument>, <argument><expr>&amp;<name>merge_output_vtable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
