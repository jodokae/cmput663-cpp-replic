<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_fs_base/trail.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APU_WANT_DB</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apu_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/bdb-err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/bdb_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trail.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_fs/fs-loader.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_FS__TRAIL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>trail_debug_t</name> <block>{
<decl_stmt><decl><type>struct <name>trail_debug_t</name> *</type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>op</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><name>void</name></type>
<name>svn_fs_base__trail_debug</name><parameter_list>(<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>table</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>trail_debug_t</name> *</type><name>trail_debug</name></decl>;</decl_stmt>
<expr_stmt><expr><name>trail_debug</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>trail_debug</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trail_debug</name>-&gt;<name>prev</name></name> = <name><name>trail</name>-&gt;<name>trail_debug</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trail_debug</name>-&gt;<name>table</name></name> = <name>table</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trail_debug</name>-&gt;<name>op</name></name> = <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trail</name>-&gt;<name>trail_debug</name></name> = <name>trail_debug</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_trail_debug</name><parameter_list>(<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_body_fn_name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>, <param><decl><type><name>int</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>trail_debug_t</name> *</type><name>trail_debug</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"(%s, %s, %u, %u): "</expr></argument>,
<argument><expr><name>txn_body_fn_name</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name> ? 1 : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>trail_debug</name> = <name><name>trail</name>-&gt;<name>trail_debug</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>trail_debug</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"(%s, %s) "</expr></argument>, <argument><expr><name><name>trail_debug</name>-&gt;<name>table</name></name></expr></argument>, <argument><expr><name><name>trail_debug</name>-&gt;<name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>trail_debug</name> = <name><name>trail_debug</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print_trail_debug</name><parameter_list>(<param><type><name>trail</name></type></param>, <param><type><name>txn_body_fn_name</name></type></param>, <param><type><name>filename</name></type></param>, <param><type><name>line</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>begin_trail</name><parameter_list>(<param><decl><type><name>trail_t</name> **</type><name>trail_p</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_txn</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>trail_t</name> *</type><name>trail</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>trail</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>trail</name>-&gt;<name>pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>trail</name>-&gt;<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>use_txn</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>bfd</name>-&gt;<name>in_txn_trail</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"beginning Berkeley DB transaction"</expr></argument>,
<argument><expr><call><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name>-&gt;<name>txn_begin</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>&amp;<name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bfd</name>-&gt;<name>in_txn_trail</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>trail</name>-&gt;<name>db_txn</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>trail_p</name> = <name>trail</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>abort_trail</name><parameter_list>(<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>bfd</name>-&gt;<name>in_txn_trail</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"aborting Berkeley DB transaction"</expr></argument>,
<argument><expr><call><name><name>trail</name>-&gt;<name>db_txn</name>-&gt;<name>abort</name></name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>commit_trail</name><parameter_list>(<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>bfd</name>-&gt;<name>in_txn_trail</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"committing Berkeley DB transaction"</expr></argument>,
<argument><expr><call><name><name>trail</name>-&gt;<name>db_txn</name>-&gt;<name>commit</name></name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>db_err</name> = <call><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name>-&gt;<name>txn_checkpoint</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr>1024</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>db_err</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SVN_BDB_HAS_DB_INCOMPLETE</name></expr></cpp:if>
<if>if <condition>(<expr><name>db_err</name> != <name>DB_INCOMPLETE</name></expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<return>return <expr><call><name>svn_fs_bdb__wrap_db</name>
<argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"checkpointing after Berkeley DB transaction"</expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_retry</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><function_decl><type><name>svn_error_t</name> *</type>(*<name>txn_body</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_txn</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_body_fn_name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
<param><decl><type><name>int</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<decl_stmt><decl><type><name>trail_t</name> *</type><name>trail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>svn_err</name></decl>, *<decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>deadlocked</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>begin_trail</name><argument_list>(<argument><expr>&amp;<name>trail</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>use_txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>svn_err</name> = <call>(*<name>txn_body</name>)<argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>svn_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>commit_trail</name><argument_list>(<argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>use_txn</name></expr>)</condition><then>
<expr_stmt><expr><call><name>print_trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr><name>txn_body_fn_name</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>err</name> = <name>svn_err</name></expr>;</init> <condition><expr><name>err</name></expr>;</condition> <incr><expr><name>err</name> = <name><name>err</name>-&gt;<name>child</name></name></expr></incr>)
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_BERKELEY_DB_DEADLOCK</name></expr>)</condition><then>
<expr_stmt><expr><name>deadlocked</name> = <name>TRUE</name></expr>;</expr_stmt></then></if></for>
<if>if <condition>(<expr>! <name>deadlocked</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>abort_trail</name><argument_list>(<argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>svn_err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>svn_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>abort_trail</name><argument_list>(<argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__retry_debug</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><function_decl><type><name>svn_error_t</name> *</type>(*<name>txn_body</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_body_fn_name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
<param><decl><type><name>int</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>do_retry</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_body</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>txn_body_fn_name</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_FS__TRAIL_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>svn_fs_base__retry_txn</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__retry_txn</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><function_decl><type><name>svn_error_t</name> *</type>(*<name>txn_body</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>do_retry</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_body</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr>"unknown"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__retry</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><function_decl><type><name>svn_error_t</name> *</type>(*<name>txn_body</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>do_retry</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_body</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
