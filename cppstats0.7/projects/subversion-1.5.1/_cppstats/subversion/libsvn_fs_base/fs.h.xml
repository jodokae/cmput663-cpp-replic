<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_fs_base/fs.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_LIBSVN_FS_BASE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_FS_BASE_H</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APU_WANT_DB</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apu_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/env.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS_BASE__FORMAT_NUMBER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS_BASE__MIN_NODE_ORIGINS_FORMAT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS_BASE__MIN_MERGEINFO_FORMAT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS_BASE__MIN_SVNDIFF1_FORMAT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__test_required_feature_format</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>feature</name></decl></param>,
<param><decl><type><name>int</name></type> <name>requires</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DB</name> *</type><name>changes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DB</name> *</type><name>copies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DB</name> *</type><name>nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DB</name> *</type><name>representations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DB</name> *</type><name>revisions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DB</name> *</type><name>strings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DB</name> *</type><name>transactions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DB</name> *</type><name>uuids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DB</name> *</type><name>locks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DB</name> *</type><name>lock_tokens</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DB</name> *</type><name>node_origins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>in_txn_trail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>
}</block></struct></type> <name>base_fs_data_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>revision_t</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>transaction_kind_normal</name> <init>= <expr>1</expr></init></decl>,
<decl><name>transaction_kind_committed</name></decl>,
<decl><name>transaction_kind_dead</name></decl>
}</block></enum></type> <name>transaction_kind_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>transaction_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>root_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>base_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>copies</name></decl>;</decl_stmt>
}</block></struct></type> <name>transaction_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>predecessor_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>predecessor_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>edit_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>created_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>mergeinfo_count</name></decl>;</decl_stmt>
}</block></struct></type> <name>node_revision_t</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>rep_kind_fulltext</name> <init>= <expr>1</expr></init></decl>,
<decl><name>rep_kind_delta</name></decl>
}</block></enum></type> <name>rep_kind_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_byte_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl>;</decl_stmt>
}</block></struct></type> <name>rep_delta_chunk_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>rep_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>checksum</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<union>union <block>{
<struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string_key</name></decl>;</decl_stmt>
}</block> <decl><name>fulltext</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>chunks</name></decl>;</decl_stmt>
}</block> <decl><name>delta</name></decl>;</struct>
}</block> <decl><name>contents</name></decl>;</union>
}</block></struct></type> <name>representation_t</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>copy_kind_real</name> <init>= <expr>1</expr></init></decl>,
<decl><name>copy_kind_soft</name></decl>
}</block></enum></type> <name>copy_kind_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>copy_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_txn_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>dst_noderev_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>copy_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>noderev_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_path_change_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_mod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>prop_mod</name></decl>;</decl_stmt>
}</block></struct></type> <name>change_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl>;</decl_stmt>
}</block></struct></type> <name>lock_node_t</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
