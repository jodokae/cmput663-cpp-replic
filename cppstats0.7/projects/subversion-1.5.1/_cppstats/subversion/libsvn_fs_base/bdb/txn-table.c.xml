<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_fs_base/bdb/txn-table.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../key-gen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/skel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/fs_skels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../trail.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs/fs-loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb-err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"txn-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>is_committed</name><parameter_list>(<param><decl><type><name>transaction_t</name> *</type><name>txn</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name><name>txn</name>-&gt;<name>kind</name></name> == <name>transaction_kind_committed</name>) ? <name>TRUE</name> : <name>FALSE</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>svn_fs_bdb__open_transactions_table</name><parameter_list>(<param><decl><type><name>DB</name> **</type><name>transactions_p</name></decl></param>,
<param><decl><type><name>DB_ENV</name> *</type><name>env</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>create</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>u_int32_t</name></type> <name>open_flags</name> <init>= <expr>(<name>create</name> ? (<name>DB_CREATE</name> | <name>DB_EXCL</name>) : 0)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DB</name> *</type><name>txns</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__check_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name>db_create</name><argument_list>(<argument><expr>&amp;<name>txns</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call>(<name><name>txns</name>-&gt;<name>open</name></name>)<argument_list>(<argument><expr><call><name>SVN_BDB_OPEN_PARAMS</name><argument_list>(<argument><expr><name>txns</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"transactions"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>DB_BTREE</name></expr></argument>,
<argument><expr><name>open_flags</name></expr></argument>, <argument><expr>0666</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>create</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name><name>txns</name>-&gt;<name>put</name></name><argument_list>(<argument><expr><name>txns</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NEXT_KEY_KEY</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>transactions_p</name> = <name>txns</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__put_txn</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>transaction_t</name> *</type><name>txn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>txn_skel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__unparse_transaction_skel</name><argument_list>(<argument><expr>&amp;<name>txn_skel</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__skel_to_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>txn_skel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"transactions"</expr></argument>, <argument><expr>"put"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"storing transaction record"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name><name>bfd</name>-&gt;<name>transactions</name>-&gt;<name>put</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>transactions</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>allocate_txn_id</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>id_p</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>query</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>next_key</name><index>[<expr><name>MAX_KEY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>query</name></expr></argument>, <argument><expr><name>NEXT_KEY_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"transactions"</expr></argument>, <argument><expr>"get"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"allocating new transaction ID (getting 'next-key')"</expr></argument>,
<argument><expr><call><name><name>bfd</name>-&gt;<name>transactions</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>transactions</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
<argument><expr>&amp;<name>query</name></expr></argument>,
<argument><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>id_p</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>result</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>result</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name><name>result</name>.<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__next_key</name><argument_list>(<argument><expr><name><name>result</name>.<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>next_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>query</name></expr></argument>, <argument><expr><name>NEXT_KEY_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>next_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"transactions"</expr></argument>, <argument><expr>"put"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>db_err</name> = <call><name><name>bfd</name>-&gt;<name>transactions</name>-&gt;<name>put</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>transactions</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
<argument><expr>&amp;<name>query</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"bumping next transaction key"</expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__create_txn</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>txn_name_p</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>root_id</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>transaction_t</name></type> <name>txn</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>allocate_txn_id</name><argument_list>(<argument><expr>&amp;<name>txn_name</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txn</name>.<name>kind</name></name> = <name>transaction_kind_normal</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txn</name>.<name>root_id</name></name> = <name>root_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txn</name>.<name>base_id</name></name> = <name>root_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txn</name>.<name>proplist</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txn</name>.<name>copies</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>txn</name>.<name>revision</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__put_txn</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>txn_name_p</name> = <name>txn_name</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__delete_txn</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>transaction_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__get_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>is_committed</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_fs_base__err_txn_not_mutable</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"transactions"</expr></argument>, <argument><expr>"del"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"deleting entry from 'transactions' table"</expr></argument>,
<argument><expr><call><name><name>bfd</name>-&gt;<name>transactions</name>-&gt;<name>del</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>transactions</name></name></expr></argument>,
<argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__get_txn</name><parameter_list>(<param><decl><type><name>transaction_t</name> **</type><name>txn_p</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>transaction_t</name> *</type><name>transaction</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"transactions"</expr></argument>, <argument><expr>"get"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>db_err</name> = <call><name><name>bfd</name>-&gt;<name>transactions</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>transactions</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
<argument><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>db_err</name> == <name>DB_NOTFOUND</name></expr>)</condition><then>
<return>return <expr><call><name>svn_fs_base__err_no_such_txn</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"reading transaction"</expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skel</name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name><name>value</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>.<name>size</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>skel</name></expr>)</condition><then>
<return>return <expr><call><name>svn_fs_base__err_corrupt_txn</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__parse_transaction_skel</name><argument_list>(<argument><expr>&amp;<name>transaction</name></expr></argument>, <argument><expr><name>skel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>txn_p</name> = <name>transaction</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__get_txn_list</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>names_p</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name> <specifier>const</specifier></type> <name>next_key_key_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>NEXT_KEY_KEY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBC</name> *</type><name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>, <decl><type ref="prev"/><name>db_c_err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>names</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"transactions"</expr></argument>, <argument><expr>"cursor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"reading transaction list (opening cursor)"</expr></argument>,
<argument><expr><call><name><name>bfd</name>-&gt;<name>transactions</name>-&gt;<name>cursor</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>transactions</name></name></expr></argument>,
<argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>, <argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>db_err</name> = <call><name>svn_bdb_dbc_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>,
<argument><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DB_FIRST</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>db_err</name> == 0</expr>;</condition>
<incr><expr><name>db_err</name> = <call><name>svn_bdb_dbc_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>,
<argument><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DB_NEXT</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>transaction_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>txn_skel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>key</name>.<name>size</name></name> == <name>next_key_key_len</name>
&amp;&amp; 0 == <call><name>memcmp</name><argument_list>(<argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name>NEXT_KEY_KEY</name></expr></argument>, <argument><expr><name>next_key_key_len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>txn_skel</name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name><name>value</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>.<name>size</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>txn_skel</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_bdb_dbc_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_fs_base__err_corrupt_txn</name>
<argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_fs_base__parse_transaction_skel</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>txn_skel</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_bdb_dbc_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>is_committed</name><argument_list>(<argument><expr><name>txn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>,
<argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>db_c_err</name> = <call><name>svn_bdb_dbc_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>db_err</name> != <name>DB_NOTFOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"reading transaction list (listing keys)"</expr></argument>,
<argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"reading transaction list (closing cursor)"</expr></argument>,
<argument><expr><name>db_c_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>names_p</name> = <name>names</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
