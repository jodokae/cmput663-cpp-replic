<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_fs_base/bdb/locks-table.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/skel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/fs_skels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../trail.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs/fs-loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb-err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"locks-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lock-tokens-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_fs_util.h"</cpp:file></cpp:include>
<function><type><name>int</name></type>
<name>svn_fs_bdb__open_locks_table</name><parameter_list>(<param><decl><type><name>DB</name> **</type><name>locks_p</name></decl></param>,
<param><decl><type><name>DB_ENV</name> *</type><name>env</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>create</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>u_int32_t</name></type> <name>open_flags</name> <init>= <expr>(<name>create</name> ? (<name>DB_CREATE</name> | <name>DB_EXCL</name>) : 0)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DB</name> *</type><name>locks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__check_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name>db_create</name><argument_list>(<argument><expr>&amp;<name>locks</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> = <call>(<name><name>locks</name>-&gt;<name>open</name></name>)<argument_list>(<argument><expr><call><name>SVN_BDB_OPEN_PARAMS</name><argument_list>(<argument><expr><name>locks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"locks"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>DB_BTREE</name></expr></argument>,
<argument><expr><name>open_flags</name></expr></argument>, <argument><expr>0666</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name> == <name>ENOENT</name> &amp;&amp; (! <name>create</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name><name>locks</name>-&gt;<name>close</name></name><argument_list>(<argument><expr><name>locks</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_fs_bdb__open_locks_table</name><argument_list>(<argument><expr><name>locks_p</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>locks_p</name> = <name>locks</name></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__lock_add</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
<param><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>lock_skel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__unparse_lock_skel</name><argument_list>(<argument><expr>&amp;<name>lock_skel</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__skel_to_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>lock_skel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"lock"</expr></argument>, <argument><expr>"add"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"storing lock record"</expr></argument>,
<argument><expr><call><name><name>bfd</name>-&gt;<name>locks</name>-&gt;<name>put</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>locks</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__lock_delete</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"locks"</expr></argument>, <argument><expr>"del"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>db_err</name> = <call><name><name>bfd</name>-&gt;<name>locks</name>-&gt;<name>del</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>locks</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>db_err</name> == <name>DB_NOTFOUND</name></expr>)</condition><then>
<return>return <expr><call><name>svn_fs_base__err_bad_lock_token</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"deleting lock from 'locks' table"</expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__lock_get</name><parameter_list>(<param><decl><type><name>svn_lock_t</name> **</type><name>lock_p</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"lock"</expr></argument>, <argument><expr>"get"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>db_err</name> = <call><name><name>bfd</name>-&gt;<name>locks</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>locks</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
<argument><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>db_err</name> == <name>DB_NOTFOUND</name></expr>)</condition><then>
<return>return <expr><call><name>svn_fs_base__err_bad_lock_token</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"reading lock"</expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skel</name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name><name>value</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>.<name>size</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>skel</name></expr>)</condition><then>
<return>return <expr><call><name>svn_fs_base__err_corrupt_lock</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__parse_lock_skel</name><argument_list>(<argument><expr>&amp;<name>lock</name></expr></argument>, <argument><expr><name>skel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>lock</name>-&gt;<name>expiration_date</name></name> &amp;&amp; (<call><name>apr_time_now</name><argument_list>()</argument_list></call> &gt; <name><name>lock</name>-&gt;<name>expiration_date</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__lock_delete</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>SVN_FS__ERR_LOCK_EXPIRED</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>lock_p</name> = <name>lock</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_lock</name><parameter_list>(<param><decl><type><name>svn_lock_t</name> **</type><name>lock_p</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>lock_p</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_bdb__lock_get</name><argument_list>(<argument><expr><name>lock_p</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; ((<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_LOCK_EXPIRED</name>)
|| (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_BAD_LOCK_TOKEN</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_bdb__lock_token_delete</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__locks_get</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_fs_get_locks_callback_t</name></type> <name>get_locks_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>get_locks_baton</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBC</name> *</type><name>cursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>, <decl><type ref="prev"/><name>db_c_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lookup_path</name> <init>= <expr><name>path</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_bdb__lock_token_get</name><argument_list>(<argument><expr>&amp;<name>lock_token</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; ((<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_LOCK_EXPIRED</name>)
|| (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_BAD_LOCK_TOKEN</name>)
|| (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NO_SUCH_LOCK</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_lock</name><argument_list>(<argument><expr>&amp;<name>lock</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lock</name> &amp;&amp; <name>get_locks_func</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_locks_func</name><argument_list>(<argument><expr><name>get_locks_baton</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if></else></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><name>lookup_path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"lock-tokens"</expr></argument>, <argument><expr>"cursor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>db_err</name> = <call><name><name>bfd</name>-&gt;<name>lock_tokens</name>-&gt;<name>cursor</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>lock_tokens</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
<argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"creating cursor for reading lock tokens"</expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>lookup_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name>.<name>flags</name></name> |= <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>db_err</name> = <call><name>svn_bdb_dbc_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DB_SET_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(! <name>db_err</name>)
&amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>lookup_path</name></expr></argument>, <argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>lookup_path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>child_path</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>key</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>key</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lock_token</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>value</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>get_lock</name><argument_list>(<argument><expr>&amp;<name>lock</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>child_path</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_bdb_dbc_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>lock</name> &amp;&amp; <name>get_locks_func</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>get_locks_func</name><argument_list>(<argument><expr><name>get_locks_baton</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_bdb_dbc_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>db_err</name> = <call><name>svn_bdb_dbc_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>DB_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>db_c_err</name> = <call><name>svn_bdb_dbc_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>db_err</name> &amp;&amp; (<name>db_err</name> != <name>DB_NOTFOUND</name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"fetching lock tokens"</expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>db_c_err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"fetching lock tokens (closing cursor)"</expr></argument>, <argument><expr><name>db_c_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
