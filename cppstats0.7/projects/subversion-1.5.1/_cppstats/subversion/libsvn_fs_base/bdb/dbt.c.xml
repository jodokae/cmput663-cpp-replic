<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_fs_base/bdb/dbt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APU_WANT_DB</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apu_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbt.h"</cpp:file></cpp:include>
<function><type><name>DBT</name> *</type>
<name>svn_fs_base__clear_dbt</name><parameter_list>(<param><decl><type><name>DBT</name> *</type><name>dbt</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dbt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dbt</name></expr>;</return>
}</block></function>
<function><type><name>DBT</name> *</type><name>svn_fs_base__nodata_dbt</name><parameter_list>(<param><decl><type><name>DBT</name> *</type><name>dbt</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_fs_base__clear_dbt</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbt</name>-&gt;<name>flags</name></name> |= (<name>DB_DBT_USERMEM</name> | <name>DB_DBT_PARTIAL</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbt</name>-&gt;<name>doff</name></name> = <name><name>dbt</name>-&gt;<name>dlen</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>dbt</name></expr>;</return>
}</block></function>
<function><type><name>DBT</name> *</type>
<name>svn_fs_base__set_dbt</name><parameter_list>(<param><decl><type><name>DBT</name> *</type><name>dbt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_fs_base__clear_dbt</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbt</name>-&gt;<name>data</name></name> = (<name>void</name> *) <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbt</name>-&gt;<name>size</name></name> = <name>size</name></expr>;</expr_stmt>
<return>return <expr><name>dbt</name></expr>;</return>
}</block></function>
<function><type><name>DBT</name> *</type>
<name>svn_fs_base__result_dbt</name><parameter_list>(<param><decl><type><name>DBT</name> *</type><name>dbt</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_fs_base__clear_dbt</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbt</name>-&gt;<name>flags</name></name> |= <name>DB_DBT_MALLOC</name></expr>;</expr_stmt>
<return>return <expr><name>dbt</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>apr_free_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>DBT</name> *</type>
<name>svn_fs_base__track_dbt</name><parameter_list>(<param><decl><type><name>DBT</name> *</type><name>dbt</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>dbt</name>-&gt;<name>data</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>dbt</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>apr_free_cleanup</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>dbt</name></expr>;</return>
}</block></function>
<function><type><name>DBT</name> *</type>
<name>svn_fs_base__recno_dbt</name><parameter_list>(<param><decl><type><name>DBT</name> *</type><name>dbt</name></decl></param>, <param><decl><type><name>db_recno_t</name> *</type><name>recno</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_fs_base__set_dbt</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>recno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>recno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbt</name>-&gt;<name>ulen</name></name> = <name><name>dbt</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbt</name>-&gt;<name>flags</name></name> |= <name>DB_DBT_USERMEM</name></expr>;</expr_stmt>
<return>return <expr><name>dbt</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>svn_fs_base__compare_dbt</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>DBT</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>DBT</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>common_size</name> <init>= <expr><name><name>a</name>-&gt;<name>size</name></name> &gt; <name><name>b</name>-&gt;<name>size</name></name> ? <name><name>b</name>-&gt;<name>size</name></name> : <name><name>a</name>-&gt;<name>size</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>common_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cmp</name></expr>)</condition><then>
<return>return <expr><name>cmp</name></expr>;</return></then>
<else>else
<return>return <expr><name><name>a</name>-&gt;<name>size</name></name> - <name><name>b</name>-&gt;<name>size</name></name></expr>;</return></else></if>
}</block></function>
<function><type><name>DBT</name> *</type>
<name>svn_fs_base__id_to_dbt</name><parameter_list>(<param><decl><type><name>DBT</name> *</type><name>dbt</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>unparsed_id</name> <init>= <expr><call><name>svn_fs_base__id_unparse</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_fs_base__set_dbt</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name><name>unparsed_id</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>unparsed_id</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dbt</name></expr>;</return>
}</block></function>
<function><type><name>DBT</name> *</type>
<name>svn_fs_base__skel_to_dbt</name><parameter_list>(<param><decl><type><name>DBT</name> *</type><name>dbt</name></decl></param>,
<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>unparsed_skel</name> <init>= <expr><call><name>svn_fs_base__unparse_skel</name><argument_list>(<argument><expr><name>skel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_fs_base__set_dbt</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name><name>unparsed_skel</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>unparsed_skel</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dbt</name></expr>;</return>
}</block></function>
<function><type><name>DBT</name> *</type>
<name>svn_fs_base__str_to_dbt</name><parameter_list>(<param><decl><type><name>DBT</name> *</type><name>dbt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_fs_base__set_dbt</name><argument_list>(<argument><expr><name>dbt</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dbt</name></expr>;</return>
}</block></function>
</unit>
