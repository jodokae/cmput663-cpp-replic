<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_fs_base/bdb/bdb-err.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APU_WANT_DB</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apu_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs/fs-loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb-err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>bdb_err_to_apr_err</name><parameter_list>(<param><decl><type><name>int</name></type> <name>db_err</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>db_err</name> == <name>DB_LOCK_DEADLOCK</name></expr>)</condition><then>
<return>return <expr><name>SVN_ERR_FS_BERKELEY_DB_DEADLOCK</name></expr>;</return></then>
<else>else
<return>return <expr><name>SVN_ERR_FS_BERKELEY_DB</name></expr>;</return></else></if>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__dberr</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb_baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>db_err</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>child_errors</name></decl>;</decl_stmt>
<expr_stmt><expr><name>child_errors</name> = <name><name>bdb_baton</name>-&gt;<name>error_info</name>-&gt;<name>pending_errors</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdb_baton</name>-&gt;<name>error_info</name>-&gt;<name>pending_errors</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><call><name>bdb_err_to_apr_err</name><argument_list>(<argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>child_errors</name></expr></argument>,
<argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__dberrf</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb_baton</name></decl></param>,
<param><decl><type><name>int</name></type> <name>db_err</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>child_errors</name></decl>;</decl_stmt>
<expr_stmt><expr><name>child_errors</name> = <name><name>bdb_baton</name>-&gt;<name>error_info</name>-&gt;<name>pending_errors</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdb_baton</name>-&gt;<name>error_info</name>-&gt;<name>pending_errors</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><call><name>bdb_err_to_apr_err</name><argument_list>(<argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>child_errors</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> = <call><name>apr_pvsprintf</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name>-&gt;<name>message</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s%s"</expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__wrap_db</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>operation</name></decl></param>, <param><decl><type><name>int</name></type> <name>db_err</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>db_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>error_info</name>-&gt;<name>pending_errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>error_info</name>-&gt;<name>pending_errors</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bfd</name> = <name><name>fs</name>-&gt;<name>fsap_data</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>svn_fs_bdb__dberrf</name>
<argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>bdb</name></name></expr></argument>, <argument><expr><name>db_err</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Berkeley DB error for filesystem '%s' while %s:\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>fs</name>-&gt;<name>path</name></name> ? <name><name>fs</name>-&gt;<name>path</name></name> : "(none)"</expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
