<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_fs_base/bdb/bdb-err.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_LIBSVN_FS_BDB_ERR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_FS_BDB_ERR_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"env.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__dberr</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb_baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>db_err</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__dberrf</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb_baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>db_err</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
__attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>3, 4</function_decl>)</block></extern>))<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>svn_fs_bdb__clear_err</name><parameter_list>(<param><decl><type><name>bdb_env_t</name> *</type><name>bdb</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__wrap_db</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>operation</name></decl></param>,
<param><decl><type><name>int</name></type> <name>db_err</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDB_WRAP</name><parameter_list>(<param><type><name>fs</name></type></param>, <param><type><name>op</name></type></param>, <param><type><name>err</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(svn_fs_bdb__wrap_db((fs), (op), (err)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_ERR</name><parameter_list>(<param><type><name>bdb</name></type></param>, <param><type><name>expr</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { int db_err__temp = (expr); if (db_err__temp) return svn_fs_bdb__dberr((bdb), db_err__temp); svn_error_clear((bdb)-&gt;error_info-&gt;pending_errors); (bdb)-&gt;error_info-&gt;pending_errors = NULL; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDB_ERR</name><parameter_list>(<param><type><name>expr</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { int db_err__temp = (expr); if (db_err__temp) return db_err__temp; } while (0)</cpp:value></cpp:define>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__check_fs</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
