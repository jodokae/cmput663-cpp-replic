<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_fs_base/bdb/env.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_mutex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_proc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb-err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"env.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_dev_t</name></type> <name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ino_t</name></type> <name>inode</name></decl>;</decl_stmt>
}</block></struct></type> <name>bdb_env_key_t</name>;</typedef>
<struct>struct <name>bdb_env_t</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>errpfx_string</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>BDB_ERRPFX_STRING</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_threadkey_t</name> *</type><name>error_info</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>bdb_error_info_t</name></type> <name>error_info</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>DB_ENV</name> *</type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_bdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>svn_atomic_t</name></type> <name>panic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bdb_env_key_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>dbconfig_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>bdb_error_info_t</name> *</type>
<name>get_error_info</name><parameter_list>(<param><decl><type><name>bdb_env_t</name> *</type><name>bdb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>priv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_threadkey_private_get</name><argument_list>(<argument><expr>&amp;<name>priv</name></expr></argument>, <argument><expr><name><name>bdb</name>-&gt;<name>error_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>priv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>priv</name> = <call><name>calloc</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bdb_error_info_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_threadkey_private_set</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name><name>bdb</name>-&gt;<name>error_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>priv</name></expr>;</return>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_error_info</name><parameter_list>(<param><type><name>bdb</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(&amp;(bdb)-&gt;error_info)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>convert_bdb_error</name><parameter_list>(<param><decl><type><name>bdb_env_t</name> *</type><name>bdb</name></decl></param>, <param><decl><type><name>int</name></type> <name>db_err</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>db_err</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>bdb_env_baton_t</name></type> <name>bdb_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bdb_baton</name>.<name>env</name></name> = <name><name>bdb</name>-&gt;<name>env</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdb_baton</name>.<name>bdb</name></name> = <name>bdb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdb_baton</name>.<name>error_info</name></name> = <call><name>get_error_info</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_BDB_ERR</name><argument_list>(<argument><expr>&amp;<name>bdb_baton</name></expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bdb_error_gatherer</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bdb_error_info_t</name> *</type><name>error_info</name> <init>= <expr><call><name>get_error_info</name><argument_list>(<argument><expr>(<name>bdb_env_t</name> *) <name>baton</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>new_err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_BDB_ERROR_GATHERER_IGNORE</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_err</name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_NO_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"bdb: %s"</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>error_info</name>-&gt;<name>pending_errors</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_error_compose</name><argument_list>(<argument><expr><name><name>error_info</name>-&gt;<name>pending_errors</name></name></expr></argument>, <argument><expr><name>new_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>error_info</name>-&gt;<name>pending_errors</name></name> = <name>new_err</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name><name>error_info</name>-&gt;<name>user_callback</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name><name>error_info</name>-&gt;<name>user_callback</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>cleanup_env</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bdb_env_t</name> *</type><name>bdb</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>bdb</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdb</name>-&gt;<name>dbconfig_file</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_threadkey_private_delete</name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>error_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<name><name>bdb</name>-&gt;<name>refcount</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cleanup_error_info</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bdb_error_info_t</name> *</type><name>error_info</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>error_info</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name><name>error_info</name>-&gt;<name>pending_errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>error_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_env</name><parameter_list>(<param><decl><type><name>bdb_env_t</name> **</type><name>bdbp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bdb_env_t</name> *</type><name>bdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_bdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tmp_path</name></decl>, *<decl><type ref="prev"/><name>tmp_path_bdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>path_size</name></decl>, <decl><type ref="prev"/><name>path_bdb_size</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SVN_BDB_PATH_UTF8</name></expr></cpp:if>
<expr_stmt><expr><name>path_bdb</name> = <call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>path_bdb</name></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>path_size</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>path_bdb_size</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>path_bdb</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>bdb</name> = <call><name>calloc</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>bdb</name></expr></argument>)</argument_list></sizeof> + <name>path_size</name> + <name>path_bdb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bdb</name></expr></argument>, <argument><expr><name>cleanup_env</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>errpfx_string</name></name></expr></argument>, <argument><expr><name>BDB_ERRPFX_STRING</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>errpfx_string</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdb</name>-&gt;<name>path</name></name> = <name>tmp_path</name> = <call>(<name>char</name>*)<argument_list>(<argument><expr><name>bdb</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdb</name>-&gt;<name>path_bdb</name></name> = <name>tmp_path_bdb</name> = <name>tmp_path</name> + <name>path_size</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>tmp_path_bdb</name></expr></argument>, <argument><expr><name>path_bdb</name></expr></argument>, <argument><expr><name>path_bdb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdb</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>bdbp</name> = <name>bdb</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name> <init>= <expr><call><name>apr_threadkey_private_create</name><argument_list>(<argument><expr>&amp;<name><name>bdb</name>-&gt;<name>error_info</name></name></expr></argument>,
<argument><expr><name>cleanup_error_info</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Can't allocate thread-specific storage"
" for the Berkeley DB environment descriptor"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>db_err</name> = <call><name>db_env_create</name><argument_list>(<argument><expr>&amp;(<name><name>bdb</name>-&gt;<name>env</name></name>)</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>db_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>bdb</name>-&gt;<name>env</name>-&gt;<name>set_errpfx</name></name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr>(<name>char</name> *) <name>bdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>bdb</name>-&gt;<name>env</name>-&gt;<name>set_errcall</name></name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr>(<name>bdb_error_gatherer</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>db_err</name> = <call><name><name>bdb</name>-&gt;<name>env</name>-&gt;<name>set_alloc</name></name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr><name>malloc</name></expr></argument>, <argument><expr><name>realloc</name></expr></argument>, <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>db_err</name></expr>)</condition><then>
<expr_stmt><expr><name>db_err</name> = <call><name><name>bdb</name>-&gt;<name>env</name>-&gt;<name>set_lk_detect</name></name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr><name>DB_LOCK_RANDOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<return>return <expr><call><name>convert_bdb_error</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>bdb_cache_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>bdb_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_thread_mutex_t</name> *</type><name>bdb_cache_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>clear_cache</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>bdb_cache</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bdb_cache_lock</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>svn_atomic_t</name></type> <name>bdb_cache_state</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>bdb_init_cb</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>bdb_cache_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bdb_cache</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>bdb_cache_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name>bdb_cache_lock</name></expr></argument>,
<argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>,
<argument><expr><name>bdb_cache_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Couldn't initialize the cache of"
" Berkeley DB environment descriptors"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>bdb_cache_pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>clear_cache</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name>*</type> <name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_atomic__init_once</name><argument_list>(<argument><expr>&amp;<name>bdb_cache_state</name></expr></argument>, <argument><expr><name>bdb_init_cb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>void</name></type>
<name>acquire_cache_mutex</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><name>bdb_cache_lock</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name>bdb_cache_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>void</name></type>
<name>release_cache_mutex</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><name>bdb_cache_lock</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>bdb_cache_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>bdb_cache_key</name><parameter_list>(<param><decl><type><name>bdb_env_key_t</name> *</type><name>keyp</name></decl></param>, <param><decl><type><name>apr_file_t</name> **</type><name>dbconfig_file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dbcfg_file_name</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>BDB_CONFIG_FILE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>dbcfg_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>dbcfg_file</name></expr></argument>, <argument><expr><name>dbcfg_file_name</name></expr></argument>,
<argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_file_info_get</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>APR_FINFO_DEV</name> | <name>APR_FINFO_INODE</name></expr></argument>,
<argument><expr><name>dbcfg_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name>
<argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>"Can't create BDB environment cache key"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>keyp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>sizeof *<name>keyp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keyp</name>-&gt;<name>device</name></name> = <name><name>finfo</name>.<name>device</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>keyp</name>-&gt;<name>inode</name></name> = <name><name>finfo</name>.<name>inode</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dbconfig_file</name></expr>)</condition><then>
<expr_stmt><expr>*<name>dbconfig_file</name> = <name>dbcfg_file</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>dbcfg_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>bdb_env_t</name> *</type>
<name>bdb_cache_get</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>bdb_env_key_t</name> *</type><name>keyp</name></decl></param>, <param><decl><type><name>svn_boolean_t</name> *</type><name>panicp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bdb_env_t</name> *</type><name>bdb</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>bdb_cache</name></expr></argument>, <argument><expr><name>keyp</name></expr></argument>, <argument><expr>sizeof *<name>keyp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>bdb</name> &amp;&amp; <name><name>bdb</name>-&gt;<name>env</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>panicp</name> = !!<call><name>svn_atomic_read</name><argument_list>(<argument><expr>&amp;<name><name>bdb</name>-&gt;<name>panic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SVN_BDB_VERSION_AT_LEAST</name><argument_list>(<argument><expr>4,2</expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>!*<name>panicp</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>bdb</name>-&gt;<name>env</name>-&gt;<name>get_flags</name></name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call>
|| (<name>flags</name> &amp; <name>DB_PANIC_ENVIRONMENT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_atomic_set</name><argument_list>(<argument><expr>&amp;<name><name>bdb</name>-&gt;<name>panic</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>panicp</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bdb</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>panicp</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>bdb</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>bdb_close</name><parameter_list>(<param><decl><type><name>bdb_env_t</name> *</type><name>bdb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>db_err</name> <init>= <expr><call><name><name>bdb</name>-&gt;<name>env</name>-&gt;<name>close</name></name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>db_err</name> &amp;&amp; (!<name>SVN_BDB_AUTO_RECOVER</name> || <name>db_err</name> != <name>DB_RUNRECOVERY</name>)</expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>convert_bdb_error</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>bdb</name>-&gt;<name>pool</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__close</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bdb_env_t</name> *</type><name>bdb</name> <init>= <expr><name><name>bdb_baton</name>-&gt;<name>bdb</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>bdb_baton</name>-&gt;<name>env</name></name> == <name><name>bdb_baton</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdb_baton</name>-&gt;<name>bdb</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>0 == --<name><name>bdb_baton</name>-&gt;<name>error_info</name>-&gt;<name>refcount</name></name> &amp;&amp; <name><name>bdb</name>-&gt;<name>pool</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name><name>bdb_baton</name>-&gt;<name>error_info</name>-&gt;<name>pending_errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>bdb_baton</name>-&gt;<name>error_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_threadkey_private_set</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>bdb</name>-&gt;<name>error_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<expr_stmt><expr><call><name>acquire_cache_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>--<name><name>bdb</name>-&gt;<name>refcount</name></name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>release_cache_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>SVN_BDB_AUTO_RECOVER</name> &amp;&amp; <call><name>svn_atomic_read</name><argument_list>(<argument><expr>&amp;<name><name>bdb</name>-&gt;<name>panic</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_BERKELEY_DB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>DB_RUNRECOVERY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>bdb_cache</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>bdb_cache</name></expr></argument>, <argument><expr>&amp;<name><name>bdb</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr>sizeof <name><name>bdb</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>err</name> = <call><name>bdb_close</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>release_cache_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>bdb_open</name><parameter_list>(<param><decl><type><name>bdb_env_t</name> *</type><name>bdb</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><name>flags</name> |= <name>DB_THREAD</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>convert_bdb_error</name>
<argument_list>(<argument><expr><name>bdb</name></expr></argument>, <argument><expr><call>(<name><name>bdb</name>-&gt;<name>env</name>-&gt;<name>open</name></name>)<argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr><name><name>bdb</name>-&gt;<name>path_bdb</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SVN_BDB_AUTO_COMMIT</name></expr></cpp:if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>convert_bdb_error</name>
<argument_list>(<argument><expr><name>bdb</name></expr></argument>, <argument><expr><call><name><name>bdb</name>-&gt;<name>env</name>-&gt;<name>set_flags</name></name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr><name>SVN_BDB_AUTO_COMMIT</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>bdb_cache_key</name><argument_list>(<argument><expr>&amp;<name><name>bdb</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr>&amp;<name><name>bdb</name>-&gt;<name>dbconfig_file</name></name></expr></argument>,
<argument><expr><name><name>bdb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>bdb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>cleanup_env_baton</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb_baton</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>bdb_baton</name>-&gt;<name>bdb</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__close</name><argument_list>(<argument><expr><name>bdb_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__open</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> **</type><name>bdb_batonp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>u_int32_t</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bdb_env_key_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bdb_env_t</name> *</type><name>bdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>panic</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>acquire_cache_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>bdb_cache_key</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>release_cache_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bdb</name> = <call><name>bdb_cache_get</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>panic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>panic</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>release_cache_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_BERKELEY_DB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>DB_RUNRECOVERY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>bdb</name> &amp;&amp; <name><name>bdb</name>-&gt;<name>flags</name></name> != <name>flags</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>release_cache_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>flags</name> ^ <name><name>bdb</name>-&gt;<name>flags</name></name>) &amp; <name>DB_PRIVATE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>flags</name> &amp; <name>DB_PRIVATE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_BERKELEY_DB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Reopening a public Berkeley DB"
" environment with private attributes"</expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_BERKELEY_DB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Reopening a private Berkeley DB"
" environment with public attributes"</expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then></if>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_BERKELEY_DB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Reopening a Berkeley DB environment"
" with different attributes"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>bdb</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>create_env</name><argument_list>(<argument><expr>&amp;<name>bdb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>bdb_cache_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>bdb_open</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>bdb_cache</name></expr></argument>, <argument><expr>&amp;<name><name>bdb</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr>sizeof <name><name>bdb</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>bdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdb</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdb</name>-&gt;<name>refcount</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>bdb_close</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>++<name><name>bdb</name>-&gt;<name>refcount</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>bdb_batonp</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>sizeof **<name>bdb_batonp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>bdb_batonp</name>)-&gt;<name>env</name></name> = <name><name>bdb</name>-&gt;<name>env</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>bdb_batonp</name>)-&gt;<name>bdb</name></name> = <name>bdb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>bdb_batonp</name>)-&gt;<name>error_info</name></name> = <call><name>get_error_info</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>(*<name>bdb_batonp</name>)-&gt;<name><name>error_info</name>-&gt;<name>refcount</name></name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>bdb_batonp</name></expr></argument>, <argument><expr><name>cleanup_env_baton</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>release_cache_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_fs_bdb__get_panic</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb_baton</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>bdb_baton</name>-&gt;<name>bdb</name></name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>bdb_baton</name>-&gt;<name>env</name></name> == <name><name>bdb_baton</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!!<call><name>svn_atomic_read</name><argument_list>(<argument><expr>&amp;<name><name>bdb_baton</name>-&gt;<name>bdb</name>-&gt;<name>panic</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_fs_bdb__set_panic</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb_baton</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>bdb_baton</name>-&gt;<name>bdb</name></name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>bdb_baton</name>-&gt;<name>env</name></name> == <name><name>bdb_baton</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_atomic_set</name><argument_list>(<argument><expr>&amp;<name><name>bdb_baton</name>-&gt;<name>bdb</name>-&gt;<name>panic</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__remove</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bdb_env_t</name> *</type><name>bdb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_env</name><argument_list>(<argument><expr>&amp;<name>bdb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>convert_bdb_error</name>
<argument_list>(<argument><expr><name>bdb</name></expr></argument>, <argument><expr><call><name><name>bdb</name>-&gt;<name>env</name>-&gt;<name>remove</name></name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr><name><name>bdb</name>-&gt;<name>path_bdb</name></name></expr></argument>, <argument><expr><name>DB_FORCE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
