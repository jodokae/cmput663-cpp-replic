<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_fs_base/reps-strings.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APU_WANT_DB</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apu_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trail.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"reps-strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/reps-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/strings-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_fs/fs-loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type> <name>rep_is_mutable</name><parameter_list>(<param><decl><type><name>representation_t</name> *</type><name>rep</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(! <name><name>rep</name>-&gt;<name>txn_id</name></name>) || (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>rep</name>-&gt;<name>txn_id</name></name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNKNOWN_NODE_KIND</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>svn_error_createf (SVN_ERR_FS_CORRUPT, NULL, _("Unknown node kind for representation '%s'"), x)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>representation_t</name> *</type>
<name>make_fulltext_rep</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str_key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rep</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>txn_id</name> &amp;&amp; *<name>txn_id</name></expr>)</condition><then>
<expr_stmt><expr><name><name>rep</name>-&gt;<name>txn_id</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>rep</name>-&gt;<name>kind</name></name> = <name>rep_kind_fulltext</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>checksum</name></expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rep</name>-&gt;<name>checksum</name></name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rep</name>-&gt;<name>checksum</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>rep</name>-&gt;<name>contents</name>.<name>fulltext</name>.<name>string_key</name></name>
= <name>str_key</name> ? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>str_key</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>rep</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_string_keys</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>keys</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>representation_t</name> *</type><name>rep</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>chunks</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>rep</name>-&gt;<name>kind</name></name> != <name>rep_kind_delta</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Representation is not of type 'delta'"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>chunks</name> = <name><name>rep</name>-&gt;<name>contents</name>.<name>delta</name>.<name>chunks</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>keys</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>chunks</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>chunks</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>chunks</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>rep_delta_chunk_t</name> *</type><name>chunk</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>rep_delta_chunk_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>chunk</name>-&gt;<name>string_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr>*<name>keys</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>key</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_strings</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>keys</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>keys</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str_key</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_delete</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>str_key</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>compose_handler_baton</name> <block>{
<decl_stmt><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>window_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>source_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>trail_t</name> *</type><name>trail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>init</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>compose_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>compose_handler_baton</name> *</type><name>cb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!<name><name>cb</name>-&gt;<name>done</name></name> || <name>window</name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>trail</name></name> &amp;&amp; <name><name>cb</name>-&gt;<name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>cb</name>-&gt;<name>init</name></name> &amp;&amp; !<name>window</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!<name><name>cb</name>-&gt;<name>source_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cb</name>-&gt;<name>window</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>window</name> &amp;&amp; (<name><name>window</name>-&gt;<name>sview_len</name></name> == 0 || <name><name>window</name>-&gt;<name>src_ops</name></name> == 0)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>source_len</name> <init>= <expr><name><name>window</name>-&gt;<name>tview_len</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>window</name>-&gt;<name>sview_len</name></name> == <name>source_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name>-&gt;<name>source_buf</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>window_pool</name></name></expr></argument>, <argument><expr><name>source_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_txdelta_apply_instructions</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>cb</name>-&gt;<name>source_buf</name></name></expr></argument>, <argument><expr>&amp;<name>source_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>composite_pool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_t</name> *</type><name>composite</name></decl>;</decl_stmt>
<expr_stmt><expr><name>composite</name> = <call><name>svn_txdelta_compose_windows</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>cb</name>-&gt;<name>window</name></name></expr></argument>,
<argument><expr><name>composite_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>window_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name>-&gt;<name>window</name></name> = <name>composite</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name>-&gt;<name>window_pool</name></name> = <name>composite_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name>-&gt;<name>done</name></name> = (<name><name>composite</name>-&gt;<name>sview_len</name></name> == 0 || <name><name>composite</name>-&gt;<name>src_ops</name></name> == 0)</expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>window</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>window_pool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>window_pool</name></name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name>-&gt;<name>window</name></name> = <call><name>svn_txdelta_window_dup</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>window_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name>-&gt;<name>window_pool</name></name> = <name>window_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name>-&gt;<name>done</name></name> = (<name><name>window</name>-&gt;<name>sview_len</name></name> == 0 || <name><name>window</name>-&gt;<name>src_ops</name></name> == 0)</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>cb</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><name><name>cb</name>-&gt;<name>init</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_one_window</name><parameter_list>(<param><decl><type>struct <name>compose_handler_baton</name> *</type><name>cb</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>representation_t</name> *</type><name>rep</name></decl></param>,
<param><decl><type><name>int</name></type> <name>cur_chunk</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>wstream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>diffdata</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>amt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>chunks</name> <init>= <expr><name><name>rep</name>-&gt;<name>contents</name>.<name>delta</name>.<name>chunks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rep_delta_chunk_t</name> *</type><name>this_chunk</name></decl>, *<decl><type ref="prev"/><name>first_chunk</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cb</name>-&gt;<name>init</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>chunks</name>-&gt;<name>nelts</name></name> &lt;= <name>cur_chunk</name></expr>)</condition><then>
<return>return <expr><call><name>compose_handler</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>wstream</name> = <call><name>svn_txdelta_parse_svndiff</name><argument_list>(<argument><expr><name>compose_handler</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name><name>cb</name>-&gt;<name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first_chunk</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rep_delta_chunk_t</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diffdata</name><index>[<expr>0</expr>]</index></name> = 'S'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>diffdata</name><index>[<expr>1</expr>]</index></name> = 'V'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>diffdata</name><index>[<expr>2</expr>]</index></name> = 'N'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>diffdata</name><index>[<expr>3</expr>]</index></name> = <call>(<name>char</name>) <argument_list>(<argument><expr><name><name>first_chunk</name>-&gt;<name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>amt</name> = 4</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name>wstream</name></expr></argument>, <argument><expr><name>diffdata</name></expr></argument>, <argument><expr>&amp;<name>amt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>this_chunk</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>, <argument><expr><name>cur_chunk</name></expr></argument>, <argument><expr><name>rep_delta_chunk_t</name>*</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str_key</name> = <name><name>this_chunk</name>-&gt;<name>string_key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> = 0</expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>amt</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>diffdata</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_read</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>str_key</name></expr></argument>, <argument><expr><name>diffdata</name></expr></argument>,
<argument><expr><name>off</name></expr></argument>, <argument><expr>&amp;<name>amt</name></expr></argument>, <argument><expr><name><name>cb</name>-&gt;<name>trail</name></name></expr></argument>,
<argument><expr><name><name>cb</name>-&gt;<name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> += <name>amt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name>wstream</name></expr></argument>, <argument><expr><name>diffdata</name></expr></argument>, <argument><expr>&amp;<name>amt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>amt</name> != 0</expr>)</condition>;</do>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>wstream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!<name><name>cb</name>-&gt;<name>init</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>window</name></name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>window_pool</name></name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rep_undeltify_range</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>deltas</name></decl></param>,
<param><decl><type><name>representation_t</name> *</type><name>fulltext</name></decl></param>,
<param><decl><type><name>int</name></type> <name>cur_chunk</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>offset</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len_read</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<do>do <block>{
<decl_stmt><decl><type>struct <name>compose_handler_baton</name></type> <name>cb</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>source_buf</name></decl>, *<decl><type ref="prev"/><name>target_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>target_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_rep</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cb</name>.<name>trail</name></name> = <name>trail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name>.<name>done</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<for>for (<init><expr><name>cur_rep</name> = 0</expr>;</init> <condition><expr>!<name><name>cb</name>.<name>done</name></name> &amp;&amp; <name>cur_rep</name> &lt; <name><name>deltas</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>cur_rep</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>representation_t</name> *<specifier>const</specifier></type> <name>rep</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>deltas</name></expr></argument>, <argument><expr><name>cur_rep</name></expr></argument>, <argument><expr><name>representation_t</name>*</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_one_window</name><argument_list>(<argument><expr>&amp;<name>cb</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>cur_chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<name><name>cb</name>.<name>window</name></name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cb</name>.<name>window</name>-&gt;<name>sview_len</name></name> &gt; 0 || <name><name>cb</name>.<name>window</name>-&gt;<name>src_ops</name></name> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cb</name>.<name>source_buf</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>source_buf</name> = <name><name>cb</name>.<name>source_buf</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>fulltext</name> &amp;&amp; <name><name>cb</name>.<name>window</name>-&gt;<name>sview_len</name></name> &gt; 0 &amp;&amp; <name><name>cb</name>.<name>window</name>-&gt;<name>src_ops</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>source_len</name> <init>= <expr><name><name>cb</name>.<name>window</name>-&gt;<name>sview_len</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>source_buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cb</name>.<name>window_pool</name></name></expr></argument>, <argument><expr><name>source_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_read</name>
<argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>fulltext</name>-&gt;<name>contents</name>.<name>fulltext</name>.<name>string_key</name></name></expr></argument>,
<argument><expr><name>source_buf</name></expr></argument>, <argument><expr><name><name>cb</name>.<name>window</name>-&gt;<name>sview_offset</name></name></expr></argument>, <argument><expr>&amp;<name>source_len</name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>source_len</name> != <name><name>cb</name>.<name>window</name>-&gt;<name>sview_len</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Svndiff source length inconsistency"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>source_buf</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><name>offset</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>target_len</name> = *<name>len</name> - <name>len_read</name> + <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>target_buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cb</name>.<name>window_pool</name></name></expr></argument>, <argument><expr><name>target_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>target_len</name> = *<name>len</name> - <name>len_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name>target_buf</name> = <name>buf</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>svn_txdelta_apply_instructions</name><argument_list>(<argument><expr><name><name>cb</name>.<name>window</name></name></expr></argument>, <argument><expr><name>source_buf</name></expr></argument>,
<argument><expr><name>target_buf</name></expr></argument>, <argument><expr>&amp;<name>target_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>offset</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>target_len</name> &gt; <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target_len</name> -= <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>target_buf</name> + <name>offset</name></expr></argument>, <argument><expr><name>target_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>cb</name>.<name>window_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len_read</name> += <name>target_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> += <name>target_len</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>cur_chunk</name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>len_read</name> &lt; *<name>len</name></expr>)</condition>;</do>
<expr_stmt><expr>*<name>len</name> = <name>len_read</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_chunk_offset</name><parameter_list>(<param><decl><type><name>representation_t</name> *</type><name>rep</name></decl></param>,
<param><decl><type><name>svn_filesize_t</name></type> <name>rep_offset</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>chunk_offset</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>chunks</name> <init>= <expr><name><name>rep</name>-&gt;<name>contents</name>.<name>delta</name>.<name>chunks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_chunk</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>chunks</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>cur_chunk</name> = 0</expr>;</init> <condition><expr><name>cur_chunk</name> &lt; <name><name>chunks</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>cur_chunk</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>rep_delta_chunk_t</name> *<specifier>const</specifier></type> <name>this_chunk</name>
<init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>, <argument><expr><name>cur_chunk</name></expr></argument>, <argument><expr><name>rep_delta_chunk_t</name>*</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>this_chunk</name>-&gt;<name>offset</name></name> + <name><name>this_chunk</name>-&gt;<name>size</name></name>) &gt; <name>rep_offset</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>this_chunk</name>-&gt;<name>offset</name></name> &lt;= <name>rep_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rep_offset</name> - <name><name>this_chunk</name>-&gt;<name>offset</name></name> &lt; <name>SVN_MAX_OBJECT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>chunk_offset</name> = <call>(<name>apr_size_t</name>) <argument_list>(<argument><expr><name>rep_offset</name> - <name><name>this_chunk</name>-&gt;<name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cur_chunk</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rep_read_range</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl></param>,
<param><decl><type><name>svn_filesize_t</name></type> <name>offset</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>chunk_offset</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__read_rep</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>rep</name>-&gt;<name>kind</name></name> == <name>rep_kind_fulltext</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_read</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>rep</name>-&gt;<name>contents</name>.<name>fulltext</name>.<name>string_key</name></name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>rep</name>-&gt;<name>kind</name></name> == <name>rep_kind_delta</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>cur_chunk</name> <init>= <expr><call><name>get_chunk_offset</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr>&amp;<name>chunk_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cur_chunk</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>first_rep_key</name> <init>= <expr><name>rep_key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>reps</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>666</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<do>do <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>rep_delta_chunk_t</name> *<specifier>const</specifier></type> <name>first_chunk</name>
<init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rep</name>-&gt;<name>contents</name>.<name>delta</name>.<name>chunks</name></name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>rep_delta_chunk_t</name>*</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>rep_delta_chunk_t</name> *<specifier>const</specifier></type> <name>chunk</name>
<init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rep</name>-&gt;<name>contents</name>.<name>delta</name>.<name>chunks</name></name></expr></argument>,
<argument><expr><name>cur_chunk</name></expr></argument>, <argument><expr><name>rep_delta_chunk_t</name>*</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>first_chunk</name>-&gt;<name>version</name></name> != <name><name>chunk</name>-&gt;<name>version</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Diff version inconsistencies in representation '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rep_key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>rep_key</name> = <name><name>chunk</name>-&gt;<name>rep_key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>reps</name></expr></argument>, <argument><expr><name>representation_t</name> *</expr></argument>)</argument_list></call> = <name>rep</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__read_rep</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><name><name>rep</name>-&gt;<name>kind</name></name> == <name>rep_kind_delta</name>
&amp;&amp; <name><name>rep</name>-&gt;<name>contents</name>.<name>delta</name>.<name>chunks</name>-&gt;<name>nelts</name></name> &gt; <name>cur_chunk</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name><name>rep</name>-&gt;<name>kind</name></name> != <name>rep_kind_delta</name> &amp;&amp; <name><name>rep</name>-&gt;<name>kind</name></name> != <name>rep_kind_fulltext</name></expr>)</condition><then>
<return>return <expr><call><name>UNKNOWN_NODE_KIND</name><argument_list>(<argument><expr><name>rep_key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>rep</name>-&gt;<name>kind</name></name> == <name>rep_kind_delta</name></expr>)</condition><then>
<expr_stmt><expr><name>rep</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>err</name> = <call><name>rep_undeltify_range</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>reps</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>cur_chunk</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name>chunk_offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_CORRUPT</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Corruption detected whilst reading delta chain from "
"representation '%s' to '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>first_rep_key</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><name>err</name></expr>;</return></else></if>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else
<return>return <expr><call><name>UNKNOWN_NODE_KIND</name><argument_list>(<argument><expr><name>rep_key</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__get_mutable_rep</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>new_rep_key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rep_key</name> &amp;&amp; (<name><name>rep_key</name><index>[<expr>0</expr>]</index></name> != '\0')</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__read_rep</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>rep_is_mutable</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>new_rep_key</name> = <name>rep_key</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_append</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name>new_str</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rep</name> = <call><name>make_fulltext_rep</name><argument_list>(<argument><expr><name>new_str</name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>,
<argument><expr><call><name>svn_md5_empty_string_digest</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__write_new_rep</name><argument_list>(<argument><expr><name>new_rep_key</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__delete_rep_if_mutable</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__read_rep</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>rep_is_mutable</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>rep</name>-&gt;<name>kind</name></name> == <name>rep_kind_fulltext</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_delete</name><argument_list>(<argument><expr><name>fs</name></expr></argument>,
<argument><expr><name><name>rep</name>-&gt;<name>contents</name>.<name>fulltext</name>.<name>string_key</name></name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>rep</name>-&gt;<name>kind</name></name> == <name>rep_kind_delta</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>keys</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delta_string_keys</name><argument_list>(<argument><expr>&amp;<name>keys</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delete_strings</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><call><name>UNKNOWN_NODE_KIND</name><argument_list>(<argument><expr><name>rep_key</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__delete_rep</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>rep_read_baton</name> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>trail_t</name> *</type><name>trail</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_md5_ctx_t</name></type> <name>md5_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>checksum_finalized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rep_read_get_baton</name><parameter_list>(<param><decl><type>struct <name>rep_read_baton</name> **</type><name>rb_p</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_trail_for_reads</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_read_baton</name> *</type><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5_init</name><argument_list>(<argument><expr>&amp;(<name><name>b</name>-&gt;<name>md5_context</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rep_key</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__rep_contents_size</name><argument_list>(<argument><expr>&amp;(<name><name>b</name>-&gt;<name>size</name></name>)</expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>b</name>-&gt;<name>size</name></name> = 0</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>b</name>-&gt;<name>checksum_finalized</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>trail</name></name> = <name>use_trail_for_reads</name> ? <name>trail</name> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>rep_key</name></name> = <name>rep_key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>offset</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>rb_p</name> = <name>b</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__rep_contents_size</name><parameter_list>(<param><decl><type><name>svn_filesize_t</name> *</type><name>size_p</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__read_rep</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>rep</name>-&gt;<name>kind</name></name> == <name>rep_kind_fulltext</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_size</name><argument_list>(<argument><expr><name>size_p</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name><name>rep</name>-&gt;<name>contents</name>.<name>fulltext</name>.<name>string_key</name></name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>rep</name>-&gt;<name>kind</name></name> == <name>rep_kind_delta</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>chunks</name> <init>= <expr><name><name>rep</name>-&gt;<name>contents</name>.<name>delta</name>.<name>chunks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rep_delta_chunk_t</name> *</type><name>last_chunk</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>chunks</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_chunk</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>, <argument><expr><name><name>chunks</name>-&gt;<name>nelts</name></name> - 1</expr></argument>,
<argument><expr><name>rep_delta_chunk_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>size_p</name> = <name><name>last_chunk</name>-&gt;<name>offset</name></name> + <name><name>last_chunk</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><call><name>UNKNOWN_NODE_KIND</name><argument_list>(<argument><expr><name>rep_key</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__rep_contents_checksum</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[]</index></name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__read_rep</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>rep</name>-&gt;<name>checksum</name></name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__rep_contents</name><parameter_list>(<param><decl><type><name>svn_string_t</name> *</type><name>str</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>contents_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__rep_contents_size</name><argument_list>(<argument><expr>&amp;<name>contents_size</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>contents_size</name> &gt; <name>SVN_MAX_OBJECT_SIZE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Rep contents are too large: "
"got %s, limit is %s"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%" <name>SVN_FILESIZE_T_FMT</name></expr></argument>, <argument><expr><name>contents_size</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%" <name>APR_SIZE_T_FMT</name></expr></argument>, <argument><expr><name>SVN_MAX_OBJECT_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<expr_stmt><expr><name><name>str</name>-&gt;<name>len</name></name> = (<name>apr_size_t</name>) <name>contents_size</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>data</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name>-&gt;<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name><name>str</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>rep_read_range</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> != <name><name>str</name>-&gt;<name>len</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failure reading rep '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<block>{
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_md5_ctx_t</name></type> <name>md5_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>checksum</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_md5_init</name><argument_list>(<argument><expr>&amp;<name>md5_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;<name>md5_context</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5_final</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>, <argument><expr>&amp;<name>md5_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__read_rep</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>svn_md5_digests_match</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>, <argument><expr><name><name>rep</name>-&gt;<name>checksum</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Checksum mismatch on rep '%s':\n"
" expected: %s\n"
" actual: %s\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>,
<argument><expr><call><name>svn_md5_digest_to_cstring_display</name><argument_list>(<argument><expr><name><name>rep</name>-&gt;<name>checksum</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_md5_digest_to_cstring_display</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>read_rep_args</name> <block>{
<decl_stmt><decl><type>struct <name>rep_read_baton</name> *</type><name>rb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name> *</type><name>len</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_read_rep</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>read_rep_args</name> *</type><name>args</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>args</name>-&gt;<name>rb</name>-&gt;<name>rep_key</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>rep_read_range</name><argument_list>(<argument><expr><name><name>args</name>-&gt;<name>rb</name>-&gt;<name>fs</name></name></expr></argument>,
<argument><expr><name><name>args</name>-&gt;<name>rb</name>-&gt;<name>rep_key</name></name></expr></argument>,
<argument><expr><name><name>args</name>-&gt;<name>rb</name>-&gt;<name>offset</name></name></expr></argument>,
<argument><expr><name><name>args</name>-&gt;<name>buf</name></name></expr></argument>,
<argument><expr><name><name>args</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>,
<argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>-&gt;<name>rb</name>-&gt;<name>offset</name></name> += *(<name><name>args</name>-&gt;<name>len</name></name>)</expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>args</name>-&gt;<name>rb</name>-&gt;<name>checksum_finalized</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;(<name><name>args</name>-&gt;<name>rb</name>-&gt;<name>md5_context</name></name>)</expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr>*(<name><name>args</name>-&gt;<name>len</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>args</name>-&gt;<name>rb</name>-&gt;<name>offset</name></name> == <name><name>args</name>-&gt;<name>rb</name>-&gt;<name>size</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>checksum</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_md5_final</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>, <argument><expr>&amp;(<name><name>args</name>-&gt;<name>rb</name>-&gt;<name>md5_context</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>-&gt;<name>rb</name>-&gt;<name>checksum_finalized</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__read_rep</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>rb</name>-&gt;<name>fs</name></name></expr></argument>,
<argument><expr><name><name>args</name>-&gt;<name>rb</name>-&gt;<name>rep_key</name></name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>svn_md5_digests_match</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>, <argument><expr><name><name>rep</name>-&gt;<name>checksum</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Checksum mismatch on rep '%s':\n"
" expected: %s\n"
" actual: %s\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>rb</name>-&gt;<name>rep_key</name></name></expr></argument>,
<argument><expr><call><name>svn_md5_digest_to_cstring_display</name><argument_list>(<argument><expr><name><name>rep</name>-&gt;<name>checksum</name></name></expr></argument>,
<argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_md5_digest_to_cstring_display</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>args</name>-&gt;<name>rb</name>-&gt;<name>offset</name></name> &gt; 0</expr>)</condition><then> <block>{
<return>return
<expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_REP_CHANGED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Null rep, but offset past zero already"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else
<expr_stmt><expr>*(<name><name>args</name>-&gt;<name>len</name></name>) = 0</expr>;</expr_stmt></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rep_read_contents</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_read_baton</name> *</type><name>rb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>read_rep_args</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name>.<name>rb</name></name> = <name>rb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>buf</name></name> = <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>len</name></name> = <name>len</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>rb</name>-&gt;<name>trail</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>txn_body_read_rep</name><argument_list>(<argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>trail</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_read_rep</name></expr></argument>,
<argument><expr>&amp;<name>args</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>rep_write_baton</name> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>trail_t</name> *</type><name>trail</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_md5_ctx_t</name></type> <name>md5_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>md5_digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>finalized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> struct <name>rep_write_baton</name> *</type>
<name>rep_write_get_baton</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_write_baton</name> *</type><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5_init</name><argument_list>(<argument><expr>&amp;(<name><name>b</name>-&gt;<name>md5_context</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>trail</name></name> = <name>trail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>rep_key</name></name> = <name>rep_key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>txn_id</name></name> = <name>txn_id</name></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rep_write</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__read_rep</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>rep_is_mutable</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_REP_NOT_MUTABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Rep '%s' is not mutable"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>rep</name>-&gt;<name>kind</name></name> == <name>rep_kind_fulltext</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_append</name>
<argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;(<name><name>rep</name>-&gt;<name>contents</name>.<name>fulltext</name>.<name>string_key</name></name>)</expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>rep</name>-&gt;<name>kind</name></name> == <name>rep_kind_delta</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Rep '%s' both mutable and non-fulltext"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else
<return>return <expr><call><name>UNKNOWN_NODE_KIND</name><argument_list>(<argument><expr><name>rep_key</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>write_rep_args</name> <block>{
<decl_stmt><decl><type>struct <name>rep_write_baton</name> *</type><name>wb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_write_rep</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>write_rep_args</name> *</type><name>args</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>rep_write</name><argument_list>(<argument><expr><name><name>args</name>-&gt;<name>wb</name>-&gt;<name>fs</name></name></expr></argument>,
<argument><expr><name><name>args</name>-&gt;<name>wb</name>-&gt;<name>rep_key</name></name></expr></argument>,
<argument><expr><name><name>args</name>-&gt;<name>buf</name></name></expr></argument>,
<argument><expr><name><name>args</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr><name><name>args</name>-&gt;<name>wb</name>-&gt;<name>txn_id</name></name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>,
<argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;(<name><name>args</name>-&gt;<name>wb</name>-&gt;<name>md5_context</name></name>)</expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rep_write_contents</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_write_baton</name> *</type><name>wb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>write_rep_args</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name>.<name>wb</name></name> = <name>wb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>buf</name></name> = <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>len</name></name> = *<name>len</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>wb</name>-&gt;<name>trail</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>txn_body_write_rep</name><argument_list>(<argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>trail</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_write_rep</name></expr></argument>,
<argument><expr>&amp;<name>args</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_write_close_rep</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_write_baton</name> *</type><name>wb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__read_rep</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>rep_key</name></name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rep</name>-&gt;<name>checksum</name></name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>md5_digest</name></name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__write_rep</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>rep_key</name></name></expr></argument>, <argument><expr><name>rep</name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rep_write_close_contents</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_write_baton</name> *</type><name>wb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name><name>wb</name>-&gt;<name>finalized</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_md5_final</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>md5_digest</name></name></expr></argument>, <argument><expr>&amp;<name><name>wb</name>-&gt;<name>md5_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>-&gt;<name>finalized</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>wb</name>-&gt;<name>trail</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>txn_body_write_close_rep</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>trail</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_write_close_rep</name></expr></argument>,
<argument><expr><name>wb</name></expr></argument>,
<argument><expr><name><name>wb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__rep_contents_read_stream</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> **</type><name>rs_p</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_trail_for_reads</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_read_baton</name> *</type><name>rb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>rep_read_get_baton</name><argument_list>(<argument><expr>&amp;<name>rb</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr><name>use_trail_for_reads</name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>rs_p</name> = <call><name>svn_stream_create</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_read</name><argument_list>(<argument><expr>*<name>rs_p</name></expr></argument>, <argument><expr><name>rep_read_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rep_contents_clear</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str_key</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__read_rep</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>rep_is_mutable</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_REP_NOT_MUTABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Rep '%s' is not mutable"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rep</name>-&gt;<name>kind</name></name> == <name>rep_kind_fulltext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str_key</name> = <name><name>rep</name>-&gt;<name>contents</name>.<name>fulltext</name>.<name>string_key</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str_key</name> &amp;&amp; *<name>str_key</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_clear</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>str_key</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rep</name>-&gt;<name>checksum</name></name></expr></argument>, <argument><expr><call><name>svn_md5_empty_string_digest</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__write_rep</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__rep_contents_write_stream</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> **</type><name>ws_p</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep_key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_trail_for_writes</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_write_baton</name> *</type><name>wb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>rep_contents_clear</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wb</name> = <call><name>rep_write_get_baton</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rep_key</name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>,
<argument><expr><name>use_trail_for_writes</name> ? <name>trail</name> : <name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ws_p</name> = <call><name>svn_stream_create</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr>*<name>ws_p</name></expr></argument>, <argument><expr><name>rep_write_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_close</name><argument_list>(<argument><expr>*<name>ws_p</name></expr></argument>, <argument><expr><name>rep_write_close_contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>write_svndiff_strings_baton</name> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>header_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_byte_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>trail_t</name> *</type><name>trail</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>write_svndiff_strings</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>write_svndiff_strings_baton</name> *</type><name>wb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nheader</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>wb</name>-&gt;<name>header_read</name></name> &lt; 4</expr>)</condition><then> <block>{
<expr_stmt><expr><name>nheader</name> = 4 - <name><name>wb</name>-&gt;<name>header_read</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> -= <name>nheader</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> += <name>nheader</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>-&gt;<name>header_read</name></name> += <name>nheader</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>wb</name>-&gt;<name>header_read</name></name> == 4</expr>)</condition><then>
<expr_stmt><expr><name><name>wb</name>-&gt;<name>version</name></name> = *(<name>buf</name> - 1)</expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_append</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr>&amp;(<name><name>wb</name>-&gt;<name>key</name></name>)</expr></argument>, <argument><expr>*<name>len</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>trail</name></name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>wb</name>-&gt;<name>key</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to get new string key"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>*<name>len</name> += <name>nheader</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>-&gt;<name>size</name></name> += *<name>len</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <name>window_write_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>svndiff_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>text_off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>text_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>window_write_t</name>;</typedef>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__rep_deltify</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>source_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>target_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_stream_t</name> *</type><name>txdelta_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>window_write_t</name> *</type><name>ww</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>windows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>new_target_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>write_svndiff_strings_baton</name></type> <name>new_target_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>new_target_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>new_target_handler_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>tview_off</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>diffsize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>orig_str_keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rep_digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>digest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>wpool</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Attempt to deltify '%s' against itself"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>new_target_baton</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_target_baton</name>.<name>trail</name></name> = <name>trail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_target_baton</name>.<name>header_read</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_target_stream</name> = <call><name>svn_stream_create</name><argument_list>(<argument><expr>&amp;<name>new_target_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr><name>new_target_stream</name></expr></argument>, <argument><expr><name>write_svndiff_strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__rep_contents_read_stream</name><argument_list>(<argument><expr>&amp;<name>source_stream</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>source</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__rep_contents_read_stream</name><argument_list>(<argument><expr>&amp;<name>target_stream</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_txdelta</name><argument_list>(<argument><expr>&amp;<name>txdelta_stream</name></expr></argument>, <argument><expr><name>source_stream</name></expr></argument>, <argument><expr><name>target_stream</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>bfd</name>-&gt;<name>format</name></name> &gt;= <name>SVN_FS_BASE__MIN_SVNDIFF1_FORMAT</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_txdelta_to_svndiff2</name><argument_list>(<argument><expr>&amp;<name>new_target_handler</name></expr></argument>, <argument><expr>&amp;<name>new_target_handler_baton</name></expr></argument>,
<argument><expr><name>new_target_stream</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_txdelta_to_svndiff2</name><argument_list>(<argument><expr>&amp;<name>new_target_handler</name></expr></argument>, <argument><expr>&amp;<name>new_target_handler_baton</name></expr></argument>,
<argument><expr><name>new_target_stream</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>wpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>windows</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ww</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name><name>new_target_baton</name>.<name>size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_target_baton</name>.<name>key</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>wpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_next_window</name><argument_list>(<argument><expr>&amp;<name>window</name></expr></argument>, <argument><expr><name>txdelta_stream</name></expr></argument>, <argument><expr><name>wpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>new_target_handler</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>new_target_handler_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>window</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ww</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ww</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ww</name>-&gt;<name>key</name></name> = <name><name>new_target_baton</name>.<name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ww</name>-&gt;<name>svndiff_len</name></name> = <name><name>new_target_baton</name>.<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ww</name>-&gt;<name>text_off</name></name> = <name>tview_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ww</name>-&gt;<name>text_len</name></name> = <name><name>window</name>-&gt;<name>tview_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>windows</name></expr></argument>, <argument><expr><name>window_write_t</name> *</expr></argument>)</argument_list></call> = <name>ww</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tview_off</name> += <name><name>window</name>-&gt;<name>tview_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>diffsize</name> += <name><name>ww</name>-&gt;<name>svndiff_len</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block> while <condition>(<expr><name>window</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>wpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>digest</name> = <call><name>svn_txdelta_md5_digest</name><argument_list>(<argument><expr><name>txdelta_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>digest</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_DELTA_MD5_CHECKSUM_ABSENT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to calculate MD5 digest for '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<block>{
<decl_stmt><decl><type><name>representation_t</name> *</type><name>old_rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str_key</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__read_rep</name><argument_list>(<argument><expr>&amp;<name>old_rep</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>old_rep</name>-&gt;<name>kind</name></name> == <name>rep_kind_fulltext</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>old_size</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>str_key</name> = <name><name>old_rep</name>-&gt;<name>contents</name>.<name>fulltext</name>.<name>string_key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_size</name><argument_list>(<argument><expr>&amp;<name>old_size</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>str_key</name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>orig_str_keys</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>orig_str_keys</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>str_key</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>diffsize</name> &gt;= <name>old_size</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>windows</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>ww</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>windows</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>window_write_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_delete</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>ww</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>old_rep</name>-&gt;<name>kind</name></name> == <name>rep_kind_delta</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delta_string_keys</name><argument_list>(<argument><expr>&amp;<name>orig_str_keys</name></expr></argument>, <argument><expr><name>old_rep</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>UNKNOWN_NODE_KIND</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rep_digest</name></expr></argument>, <argument><expr><name><name>old_rep</name>-&gt;<name>checksum</name></name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>representation_t</name></type> <name>new_rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rep_delta_chunk_t</name> *</type><name>chunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>chunks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new_rep</name>.<name>kind</name></name> = <name>rep_kind_delta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rep</name>.<name>txn_id</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>new_rep</name>.<name>checksum</name></name></expr></argument>, <argument><expr><name>rep_digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunks</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>windows</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>windows</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>ww</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>windows</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>window_write_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chunk</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>chunk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name>-&gt;<name>offset</name></name> = <name><name>ww</name>-&gt;<name>text_off</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name>-&gt;<name>version</name></name> = <name><name>new_target_baton</name>.<name>version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name>-&gt;<name>string_key</name></name> = <name><name>ww</name>-&gt;<name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name>-&gt;<name>size</name></name> = <name><name>ww</name>-&gt;<name>text_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chunk</name>-&gt;<name>rep_key</name></name> = <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>chunks</name></expr></argument>, <argument><expr><name>rep_delta_chunk_t</name> *</expr></argument>)</argument_list></call> = <name>chunk</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>new_rep</name>.<name>contents</name>.<name>delta</name>.<name>chunks</name></name> = <name>chunks</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__write_rep</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr>&amp;<name>new_rep</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delete_strings</name><argument_list>(<argument><expr><name>orig_str_keys</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
