<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_fs_base/key-gen.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"key-gen.h"</cpp:file></cpp:include>
<function><type><name>apr_size_t</name></type>
<name>svn_fs_base__getsize</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>endptr</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>max_prefix</name> <init>= <expr><name>max</name> / 10</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>max_digit</name> <init>= <expr><name>max</name> % 10</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>value</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name> &amp;&amp; '0' &lt;= <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> &amp;&amp; <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> &lt;= '9'</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>digit</name> <init>= <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> - '0'</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>value</name> &gt; <name>max_prefix</name>
|| (<name>value</name> == <name>max_prefix</name> &amp;&amp; <name>digit</name> &gt; <name>max_digit</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>endptr</name> = 0</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>value</name> = (<name>value</name> * 10) + <name>digit</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>i</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>endptr</name> = 0</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>endptr</name> = <name>data</name> + <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>value</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><name>int</name></type>
<name>svn_fs_base__putsize</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<do>do <block>{
<if>if <condition>(<expr><name>i</name> &gt;= <name>len</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>value</name> % 10) + '0'</expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> /= 10</expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block> while <condition>(<expr><name>value</name> &gt; 0</expr>)</condition>;</do>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>
<for>for (<init><expr><name>left</name> = 0</expr>, <expr><name>right</name> = <name>i</name>-1</expr>;</init> <condition><expr><name>left</name> &lt; <name>right</name></expr>;</condition> <incr><expr><name>left</name>++</expr>, <expr><name>right</name>--</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name></type> <name>t</name> <init>= <expr><name><name>data</name><index>[<expr><name>left</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>left</name></expr>]</index></name> = <name><name>data</name><index>[<expr><name>right</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name>right</name></expr>]</index></name> = <name>t</name></expr>;</expr_stmt>
}</block></for>
}</block>
<return>return <expr><name>i</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_fs_base__next_key</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>this</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>, <param><decl><type><name>char</name> *</type><name>next</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>olen</name> <init>= <expr>*<name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>olen</name> - 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>carry</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(*<name>len</name> &gt; 1) &amp;&amp; (<name><name>this</name><index>[<expr>0</expr>]</index></name> == '0')</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = (<name>olen</name> - 1)</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
<expr_stmt><expr><name>c</name> = <name><name>this</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr>! (((<name>c</name> &gt;= '0') &amp;&amp; (<name>c</name> &lt;= '9')) || ((<name>c</name> &gt;= 'a') &amp;&amp; (<name>c</name> &lt;= 'z')))</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name>carry</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>c</name> == 'z'</expr>)</condition><then>
<expr_stmt><expr><name><name>next</name><index>[<expr><name>i</name></expr>]</index></name> = '0'</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>carry</name> = <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == '9'</expr>)</condition><then>
<expr_stmt><expr><name><name>next</name><index>[<expr><name>i</name></expr>]</index></name> = 'a'</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>next</name><index>[<expr><name>i</name></expr>]</index></name> = <name>c</name> + 1</expr>;</expr_stmt></else></if>
}</block></else></if>
}</block></then> <else>else
<expr_stmt><expr><name><name>next</name><index>[<expr><name>i</name></expr>]</index></name> = <name>c</name></expr>;</expr_stmt></else></if>
}</block></for>
<expr_stmt><expr>*<name>len</name> = <name>olen</name> + (<name>carry</name> ? 1 : 0)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>len</name> &lt; <name>MAX_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><index>[<expr>*<name>len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name>carry</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>next</name>+1</expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>olen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><index>[<expr>0</expr>]</index></name> = '1'</expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>int</name></type>
<name>svn_fs_base__key_compare</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>a_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>a_len</name> &gt; <name>b_len</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<if>if <condition>(<expr><name>b_len</name> &gt; <name>a_len</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<expr_stmt><expr><name>cmp</name> = <call><name>strcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>cmp</name> ? (<name>cmp</name> / <call><name>abs</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></call>) : 0)</expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_fs_base__same_keys</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! (<name>a</name> || <name>b</name>)</expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>a</name> &amp;&amp; (! <name>b</name>)</expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<if>if <condition>(<expr>(! <name>a</name>) &amp;&amp; <name>b</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<return>return <expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> == 0) ? <name>TRUE</name> : <name>FALSE</name></expr>;</return>
}</block></function>
</unit>
