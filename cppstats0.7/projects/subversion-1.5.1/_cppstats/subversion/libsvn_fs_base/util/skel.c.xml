<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_fs_base/util/skel.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"skel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../key-gen.h"</cpp:file></cpp:include>
<enum>enum <name>char_type</name> <block>{
<decl><name>type_nothing</name> <init>= <expr>0</expr></init></decl>,
<decl><name>type_space</name> <init>= <expr>1</expr></init></decl>,
<decl><name>type_digit</name> <init>= <expr>2</expr></init></decl>,
<decl><name>type_paren</name> <init>= <expr>3</expr></init></decl>,
<decl><name>type_name</name> <init>= <expr>4</expr></init></decl>
}</block>;</enum>
<enum><specifier>static</specifier> <specifier>const</specifier> enum <name>char_type</name> <name><name>skel_char_type</name><index>[<expr>256</expr>]</index></name> <expr_stmt><expr>= <block>{
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>1</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>3</expr>, <expr>3</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>,
<expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>3</expr>, <expr>0</expr>, <expr>3</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>,
<expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>4</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
}</block></expr>;</expr_stmt></enum>
<function_decl><type><specifier>static</specifier> <name>skel_t</name> *</type><name>parse</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>skel_t</name> *</type><name>list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>skel_t</name> *</type><name>implicit_atom</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>skel_t</name> *</type><name>explicit_atom</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function><type><name>skel_t</name> *</type>
<name>svn_fs_base__parse_skel</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>parse</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>skel_t</name> *</type>
<name>parse</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &lt;= 0</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>c</name> = *<name>data</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == '('</expr>)</condition><then>
<return>return <expr><call><name>list</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>skel_char_type</name><index>[<expr>(<name>unsigned</name> <name>char</name>) <name>c</name></expr>]</index></name> == <name>type_name</name></expr>)</condition><then>
<return>return <expr><call><name>implicit_atom</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>explicit_atom</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>skel_t</name> *</type>
<name>list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name> <init>= <expr><name>data</name> + <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>list_start</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>data</name> &gt;= <name>end</name> || *<name>data</name> != '('</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>list_start</name> = <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name>++</expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>children</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> **</type><name>tail</name> <init>= <expr>&amp;<name>children</name></expr></init></decl>;</decl_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>element</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>data</name> &lt; <name>end</name>
&amp;&amp; <name><name>skel_char_type</name><index>[<expr>(<name>unsigned</name> <name>char</name>) *<name>data</name></expr>]</index></name> == <name>type_space</name></expr>)</condition>
<expr_stmt><expr><name>data</name>++</expr>;</expr_stmt></while>
<if>if <condition>(<expr><name>data</name> &gt;= <name>end</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr>*<name>data</name> == ')'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>data</name>++</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>element</name> = <call><name>parse</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>end</name> - <name>data</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>element</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name><name>element</name>-&gt;<name>next</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>tail</name> = <name>element</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tail</name> = &amp;<name><name>element</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> = <name><name>element</name>-&gt;<name>data</name></name> + <name><name>element</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
}</block></for>
<block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>s</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>is_atom</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>data</name></name> = <name>list_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>len</name></name> = <name>data</name> - <name>list_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>children</name></name> = <name>children</name></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
}</block>
}</block>
}</block></function>
<function><type><specifier>static</specifier> <name>skel_t</name> *</type>
<name>implicit_atom</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name> <init>= <expr><name>data</name> + <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>data</name> &gt;= <name>end</name> || <name><name>skel_char_type</name><index>[<expr>(<name>unsigned</name> <name>char</name>) *<name>data</name></expr>]</index></name> != <name>type_name</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<while>while <condition>(<expr>++<name>data</name> &lt; <name>end</name>
&amp;&amp; <name><name>skel_char_type</name><index>[<expr>(<name>unsigned</name> <name>char</name>) *<name>data</name></expr>]</index></name> != <name>type_space</name>
&amp;&amp; <name><name>skel_char_type</name><index>[<expr>(<name>unsigned</name> <name>char</name>) *<name>data</name></expr>]</index></name> != <name>type_paren</name></expr>)</condition>
<empty_stmt>;</empty_stmt></while>
<expr_stmt><expr><name>s</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>is_atom</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>data</name></name> = <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>len</name></name> = <name>data</name> - <name>start</name></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>skel_t</name> *</type>
<name>explicit_atom</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name> <init>= <expr><name>data</name> + <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> = <call><name>svn_fs_base__getsize</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>end</name> - <name>data</name></expr></argument>, <argument><expr>&amp;<name>next</name></expr></argument>, <argument><expr><name>end</name> - <name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> = <name>next</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>data</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name>data</name> &gt;= <name>end</name> || <name><name>skel_char_type</name><index>[<expr>(<name>unsigned</name> <name>char</name>) *<name>data</name></expr>]</index></name> != <name>type_space</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>data</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>data</name> + <name>size</name> &gt; <name>end</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>s</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>is_atom</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>len</name></name> = <name>size</name></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>apr_size_t</name></type> <name>estimate_unparsed_size</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>svn_stringbuf_t</name> *</type><name>unparse</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type></decl></param>, <param><decl><type><name>svn_stringbuf_t</name> *</type></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function><type><name>svn_stringbuf_t</name> *</type>
<name>svn_fs_base__unparse_skel</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name>-&gt;<name>blocksize</name></name> = <call><name>estimate_unparsed_size</name><argument_list>(<argument><expr><name>skel</name></expr></argument>)</argument_list></call> + 200</expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name>-&gt;<name>data</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name>-&gt;<name>len</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><call><name>unparse</name><argument_list>(<argument><expr><name>skel</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_size_t</name></type>
<name>estimate_unparsed_size</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>skel</name>-&gt;<name>is_atom</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>skel</name>-&gt;<name>len</name></name> &lt; 100</expr>)</condition><then>
<return>return <expr><name><name>skel</name>-&gt;<name>len</name></name> + 3</expr>;</return></then>
<else>else
<return>return <expr><name><name>skel</name>-&gt;<name>len</name></name> + 30</expr>;</return></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>total_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>child</name></decl>;</decl_stmt>
<expr_stmt><expr><name>total_len</name> = 2</expr>;</expr_stmt>
<for>for (<init><expr><name>child</name> = <name><name>skel</name>-&gt;<name>children</name></name></expr>;</init> <condition><expr><name>child</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>)
<expr_stmt><expr><name>total_len</name> += <call><name>estimate_unparsed_size</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt></for>
<return>return <expr><name>total_len</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>use_implicit</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>skel</name>-&gt;<name>len</name></name> == 0
|| <name><name>skel</name>-&gt;<name>len</name></name> &gt;= 100</expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>skel_char_type</name><index>[<expr>(<name>unsigned</name> <name>char</name>) <name><name>skel</name>-&gt;<name>data</name><index>[<expr>0</expr>]</index></name></expr>]</index></name> != <name>type_name</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>skel</name>-&gt;<name>len</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<if>if <condition>(<expr><name><name>skel_char_type</name><index>[<expr>(<name>unsigned</name> <name>char</name>) <name><name>skel</name>-&gt;<name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> == <name>type_space</name>
|| <name><name>skel_char_type</name><index>[<expr>(<name>unsigned</name> <name>char</name>) <name><name>skel</name>-&gt;<name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> == <name>type_paren</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if></for>
}</block>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_stringbuf_t</name> *</type>
<name>unparse</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>, <param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>skel</name>-&gt;<name>is_atom</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>use_implicit</name><argument_list>(<argument><expr><name>skel</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>skel</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>skel</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>200</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length_len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>length_len</name> = <call><name>svn_fs_base__putsize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>skel</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>length_len</name></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name> + <name>length_len</name> + 1 + <name><name>skel</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name>-&gt;<name>data</name><index>[<expr><name><name>str</name>-&gt;<name>len</name></name>++</expr>]</index></name> = ' '</expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>skel</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>skel</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>child</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name>-&gt;<name>data</name><index>[<expr><name><name>str</name>-&gt;<name>len</name></name>++</expr>]</index></name> = '('</expr>;</expr_stmt>
<for>for (<init><expr><name>child</name> = <name><name>skel</name>-&gt;<name>children</name></name></expr>;</init> <condition><expr><name>child</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><call><name>unparse</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>next</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name>-&gt;<name>data</name><index>[<expr><name><name>str</name>-&gt;<name>len</name></name>++</expr>]</index></name> = ' '</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>")"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>str</name></expr>;</return>
}</block></function>
<function><type><name>skel_t</name> *</type>
<name>svn_fs_base__str_atom</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>skel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>skel</name>-&gt;<name>is_atom</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>skel</name>-&gt;<name>data</name></name> = <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>skel</name>-&gt;<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>skel</name></expr>;</return>
}</block></function>
<function><type><name>skel_t</name> *</type>
<name>svn_fs_base__mem_atom</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>addr</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>skel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>skel</name>-&gt;<name>is_atom</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>skel</name>-&gt;<name>data</name></name> = <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>skel</name>-&gt;<name>len</name></name> = <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>skel</name></expr>;</return>
}</block></function>
<function><type><name>skel_t</name> *</type>
<name>svn_fs_base__make_empty_list</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>skel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>skel</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_fs_base__prepend</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>, <param><decl><type><name>skel_t</name> *</type><name>list_skel</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>list_skel</name>-&gt;<name>is_atom</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>skel</name>-&gt;<name>next</name></name> = <name><name>list_skel</name>-&gt;<name>children</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list_skel</name>-&gt;<name>children</name></name> = <name>skel</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>svn_fs_base__append</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>, <param><decl><type><name>skel_t</name> *</type><name>list_skel</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>list_skel</name>-&gt;<name>is_atom</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name><name>list_skel</name>-&gt;<name>children</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>list_skel</name>-&gt;<name>children</name></name> = <name>skel</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>tmp</name> <init>= <expr><name><name>list_skel</name>-&gt;<name>children</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>tmp</name>-&gt;<name>next</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>tmp</name> = <name><name>tmp</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>tmp</name>-&gt;<name>next</name></name> = <name>skel</name></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_fs_base__matches_atom</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>skel</name> &amp;&amp; <name><name>skel</name>-&gt;<name>is_atom</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr>((<name><name>skel</name>-&gt;<name>len</name></name> == <name>len</name>
&amp;&amp; ! <call><name>memcmp</name><argument_list>(<argument><expr><name><name>skel</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>) ? <name>TRUE</name> : <name>FALSE</name>)</expr>;</return>
}</block></then></if>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>svn_fs_base__atom_matches_string</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>skel</name> &amp;&amp; <name><name>skel</name>-&gt;<name>is_atom</name></name></expr>)</condition><then> <block>{
<return>return <expr>((<name><name>skel</name>-&gt;<name>len</name></name> == <name><name>str</name>-&gt;<name>len</name></name>
&amp;&amp; ! <call><name>memcmp</name><argument_list>(<argument><expr><name><name>skel</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>skel</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call>) ? <name>TRUE</name> : <name>FALSE</name>)</expr>;</return>
}</block></then></if>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>svn_fs_base__list_length</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>child</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(! <name>skel</name>) || <name><name>skel</name>-&gt;<name>is_atom</name></name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<for>for (<init><expr><name>child</name> = <name><name>skel</name>-&gt;<name>children</name></name></expr>;</init> <condition><expr><name>child</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>)
<expr_stmt><expr><name>len</name>++</expr>;</expr_stmt></for>
<return>return <expr><name>len</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_fs_base__skels_are_equal</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel1</name></decl></param>, <param><decl><type><name>skel_t</name> *</type><name>skel2</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>skel1</name> == <name>skel2</name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>skel1</name>-&gt;<name>is_atom</name></name> &amp;&amp; <name><name>skel2</name>-&gt;<name>is_atom</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>skel1</name>-&gt;<name>len</name></name> == <name><name>skel2</name>-&gt;<name>len</name></name>)
&amp;&amp; (! <call><name>strncmp</name><argument_list>(<argument><expr><name><name>skel1</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>skel2</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>skel1</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then>
<else>else
<return>return <expr><name>FALSE</name></expr>;</return></else></if>
}</block></then> <else>else <if>if <condition>(<expr>((! <name><name>skel1</name>-&gt;<name>is_atom</name></name>) &amp;&amp; (! <name><name>skel2</name>-&gt;<name>is_atom</name></name>))
&amp;&amp; ((<call><name>svn_fs_base__list_length</name><argument_list>(<argument><expr><name>skel1</name></expr></argument>)</argument_list></call>)
== (<call><name>svn_fs_base__list_length</name><argument_list>(<argument><expr><name>skel2</name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>svn_fs_base__list_length</name><argument_list>(<argument><expr><name>skel1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<if>if <condition>(<expr>! <call><name>svn_fs_base__skels_are_equal</name><argument_list>(<argument><expr>(<name><name>skel1</name>-&gt;<name>children</name></name>) + <name>i</name></expr></argument>,
<argument><expr>(<name><name>skel2</name>-&gt;<name>children</name></name>) + <name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if></for>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then> <else>else
<return>return <expr><name>FALSE</name></expr>;</return></else></if></else></if>
}</block></function>
<function><type><name>skel_t</name> *</type>
<name>svn_fs_base__copy_skel</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>copy</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>copy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>skel</name>-&gt;<name>is_atom</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name><name>skel</name>-&gt;<name>len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>skel</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>-&gt;<name>is_atom</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>-&gt;<name>data</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>-&gt;<name>len</name></name> = <name>len</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel_child</name></decl>, **<decl><type ref="prev"/><name>copy_child_ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>copy</name>-&gt;<name>is_atom</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>-&gt;<name>data</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name>-&gt;<name>len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>copy_child_ptr</name> = &amp;<name><name>copy</name>-&gt;<name>children</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>skel_child</name> = <name><name>skel</name>-&gt;<name>children</name></name></expr>;</init>
<condition><expr><name>skel_child</name></expr>;</condition>
<incr><expr><name>skel_child</name> = <name><name>skel_child</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr>*<name>copy_child_ptr</name> = <call><name>svn_fs_base__copy_skel</name><argument_list>(<argument><expr><name>skel_child</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copy_child_ptr</name> = &amp;<name>(*<name>copy_child_ptr</name>)-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>copy_child_ptr</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>copy</name></expr>;</return>
}</block></function>
</unit>
