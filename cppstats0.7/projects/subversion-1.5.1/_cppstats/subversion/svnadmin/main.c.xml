<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/svnadmin/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_subst.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_user.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>cancelled</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>signal_handler</name><parameter_list>(<param><decl><type><name>int</name></type> <name>signum</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cancelled</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup_cancellation_signals</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>handler</name>)<parameter_list>(<param><decl><type><name>int</name></type> <name>signum</name></decl></param>)</parameter_list></function_decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_cancel</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>cancelled</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CANCELLED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Caught signal"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></else></if>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_stdio_stream</name><argument_list>(<argument><expr><name>svn_stream_t</name> **<name>stream</name></expr></argument>,
<argument><expr><macro><name>APR_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <call><name>open_fn</name><argument_list>(<argument><expr><name>apr_file_t</name> **</expr></argument>,
<argument><expr><name>apr_pool_t</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>stdio_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name> <init>= <expr><call><name>open_fn</name><argument_list>(<argument><expr>&amp;<name>stdio_file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't open stdio file"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>*<name>stream</name> = <call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>stdio_file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></decl></decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>parse_local_repos_path</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type> <name>repos_path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>repos_path</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>os</name>-&gt;<name>ind</name></name> &lt; <name><name>os</name>-&gt;<name>argc</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>path</name> <init>= <expr><name><name>os</name>-&gt;<name>argv</name><index>[<expr><name><name>os</name>-&gt;<name>ind</name></name>++</expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr><name>repos_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>repos_path</name> = <call><name>svn_path_internal_style</name><argument_list>(<argument><expr>*<name>repos_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name>repos_path</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Repository argument required"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr>*<name>repos_path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is an URL when it should be a path"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>*<name>repos_path</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>warning_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_repos</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> **</type><name>repos</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_open</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_set_warning_func</name><argument_list>(<argument><expr><call><name>svn_repos_fs</name><argument_list>(<argument><expr>*<name>repos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>warning_func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_lib_versions</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_version_checklist_t</name></type> <name><name>checklist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"svn_subr"</expr>, <expr><name>svn_subr_version</name></expr> }</block></expr>,
<expr><block>{ <expr>"svn_repos"</expr>, <expr><name>svn_repos_version</name></expr> }</block></expr>,
<expr><block>{ <expr>"svn_fs"</expr>, <expr><name>svn_fs_version</name></expr> }</block></expr>,
<expr><block>{ <expr>"svn_delta"</expr>, <expr><name>svn_delta_version</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_VERSION_DEFINE</name><argument_list>(<argument><expr><name>my_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_ver_check_list</name><argument_list>(<argument><expr>&amp;<name>my_version</name></expr></argument>, <argument><expr><name>checklist</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_opt_subcommand_t</name></type>
<name>subcommand_crashtest</name></decl>,
<decl><type ref="prev"/><name>subcommand_create</name></decl>,
<decl><type ref="prev"/><name>subcommand_deltify</name></decl>,
<decl><type ref="prev"/><name>subcommand_dump</name></decl>,
<decl><type ref="prev"/><name>subcommand_help</name></decl>,
<decl><type ref="prev"/><name>subcommand_hotcopy</name></decl>,
<decl><type ref="prev"/><name>subcommand_load</name></decl>,
<decl><type ref="prev"/><name>subcommand_list_dblogs</name></decl>,
<decl><type ref="prev"/><name>subcommand_list_unused_dblogs</name></decl>,
<decl><type ref="prev"/><name>subcommand_lslocks</name></decl>,
<decl><type ref="prev"/><name>subcommand_lstxns</name></decl>,
<decl><type ref="prev"/><name>subcommand_recover</name></decl>,
<decl><type ref="prev"/><name>subcommand_rmlocks</name></decl>,
<decl><type ref="prev"/><name>subcommand_rmtxns</name></decl>,
<decl><type ref="prev"/><name>subcommand_setlog</name></decl>,
<decl><type ref="prev"/><name>subcommand_setrevprop</name></decl>,
<decl><type ref="prev"/><name>subcommand_setuuid</name></decl>,
<decl><type ref="prev"/><name>subcommand_upgrade</name></decl>,
<decl><type ref="prev"/><name>subcommand_verify</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>svnadmin__version</name> <init>= <expr><name>SVN_OPT_FIRST_LONGOPT_ID</name></expr></init></decl>,
<decl><name>svnadmin__incremental</name></decl>,
<decl><name>svnadmin__deltas</name></decl>,
<decl><name>svnadmin__ignore_uuid</name></decl>,
<decl><name>svnadmin__force_uuid</name></decl>,
<decl><name>svnadmin__fs_type</name></decl>,
<decl><name>svnadmin__parent_dir</name></decl>,
<decl><name>svnadmin__bdb_txn_nosync</name></decl>,
<decl><name>svnadmin__bdb_log_keep</name></decl>,
<decl><name>svnadmin__config_dir</name></decl>,
<decl><name>svnadmin__bypass_hooks</name></decl>,
<decl><name>svnadmin__use_pre_commit_hook</name></decl>,
<decl><name>svnadmin__use_post_commit_hook</name></decl>,
<decl><name>svnadmin__use_pre_revprop_change_hook</name></decl>,
<decl><name>svnadmin__use_post_revprop_change_hook</name></decl>,
<decl><name>svnadmin__clean_logs</name></decl>,
<decl><name>svnadmin__wait</name></decl>,
<decl><name>svnadmin__pre_1_4_compatible</name></decl>,
<decl><name>svnadmin__pre_1_5_compatible</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>apr_getopt_option_t</name></type> <name><name>options_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"help"</expr>, <expr>'h'</expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"show help on a subcommand"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr><name>NULL</name></expr>, <expr>'?'</expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"show help on a subcommand"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"version"</expr>, <expr><name>svnadmin__version</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"show program version information"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"revision"</expr>, <expr>'r'</expr>, <expr>1</expr>,
<macro><name>N_</name><argument_list>(<argument>"specify revision number ARG (or X:Y range)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"incremental"</expr>, <expr><name>svnadmin__incremental</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"dump incrementally"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"deltas"</expr>, <expr><name>svnadmin__deltas</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"use deltas in dump output"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"bypass-hooks"</expr>, <expr><name>svnadmin__bypass_hooks</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"bypass the repository hook system"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"quiet"</expr>, <expr>'q'</expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"no progress (only errors) to stderr"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"ignore-uuid"</expr>, <expr><name>svnadmin__ignore_uuid</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"ignore any repos UUID found in the stream"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"force-uuid"</expr>, <expr><name>svnadmin__force_uuid</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"set repos UUID to that found in stream, if any"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"fs-type"</expr>, <expr><name>svnadmin__fs_type</name></expr>, <expr>1</expr>,
<macro><name>N_</name><argument_list>(<argument>"type of repository: 'fsfs' (default) or 'bdb'"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"parent-dir"</expr>, <expr><name>svnadmin__parent_dir</name></expr>, <expr>1</expr>,
<macro><name>N_</name><argument_list>(<argument>"load at specified directory in repository"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"bdb-txn-nosync"</expr>, <expr><name>svnadmin__bdb_txn_nosync</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"disable fsync at transaction commit [Berkeley DB]"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"bdb-log-keep"</expr>, <expr><name>svnadmin__bdb_log_keep</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"disable automatic log file removal [Berkeley DB]"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"config-dir"</expr>, <expr><name>svnadmin__config_dir</name></expr>, <expr>1</expr>,
<macro><name>N_</name><argument_list>(<argument>"read user configuration files from directory ARG"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"clean-logs"</expr>, <expr><name>svnadmin__clean_logs</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"remove redundant Berkeley DB log files\n"
" from source repository [Berkeley DB]"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"use-pre-commit-hook"</expr>, <expr><name>svnadmin__use_pre_commit_hook</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"call pre-commit hook before committing revisions"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"use-post-commit-hook"</expr>, <expr><name>svnadmin__use_post_commit_hook</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"call post-commit hook after committing revisions"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"use-pre-revprop-change-hook"</expr>, <expr><name>svnadmin__use_pre_revprop_change_hook</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"call hook before changing revision property"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"use-post-revprop-change-hook"</expr>, <expr><name>svnadmin__use_post_revprop_change_hook</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"call hook after changing revision property"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"wait"</expr>, <expr><name>svnadmin__wait</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"wait instead of exit if the repository is in\n"
" use by another process"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"pre-1.4-compatible"</expr>, <expr><name>svnadmin__pre_1_4_compatible</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"use format compatible with Subversion versions\n"
" earlier than 1.4"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"pre-1.5-compatible"</expr>, <expr><name>svnadmin__pre_1_5_compatible</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"use format compatible with Subversion versions\n"
" earlier than 1.5"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_opt_subcommand_desc_t</name></type> <name><name>cmd_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"crashtest"</expr>, <expr><name>subcommand_crashtest</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin crashtest REPOS_PATH\n\n"
"Open the repository at REPOS_PATH, then abort, thus simulating\n"
"a process that crashes while holding an open repository handle.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"create"</expr>, <expr><name>subcommand_create</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin create REPOS_PATH\n\n"
"Create a new, empty repository at REPOS_PATH.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{
<expr><name>svnadmin__bdb_txn_nosync</name></expr>, <expr><name>svnadmin__bdb_log_keep</name></expr>,
<expr><name>svnadmin__config_dir</name></expr>, <expr><name>svnadmin__fs_type</name></expr>, <expr><name>svnadmin__pre_1_4_compatible</name></expr>,
<expr><name>svnadmin__pre_1_5_compatible</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"deltify"</expr>, <expr><name>subcommand_deltify</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin deltify [-r LOWER[:UPPER]] REPOS_PATH\n\n"
"Run over the requested revision range, performing predecessor delti-\n"
"fication on the paths changed in those revisions. Deltification in\n"
"essence compresses the repository by only storing the differences or\n"
"delta from the preceding revision. If no revisions are specified,\n"
"this will simply deltify the HEAD revision.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>'r'</expr>, <expr>'q'</expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"dump"</expr>, <expr><name>subcommand_dump</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin dump REPOS_PATH [-r LOWER[:UPPER]] [--incremental]\n\n"
"Dump the contents of filesystem to stdout in a 'dumpfile'\n"
"portable format, sending feedback to stderr. Dump revisions\n"
"LOWER rev through UPPER rev. If no revisions are given, dump all\n"
"revision trees. If only LOWER is given, dump that one revision tree.\n"
"If --incremental is passed, then the first revision dumped will be\n"
"a diff against the previous revision, instead of the usual fulltext.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>'r'</expr>, <expr><name>svnadmin__incremental</name></expr>, <expr><name>svnadmin__deltas</name></expr>, <expr>'q'</expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"help"</expr>, <expr><name>subcommand_help</name></expr>, <expr><block>{<expr>"?"</expr>, <expr>"h"</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin help [SUBCOMMAND...]\n\n"
"Describe the usage of this program or its subcommands.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"hotcopy"</expr>, <expr><name>subcommand_hotcopy</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin hotcopy REPOS_PATH NEW_REPOS_PATH\n\n"
"Makes a hot copy of a repository.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>svnadmin__clean_logs</name></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"list-dblogs"</expr>, <expr><name>subcommand_list_dblogs</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin list-dblogs REPOS_PATH\n\n"
"List all Berkeley DB log files.\n\n"
"WARNING: Modifying or deleting logfiles which are still in use\n"
"will cause your repository to be corrupted.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"list-unused-dblogs"</expr>, <expr><name>subcommand_list_unused_dblogs</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin list-unused-dblogs REPOS_PATH\n\n"
"List unused Berkeley DB log files.\n\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"load"</expr>, <expr><name>subcommand_load</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin load REPOS_PATH\n\n"
"Read a 'dumpfile'-formatted stream from stdin, committing\n"
"new revisions into the repository's filesystem. If the repository\n"
"was previously empty, its UUID will, by default, be changed to the\n"
"one specified in the stream. Progress feedback is sent to stdout.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{
<expr>'q'</expr>, <expr><name>svnadmin__ignore_uuid</name></expr>, <expr><name>svnadmin__force_uuid</name></expr>,
<expr><name>svnadmin__use_pre_commit_hook</name></expr>, <expr><name>svnadmin__use_post_commit_hook</name></expr>,
<expr><name>svnadmin__parent_dir</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"lslocks"</expr>, <expr><name>subcommand_lslocks</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin lslocks REPOS_PATH [PATH-IN-REPOS]\n\n"
"Print descriptions of all locks on or under PATH-IN-REPOS (which,\n"
"if not provided, is the root of the repository).\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"lstxns"</expr>, <expr><name>subcommand_lstxns</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin lstxns REPOS_PATH\n\n"
"Print the names of all uncommitted transactions.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"recover"</expr>, <expr><name>subcommand_recover</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin recover REPOS_PATH\n\n"
"Run the recovery procedure on a repository. Do this if you've\n"
"been getting errors indicating that recovery ought to be run.\n"
"Berkeley DB recovery requires exclusive access and will\n"
"exit if the repository is in use by another process.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>svnadmin__wait</name></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"rmlocks"</expr>, <expr><name>subcommand_rmlocks</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin rmlocks REPOS_PATH LOCKED_PATH...\n\n"
"Unconditionally remove lock from each LOCKED_PATH.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"rmtxns"</expr>, <expr><name>subcommand_rmtxns</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin rmtxns REPOS_PATH TXN_NAME...\n\n"
"Delete the named transaction(s).\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>'q'</expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"setlog"</expr>, <expr><name>subcommand_setlog</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin setlog REPOS_PATH -r REVISION FILE\n\n"
"Set the log-message on revision REVISION to the contents of FILE. Use\n"
"--bypass-hooks to avoid triggering the revision-property-related hooks\n"
"(for example, if you do not want an email notification sent\n"
"from your post-revprop-change hook, or because the modification of\n"
"revision properties has not been enabled in the pre-revprop-change\n"
"hook).\n\n"
"NOTE: Revision properties are not versioned, so this command will\n"
"overwrite the previous log message.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>'r'</expr>, <expr><name>svnadmin__bypass_hooks</name></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"setrevprop"</expr>, <expr><name>subcommand_setrevprop</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin setrevprop REPOS_PATH -r REVISION NAME FILE\n\n"
"Set the property NAME on revision REVISION to the contents of FILE. Use\n"
"--use-pre-revprop-change-hook/--use-post-revprop-change-hook to trigger\n"
"the revision property-related hooks (for example, if you want an email\n"
"notification sent from your post-revprop-change hook).\n\n"
"NOTE: Revision properties are not versioned, so this command will\n"
"overwrite the previous value of the property.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{
<expr>'r'</expr>, <expr><name>svnadmin__use_pre_revprop_change_hook</name></expr>,
<expr><name>svnadmin__use_post_revprop_change_hook</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"setuuid"</expr>, <expr><name>subcommand_setuuid</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin setuuid REPOS_PATH [NEW_UUID]\n\n"
"Reset the repository UUID for the repository located at REPOS_PATH. If\n"
"NEW_UUID is provided, use that as the new repository UUID; otherwise,\n"
"generate a brand new UUID for the repository.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"upgrade"</expr>, <expr><name>subcommand_upgrade</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin upgrade REPOS_PATH\n\n"
"Upgrade the repository located at REPOS_PATH to the latest supported\n"
"schema version.\n\n"
"This functionality is provided as a convenience for repository\n"
"administrators who wish to make use of new Subversion functionality\n"
"without having to undertake a potentially costly full repository dump\n"
"and load operation. As such, the upgrade performs only the minimum\n"
"amount of work needed to accomplish this while still maintaining the\n"
"integrity of the repository. It does not guarantee the most optimized\n"
"repository state as a dump and subsequent load would.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>0</expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr>"verify"</expr>, <expr><name>subcommand_verify</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><call><name>N_</name>
<argument_list>(<argument><expr>"usage: svnadmin verify REPOS_PATH\n\n"
"Verifies the data stored in the repository.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr>'r'</expr>, <expr>'q'</expr>}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><block>{<expr>0</expr>}</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<struct>struct <name>svnadmin_opt_state</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repository_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_repository_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>pre_1_4_compatible</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>pre_1_5_compatible</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>start_revision</name></decl>, <decl><type ref="prev"/><name>end_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>help</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>incremental</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_deltas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_pre_commit_hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_post_commit_hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_pre_revprop_change_hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_post_revprop_change_hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>bdb_txn_nosync</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>bdb_log_keep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>clean_logs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>bypass_hooks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>wait</name></decl>;</decl_stmt>
<enum>enum <name>svn_repos_load_uuid</name> <name>uuid_action</name>;</enum>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_revnum</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>revnum</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>youngest</name></decl></param>, <param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_number</name></expr>)</condition><then>
<expr_stmt><expr>*<name>revnum</name> = <name><name>revision</name>-&gt;<name>value</name>.<name>number</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_head</name></expr>)</condition><then>
<expr_stmt><expr>*<name>revnum</name> = <name>youngest</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_date</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_dated_revision</name>
<argument_list>(<argument><expr><name>revnum</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name><name>revision</name>-&gt;<name>value</name>.<name>date</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<expr_stmt><expr>*<name>revnum</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid revision specifier"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr>*<name>revnum</name> &gt; <name>youngest</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Revisions must not be greater than the youngest revision (%ld)"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>youngest</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_create</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>fs_config</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>fs_config</name></expr></argument>, <argument><expr><name>SVN_FS_CONFIG_BDB_TXN_NOSYNC</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr>(<name><name>opt_state</name>-&gt;<name>bdb_txn_nosync</name></name> ? "1" : "0")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>fs_config</name></expr></argument>, <argument><expr><name>SVN_FS_CONFIG_BDB_LOG_AUTOREMOVE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr>(<name><name>opt_state</name>-&gt;<name>bdb_log_keep</name></name> ? "0" : "1")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>fs_type</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>fs_config</name></expr></argument>, <argument><expr><name>SVN_FS_CONFIG_FS_TYPE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>fs_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>pre_1_4_compatible</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>fs_config</name></expr></argument>, <argument><expr><name>SVN_FS_CONFIG_PRE_1_4_COMPATIBLE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>pre_1_5_compatible</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>fs_config</name></expr></argument>, <argument><expr><name>SVN_FS_CONFIG_PRE_1_5_COMPATIBLE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_get_config</name><argument_list>(<argument><expr>&amp;<name>config</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>config_dir</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_create</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>config</name></expr></argument>, <argument><expr><name>fs_config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_fs_set_warning_func</name><argument_list>(<argument><expr><call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>warning_func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_deltify</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>start</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init>, <name>end</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest</name></decl>, <decl><type ref="prev"/><name>revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>youngest</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_revnum</name><argument_list>(<argument><expr>&amp;<name>start</name></expr></argument>, <argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>start_revision</name></name></expr></argument>,
<argument><expr><name>youngest</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_revnum</name><argument_list>(<argument><expr>&amp;<name>end</name></expr></argument>, <argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>end_revision</name></name></expr></argument>,
<argument><expr><name>youngest</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>start</name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
<expr_stmt><expr><name>start</name> = <name>youngest</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>end</name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
<expr_stmt><expr><name>end</name> = <name>start</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>start</name> &gt; <name>end</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"First revision cannot be higher than second"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>revision</name> = <name>start</name></expr>;</init> <condition><expr><name>revision</name> &lt;= <name>end</name></expr>;</condition> <incr><expr><name>revision</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_cancel</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Deltifying revision %ld..."</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_deltify_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"done.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>recode_write_baton</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> *</type><name>out</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>recode_write</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>recode_write_baton</name> *</type><name>rwb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>rwb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_cmdline_fputs</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>rwb</name>-&gt;<name>out</name></name></expr></argument>, <argument><expr><name><name>rwb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_stream_t</name> *</type>
<name>recode_stream_create</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>std_stream</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>recode_write_baton</name> *</type><name>std_stream_rwb</name> <init>=
<expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>recode_write_baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>rw_stream</name> <init>= <expr><call><name>svn_stream_create</name><argument_list>(<argument><expr><name>std_stream_rwb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>std_stream_rwb</name>-&gt;<name>pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>std_stream_rwb</name>-&gt;<name>out</name></name> = <name>std_stream</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr><name>rw_stream</name></expr></argument>, <argument><expr><name>recode_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rw_stream</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_dump</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stdout_stream</name></decl>, *<decl><type ref="prev"/><name>stderr_stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>lower</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init>, <name>upper</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>youngest</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_revnum</name><argument_list>(<argument><expr>&amp;<name>lower</name></expr></argument>, <argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>start_revision</name></name></expr></argument>,
<argument><expr><name>youngest</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_revnum</name><argument_list>(<argument><expr>&amp;<name>upper</name></expr></argument>, <argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>end_revision</name></name></expr></argument>,
<argument><expr><name>youngest</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lower</name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lower</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>upper</name> = <name>youngest</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>upper</name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>upper</name> = <name>lower</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>lower</name> &gt; <name>upper</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"First revision cannot be higher than second"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_stdio_stream</name><argument_list>(<argument><expr>&amp;<name>stdout_stream</name></expr></argument>, <argument><expr><name>apr_file_open_stdout</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>)</condition><then>
<expr_stmt><expr><name>stderr_stream</name> = <call><name>recode_stream_create</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_dump_fs2</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>stdout_stream</name></expr></argument>, <argument><expr><name>stderr_stream</name></expr></argument>,
<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>incremental</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>use_deltas</name></name></expr></argument>, <argument><expr><name>check_cancel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_help</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name> <init>=
<expr><call><name>_</name><argument_list>(<argument><expr>"general usage: svnadmin SUBCOMMAND REPOS_PATH [ARGS &amp; OPTIONS ...]\n"
"Type 'svnadmin help &lt;subcommand&gt;' for help on a specific subcommand.\n"
"Type 'svnadmin --version' to see the program version and FS modules.\n"
"\n"
"Available subcommands:\n"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_desc_start</name>
<init>= <expr><call><name>_</name><argument_list>(<argument><expr>"The following repository back-end (FS) modules are available:\n\n"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>version_footer</name></decl>;</decl_stmt>
<expr_stmt><expr><name>version_footer</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>fs_desc_start</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_print_modules</name><argument_list>(<argument><expr><name>version_footer</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_print_help</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr>"svnadmin"</expr></argument>,
<argument><expr><name>opt_state</name> ? <name><name>opt_state</name>-&gt;<name>version</name></name> : <name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>version_footer</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>header</name></expr></argument>, <argument><expr><name>cmd_table</name></expr></argument>, <argument><expr><name>options_table</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_load</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stdin_stream</name></decl>, *<decl><type ref="prev"/><name>stdout_stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_stdio_stream</name><argument_list>(<argument><expr>&amp;<name>stdin_stream</name></expr></argument>,
<argument><expr><name>apr_file_open_stdin</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>)</condition><then>
<expr_stmt><expr><name>stdout_stream</name> = <call><name>recode_stream_create</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_load_fs2</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>stdin_stream</name></expr></argument>, <argument><expr><name>stdout_stream</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>uuid_action</name></name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>parent_dir</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>use_pre_commit_hook</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>use_post_commit_hook</name></name></expr></argument>,
<argument><expr><name>check_cancel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_lstxns</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>txns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_list_transactions</name><argument_list>(<argument><expr>&amp;<name>txns</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>txns</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>,
<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>txns</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>recovery_started</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr>(<name>apr_pool_t</name> *)<name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Repository lock acquired.\n"
"Please wait; recovering the"
" repository may take some time...\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_cancellation_signals</name><argument_list>(<argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_recover</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setup_cancellation_signals</name><argument_list>(<argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_repos_recover3</name><argument_list>(<argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>recovery_started</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>check_cancel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>wait</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_REPOS_LOCKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to get exclusive repository "
"access; perhaps another process\n"
"such as httpd, svnserve or svn "
"has it open?"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Waiting on repository lock; perhaps"
" another process has it open?\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_recover3</name><argument_list>(<argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>recovery_started</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>check_cancel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"\nRecovery completed.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The latest repos revision is %ld.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>youngest_rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>list_dblogs</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>only_unused</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>logfiles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_db_logfiles</name><argument_list>(<argument><expr>&amp;<name>logfiles</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>,
<argument><expr><name>only_unused</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>logfiles</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_utf8</name></decl>;</decl_stmt>
<expr_stmt><expr><name>log_utf8</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>,
<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>logfiles</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>log_utf8</name> = <call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>log_utf8</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><name>log_utf8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_list_dblogs</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>list_dblogs</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_list_unused_dblogs</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>list_dblogs</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_rmtxns</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_all_args</name><argument_list>(<argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>args</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name_utf8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>txn_name_utf8</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_open_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_name_utf8</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_TRANSACTION_DEAD</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_purge_txn</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_name_utf8</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> , <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name>
<argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Transaction '%s' removed.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>txn_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_revprop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
<param><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>prop_value</name> <init>= <expr><call><name>svn_string_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>file_contents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename_utf8</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>filename_utf8</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filename_utf8</name> = <call><name>svn_path_internal_style</name><argument_list>(<argument><expr><name>filename_utf8</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>file_contents</name></expr></argument>, <argument><expr><name>filename_utf8</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop_value</name>-&gt;<name>data</name></name> = <name><name>file_contents</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop_value</name>-&gt;<name>len</name></name> = <name><name>file_contents</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_translate_string</name><argument_list>(<argument><expr>&amp;<name>prop_value</name></expr></argument>, <argument><expr><name>prop_value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>use_pre_revprop_change_hook</name></name> ||
<name><name>opt_state</name>-&gt;<name>use_post_revprop_change_hook</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_change_rev_prop3</name>
<argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>value</name>.<name>number</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>prop_name</name></expr></argument>, <argument><expr><name>prop_value</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>use_pre_revprop_change_hook</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>use_post_revprop_change_hook</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_change_rev_prop</name>
<argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>value</name>.<name>number</name></name></expr></argument>,
<argument><expr><name>prop_name</name></expr></argument>, <argument><expr><name>prop_value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_setrevprop</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>args</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_number</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing revision"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Only one revision allowed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_all_args</name><argument_list>(<argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>args</name>-&gt;<name>nelts</name></name> != 2</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Exactly one property name and one file "
"argument required"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>set_revprop</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_setuuid</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_all_args</name><argument_list>(<argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>args</name>-&gt;<name>nelts</name></name> &gt; 1</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>args</name>-&gt;<name>nelts</name></name> == 1</expr>)</condition><then>
<expr_stmt><expr><name>uuid</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_fs_set_uuid</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_setlog</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>args</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_number</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing revision"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Only one revision allowed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_all_args</name><argument_list>(<argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>args</name>-&gt;<name>nelts</name></name> != 1</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Exactly one file argument required"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<name><name>opt_state</name>-&gt;<name>bypass_hooks</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>use_pre_revprop_change_hook</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>use_post_revprop_change_hook</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>set_revprop</name><argument_list>(<argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>,
<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_verify</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stderr_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest</name></decl>, <decl><type ref="prev"/><name>lower</name></decl>, <decl><type ref="prev"/><name>upper</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>youngest</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_revnum</name><argument_list>(<argument><expr>&amp;<name>lower</name></expr></argument>, <argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>start_revision</name></name></expr></argument>,
<argument><expr><name>youngest</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_revnum</name><argument_list>(<argument><expr>&amp;<name>upper</name></expr></argument>, <argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>end_revision</name></name></expr></argument>,
<argument><expr><name>youngest</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>upper</name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>upper</name> = <name>lower</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>)</condition><then>
<expr_stmt><expr><name>stderr_stream</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>stderr_stream</name> = <call><name>recode_stream_create</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_repos_verify_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>stderr_stream</name></expr></argument>, <argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>,
<argument><expr><name>check_cancel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>subcommand_hotcopy</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_hotcopy</name><argument_list>(<argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>new_repository_path</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>clean_logs</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_lslocks</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_path</name> <init>= <expr>"/"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>locks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_args_to_target_array2</name><argument_list>(<argument><expr>&amp;<name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>,
<argument><expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &gt; 1</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><name>fs_path</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_get_locks</name><argument_list>(<argument><expr>&amp;<name>locks</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>locks</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>, *<decl><type ref="prev"/><name>cr_date</name></decl>, *<decl><type ref="prev"/><name>exp_date</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>comment_lines</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lock</name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cr_date</name> = <call><name>svn_time_to_human_cstring</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>creation_date</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>lock</name>-&gt;<name>expiration_date</name></name></expr>)</condition><then>
<expr_stmt><expr><name>exp_date</name> = <call><name>svn_time_to_human_cstring</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>expiration_date</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>lock</name>-&gt;<name>comment</name></name></expr>)</condition><then>
<expr_stmt><expr><name>comment_lines</name> = <call><name>svn_cstring_count_newlines</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>comment</name></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path: %s\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"UUID Token: %s\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Owner: %s\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Created: %s\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cr_date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Expires: %s\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>exp_date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>(<name>comment_lines</name> != 1)
? <call><name>_</name><argument_list>(<argument><expr>"Comment (%i lines):\n%s\n\n"</expr></argument>)</argument_list></call>
: <call><name>_</name><argument_list>(<argument><expr>"Comment (%i line):\n%s\n\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>comment_lines</name></expr></argument>,
<argument><expr><name><name>lock</name>-&gt;<name>comment</name></name> ? <name><name>lock</name>-&gt;<name>comment</name></name> : ""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_rmlocks</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_access_t</name> *</type><name>access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>username</name> = <call><name>svn_user_get_name</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>username</name></expr>)</condition><then>
<expr_stmt><expr><name>username</name> = "administrator"</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_create_access</name><argument_list>(<argument><expr>&amp;<name>access</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_set_access</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_all_args</name><argument_list>(<argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>args</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"No paths to unlock provided"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>args</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_path_utf8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>lock_path_utf8</name></expr></argument>, <argument><expr><name>lock_path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_get_lock</name><argument_list>(<argument><expr>&amp;<name>lock</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>lock_path_utf8</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>move_on</name>;</goto></then></if>
<if>if <condition>(<expr>! <name>lock</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' isn't locked.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>lock_path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_unlock</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>lock_path_utf8</name></expr></argument>,
<argument><expr><name><name>lock</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr>1</expr></argument> , <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>move_on</name>;</goto></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Removed lock on '%s'.\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>move_on</name>:</label>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> , <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upgrade_started</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr>(<name>apr_pool_t</name> *)<name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Repository lock acquired.\n"
"Please wait; upgrading the"
" repository may take some time...\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup_cancellation_signals</name><argument_list>(<argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_upgrade</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setup_cancellation_signals</name><argument_list>(<argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_repos_upgrade</name><argument_list>(<argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>upgrade_started</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>wait</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_REPOS_LOCKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to get exclusive repository "
"access; perhaps another process\n"
"such as httpd, svnserve or svn "
"has it open?"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Waiting on repository lock; perhaps"
" another process has it open?\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_upgrade</name><argument_list>(<argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>upgrade_started</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_UNSUPPORTED_UPGRADE</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_quick_wrap</name>
<argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Upgrade of this repository's underlying versioned "
"filesystem is not supported; consider "
"dumping and loading the data elsewhere"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_REPOS_UNSUPPORTED_UPGRADE</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_quick_wrap</name>
<argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Upgrade of this repository is not supported; consider "
"dumping and loading the data elsewhere"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"\nUpgrade completed.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc_t</name> *</type><name>subcommand</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name></type> <name>opt_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>received_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_cmdline_init</name><argument_list>(<argument><expr>"svnadmin"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call> != <name>EXIT_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>apr_allocator_create</name><argument_list>(<argument><expr>&amp;<name>allocator</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>apr_allocator_max_free_set</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>SVN_ALLOCATOR_RECOMMENDED_MAX_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pool</name> = <call><name>svn_pool_create_ex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_allocator_owner_set</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>received_opts</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_OPT_MAX_OPTIONS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>check_lib_versions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_initialize</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>argc</name> &lt;= 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>subcommand_help</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>opt_state</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name>.<name>start_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name>.<name>end_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline__getopt_init</name><argument_list>(<argument><expr>&amp;<name>os</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>os</name>-&gt;<name>interleave</name></name> = 1</expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>utf8_opt_arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_getopt_long</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>options_table</name></expr></argument>, <argument><expr>&amp;<name>opt_id</name></expr></argument>, <argument><expr>&amp;<name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then>
<else>else <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>subcommand_help</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>received_opts</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call> = <name>opt_id</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>opt_id</name></expr>)</condition> <block>{
<case>case <expr>'r'</expr>: <block>{
<if>if <condition>(<expr><name><name>opt_state</name>.<name>start_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_unspecified</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Multiple revision arguments encountered; "
"try '-r N:M' instead of '-r N -r M'"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>svn_opt_parse_revision</name><argument_list>(<argument><expr>&amp;(<name><name>opt_state</name>.<name>start_revision</name></name>)</expr></argument>,
<argument><expr>&amp;(<name><name>opt_state</name>.<name>end_revision</name></name>)</expr></argument>,
<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>utf8_opt_arg</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Syntax error in revision argument '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>utf8_opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block>
<break>break;</break>
</case><case>case <expr>'q'</expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>quiet</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'h'</expr>:
</case><case>case <expr>'?'</expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>help</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__version</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>version</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__incremental</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>incremental</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__deltas</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>use_deltas</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__ignore_uuid</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>uuid_action</name></name> = <name>svn_repos_load_uuid_ignore</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__force_uuid</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>uuid_action</name></name> = <name>svn_repos_load_uuid_force</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__pre_1_4_compatible</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>pre_1_4_compatible</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__pre_1_5_compatible</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>pre_1_5_compatible</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__fs_type</name></expr>:
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name><name>opt_state</name>.<name>fs_type</name></name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr><name>svnadmin__parent_dir</name></expr>:
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name><name>opt_state</name>.<name>parent_dir</name></name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>opt_state</name>.<name>parent_dir</name></name>
= <call><name>svn_path_internal_style</name><argument_list>(<argument><expr><name><name>opt_state</name>.<name>parent_dir</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__use_pre_commit_hook</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>use_pre_commit_hook</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__use_post_commit_hook</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>use_post_commit_hook</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__use_pre_revprop_change_hook</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>use_pre_revprop_change_hook</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__use_post_revprop_change_hook</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>use_post_revprop_change_hook</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__bdb_txn_nosync</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>bdb_txn_nosync</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__bdb_log_keep</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>bdb_log_keep</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__bypass_hooks</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>bypass_hooks</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__clean_logs</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>clean_logs</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__config_dir</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>config_dir</name></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnadmin__wait</name></expr>:
<expr_stmt><expr><name><name>opt_state</name>.<name>wait</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default: <block>{
<expr_stmt><expr><call><name>subcommand_help</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block>
</default>}</block></switch>
}</block></while>
<if>if <condition>(<expr><name><name>opt_state</name>.<name>help</name></name></expr>)</condition><then>
<expr_stmt><expr><name>subcommand</name> = <call><name>svn_opt_get_canonical_subcommand</name><argument_list>(<argument><expr><name>cmd_table</name></expr></argument>, <argument><expr>"help"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>subcommand</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>os</name>-&gt;<name>ind</name></name> &gt;= <name><name>os</name>-&gt;<name>argc</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>opt_state</name>.<name>version</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_opt_subcommand_desc_t</name></type> <name>pseudo_cmd</name> <init>= <expr><block>{
<expr>"--version"</expr>, <expr><name>subcommand_help</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr>""</expr>,
<expr><block>{
<expr><name>svnadmin__version</name></expr>,
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>subcommand</name> = &amp;<name>pseudo_cmd</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>svn_error_clear</name>
<argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"subcommand argument required\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subcommand_help</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>first_arg</name> <init>= <expr><name><name>os</name>-&gt;<name>argv</name><index>[<expr><name><name>os</name>-&gt;<name>ind</name></name>++</expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>subcommand</name> = <call><name>svn_opt_get_canonical_subcommand</name><argument_list>(<argument><expr><name>cmd_table</name></expr></argument>, <argument><expr><name>first_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>subcommand</name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>first_arg_utf8</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>first_arg_utf8</name></expr></argument>, <argument><expr><name>first_arg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name>
<argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unknown command: '%s'\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>first_arg_utf8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>subcommand_help</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>subcommand</name>-&gt;<name>cmd_func</name></name> != <name>subcommand_help</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>parse_local_repos_path</name><argument_list>(<argument><expr><name>os</name></expr></argument>,
<argument><expr>&amp;(<name><name>opt_state</name>.<name>repository_path</name></name>)</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>subcommand</name>-&gt;<name>cmd_func</name></name> == <name>subcommand_hotcopy</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>parse_local_repos_path</name><argument_list>(<argument><expr><name>os</name></expr></argument>,
<argument><expr>&amp;(<name><name>opt_state</name>.<name>new_repository_path</name></name>)</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>received_opts</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>opt_id</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>received_opts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>opt_id</name> == 'h' || <name>opt_id</name> == '?'</expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr>! <call><name>svn_opt_subcommand_takes_option</name><argument_list>(<argument><expr><name>subcommand</name></expr></argument>, <argument><expr><name>opt_id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>optstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type><name>badopt</name> <init>=
<expr><call><name>svn_opt_get_option_from_code</name><argument_list>(<argument><expr><name>opt_id</name></expr></argument>, <argument><expr><name>options_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_opt_format_option</name><argument_list>(<argument><expr>&amp;<name>optstr</name></expr></argument>, <argument><expr><name>badopt</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>subcommand</name>-&gt;<name>name</name><index>[<expr>0</expr>]</index></name> == '-'</expr>)</condition><then>
<expr_stmt><expr><call><name>subcommand_help</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_error_clear</name>
<argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name>
<argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Subcommand '%s' doesn't accept option '%s'\n"
"Type 'svnadmin help %s' for usage.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>subcommand</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>optstr</name></expr></argument>, <argument><expr><name><name>subcommand</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>setup_cancellation_signals</name><argument_list>(<argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGXFSZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGXFSZ</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>err</name> = <call>(*<name><name>subcommand</name>-&gt;<name>cmd_func</name></name>)<argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr>&amp;<name>opt_state</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CL_INSUFFICIENT_ARGS</name>
|| <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_quick_wrap</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Try 'svnadmin help' for more info"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline_fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"svnadmin: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>subcommand_crashtest</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>svnadmin_opt_state</name> *</type><name>opt_state</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>repository_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
