<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_repos/repos.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repos.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NL</name></cpp:macro> <cpp:value>APR_EOL_STR</cpp:value></cpp:define>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_path</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_db_env</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>db_path</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_conf_dir</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>conf_path</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_svnserve_conf</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>conf_path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__CONF_SVNSERVE_CONF</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_lock_dir</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>lock_path</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_db_lockfile</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>lock_path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__DB_LOCKFILE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_db_logs_lockfile</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>lock_path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__DB_LOGS_LOCKFILE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_hook_dir</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>hook_path</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_start_commit_hook</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>hook_path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__HOOK_START_COMMIT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_pre_commit_hook</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>hook_path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__HOOK_PRE_COMMIT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_pre_lock_hook</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>hook_path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__HOOK_PRE_LOCK</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_pre_unlock_hook</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>hook_path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__HOOK_PRE_UNLOCK</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_post_lock_hook</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>hook_path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__HOOK_POST_LOCK</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_post_unlock_hook</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>hook_path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__HOOK_POST_UNLOCK</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_post_commit_hook</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>hook_path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__HOOK_POST_COMMIT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_pre_revprop_change_hook</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>hook_path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__HOOK_PRE_REVPROP_CHANGE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_post_revprop_change_hook</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>hook_path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__HOOK_POST_REVPROP_CHANGE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_repos_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_dir_make</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; (<call><name>APR_STATUS_IS_EEXIST</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_empty</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_dir_empty</name><argument_list>(<argument><expr>&amp;<name>is_empty</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_empty</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>err</name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_DIR_NOT_EMPTY</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' exists and is non-empty"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type> <name>bdb_lock_file_contents</name> <init>=
<expr>"DB lock file, representing locks on the versioned filesystem." <name>NL</name>
"" <name>NL</name>
"All accessors -- both readers and writers -- of the repository's" <name>NL</name>
"Berkeley DB environment take out shared locks on this file, and" <name>NL</name>
"each accessor removes its lock when done. If and when the DB" <name>NL</name>
"recovery procedure is run, the recovery code takes out an" <name>NL</name>
"exclusive lock on this file, so we can be sure no one else is" <name>NL</name>
"using the DB during the recovery." <name>NL</name>
"" <name>NL</name>
"You should never have to edit or remove this file." <name>NL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type> <name>bdb_logs_lock_file_contents</name> <init>=
<expr>"DB logs lock file, representing locks on the versioned filesystem logs." <name>NL</name>
"" <name>NL</name>
"All log manipulators of the repository's Berkeley DB environment" <name>NL</name>
"take out exclusive locks on this file to ensure that only one" <name>NL</name>
"accessor manipulates the logs at a time." <name>NL</name>
"" <name>NL</name>
"You should never have to edit or remove this file." <name>NL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type> <name>pre12_compat_unneeded_file_contents</name> <init>=
<expr>"This file is not used by Subversion 1.3.x or later." <name>NL</name>
"However, its existence is required for compatibility with" <name>NL</name>
"Subversion 1.2.x or earlier." <name>NL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_db_logs_lock</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lockfile_path</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lockfile_path</name> = <call><name>svn_repos_db_logs_lockfile</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>SVN_FS_TYPE_BDB</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>contents</name> = <name>bdb_logs_lock_file_contents</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>contents</name> = <name>pre12_compat_unneeded_file_contents</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><name>lockfile_path</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating db logs lock file"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_db_lock</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lockfile_path</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lockfile_path</name> = <call><name>svn_repos_db_lockfile</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>SVN_FS_TYPE_BDB</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>contents</name> = <name>bdb_lock_file_contents</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>contents</name> = <name>pre12_compat_unneeded_file_contents</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><name>lockfile_path</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating db lock file"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_locks</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>create_repos_dir</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>lock_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating lock dir"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_db_lock</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_db_logs_lock</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOOKS_ENVIRONMENT_TEXT</name></cpp:macro> <cpp:value>"#The hook program typically does not inherit the environment of" NL "#its parent process. For example, a common problem is for the" NL "#PATH environment variable to not be set to its usual value, so" NL "#that subprograms fail to launch unless invoked via absolute path." NL "#If you're having unexpected problems with a hook program, the" NL "#culprit may be unusual (or missing) environment variables." NL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREWRITTEN_HOOKS_TEXT</name></cpp:macro> <cpp:value>"#For more examples and pre-written hooks, see those in" NL "#the Subversion repository at" NL "#http://svn.collab.net/repos/svn/trunk/tools/hook-scripts/ and" NL "#http://svn.collab.net/repos/svn/trunk/contrib/hook-scripts/" NL</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_hooks</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>this_path</name></decl>, *<decl><type ref="prev"/><name>contents</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>create_repos_dir</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>hook_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating hook directory"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<expr_stmt><expr><name>this_path</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
<argument><expr><call><name>svn_repos_start_commit_hook</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_REPOS__HOOK_DESC_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_NAME</name></cpp:macro> <cpp:value>SVN_REPOS__HOOK_START_COMMIT</cpp:value></cpp:define>
<expr_stmt><expr><name>contents</name> =
"#!/bin/sh" <name>NL</name>
"" <name>NL</name>
"#START-COMMIT HOOK" <name>NL</name>
"#" <name>NL</name>
"#The start-commit hook is invoked before a Subversion txn is created" <name>NL</name>
"#in the process of doing a commit. Subversion runs this hook" <name>NL</name>
"#by invoking a program (script, executable, binary, etc.) named" <name>NL</name>
"#'"<name>SCRIPT_NAME</name>"' (for which this file is a template)" <name>NL</name>
"#with the following ordered arguments:" <name>NL</name>
"#" <name>NL</name>
"#[1] REPOS-PATH (the path to this repository)" <name>NL</name>
"#[2] USER (the authenticated user attempting to commit)" <name>NL</name>
"#[3] CAPABILITIES (a colon-separated list of capabilities reported" <name>NL</name>
"#by the client; see note below)" <name>NL</name>
"#" <name>NL</name>
"#Note: The CAPABILITIES parameter is new in Subversion 1.5, and 1.5" <name>NL</name>
"#clients will typically report at least the \"" \
<name>SVN_RA_CAPABILITY_MERGEINFO</name> "\" capability." <name>NL</name>
"#If there are other capabilities, then the list is colon-separated," <name>NL</name>
"#e.g.: \"" <name>SVN_RA_CAPABILITY_MERGEINFO</name> ":some-other-capability\" " \
"(the order is undefined)." <name>NL</name>
"#" <name>NL</name>
"#The list is self-reported by the client. Therefore, you should not" <name>NL</name>
"#make security assumptions based on the capabilities list, nor should" <name>NL</name>
"#you assume that clients reliably report every capability they have." <name>NL</name>
"#" <name>NL</name>
"#The working directory for this hook program's invocation is undefined," <name>NL</name>
"#so the program should set one explicitly if it cares." <name>NL</name>
"#" <name>NL</name>
"#If the hook program exits with success, the commit continues; but" <name>NL</name>
"#if it exits with failure (non-zero), the commit is stopped before" <name>NL</name>
"#a Subversion txn is created, and STDERR is returned to the client." <name>NL</name>
"#" <name>NL</name>
"#On a Unix system, the normal procedure is to have '"<name>SCRIPT_NAME</name>"'" <name>NL</name>
"#invoke other programs to do the real work, though it may do the" <name>NL</name>
"#work itself too." <name>NL</name>
"#" <name>NL</name>
"#Note that '"<name>SCRIPT_NAME</name>"' must be executable by the user(s) who will" <name>NL</name>
"#invoke it (typically the user httpd runs as), and that user must" <name>NL</name>
"#have filesystem-level permission to access the repository." <name>NL</name>
"#" <name>NL</name>
"#On a Windows system, you should name the hook program" <name>NL</name>
"#'"<name>SCRIPT_NAME</name>".bat' or '"<name>SCRIPT_NAME</name>".exe'," <name>NL</name>
"#but the basic idea is the same." <name>NL</name>
"#" <name>NL</name>
<name>HOOKS_ENVIRONMENT_TEXT</name>
"#" <name>NL</name>
"#Here is an example hook script, for a Unix /bin/sh interpreter." <name>NL</name>
<name>PREWRITTEN_HOOKS_TEXT</name>
"" <name>NL</name>
"" <name>NL</name>
"REPOS=\"$1\"" <name>NL</name>
"USER=\"$2\"" <name>NL</name>
"" <name>NL</name>
"commit-allower.pl --repository \"$REPOS\" --user \"$USER\" || exit 1" <name>NL</name>
"special-auth-check.py --user \"$USER\" --auth-level 3 || exit 1" <name>NL</name>
"" <name>NL</name>
"#All checks passed, so allow the commit." <name>NL</name>
"exit 0" <name>NL</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCRIPT_NAME</name></cpp:undef>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating start-commit hook"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<expr_stmt><expr><name>this_path</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
<argument><expr><call><name>svn_repos_pre_commit_hook</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_REPOS__HOOK_DESC_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_NAME</name></cpp:macro> <cpp:value>SVN_REPOS__HOOK_PRE_COMMIT</cpp:value></cpp:define>
<expr_stmt><expr><name>contents</name> =
"#!/bin/sh" <name>NL</name>
"" <name>NL</name>
"#PRE-COMMIT HOOK" <name>NL</name>
"#" <name>NL</name>
"#The pre-commit hook is invoked before a Subversion txn is" <name>NL</name>
"#committed. Subversion runs this hook by invoking a program" <name>NL</name>
"#(script, executable, binary, etc.) named '"<name>SCRIPT_NAME</name>"' (for which" <name>NL</name>
"#this file is a template), with the following ordered arguments:" <name>NL</name>
"#" <name>NL</name>
"#[1] REPOS-PATH (the path to this repository)" <name>NL</name>
"#[2] TXN-NAME (the name of the txn about to be committed)" <name>NL</name>
"#" <name>NL</name>
"#The default working directory for the invocation is undefined, so" <name>NL</name>
"#the program should set one explicitly if it cares." <name>NL</name>
"#" <name>NL</name>
"#If the hook program exits with success, the txn is committed; but" <name>NL</name>
"#if it exits with failure (non-zero), the txn is aborted, no commit" <name>NL</name>
"#takes place, and STDERR is returned to the client. The hook" <name>NL</name>
"#program can use the 'svnlook' utility to help it examine the txn." <name>NL</name>
"#" <name>NL</name>
"#On a Unix system, the normal procedure is to have '"<name>SCRIPT_NAME</name>"'" <name>NL</name>
"#invoke other programs to do the real work, though it may do the" <name>NL</name>
"#work itself too." <name>NL</name>
"#" <name>NL</name>
"#*** NOTE: THE HOOK PROGRAM MUST NOT MODIFY THE TXN, EXCEPT ***" <name>NL</name>
"#*** FOR REVISION PROPERTIES (like svn:log or svn:author). ***" <name>NL</name>
"#" <name>NL</name>
"#This is why we recommend using the read-only 'svnlook' utility." <name>NL</name>
"#In the future, Subversion may enforce the rule that pre-commit" <name>NL</name>
"#hooks should not modify the versioned data in txns, or else come" <name>NL</name>
"#up with a mechanism to make it safe to do so (by informing the" <name>NL</name>
"#committing client of the changes). However, right now neither" <name>NL</name>
"#mechanism is implemented, so hook writers just have to be careful." <name>NL</name>
"#" <name>NL</name>
"#Note that '"<name>SCRIPT_NAME</name>"' must be executable by the user(s) who will" <name>NL</name>
"#invoke it (typically the user httpd runs as), and that user must" <name>NL</name>
"#have filesystem-level permission to access the repository." <name>NL</name>
"#" <name>NL</name>
"#On a Windows system, you should name the hook program" <name>NL</name>
"#'"<name>SCRIPT_NAME</name>".bat' or '"<name>SCRIPT_NAME</name>".exe'," <name>NL</name>
"#but the basic idea is the same." <name>NL</name>
"#" <name>NL</name>
<name>HOOKS_ENVIRONMENT_TEXT</name>
"#" <name>NL</name>
"#Here is an example hook script, for a Unix /bin/sh interpreter." <name>NL</name>
<name>PREWRITTEN_HOOKS_TEXT</name>
"" <name>NL</name>
"" <name>NL</name>
"REPOS=\"$1\"" <name>NL</name>
"TXN=\"$2\"" <name>NL</name>
"" <name>NL</name>
"#Make sure that the log message contains some text." <name>NL</name>
"SVNLOOK=" <name>SVN_BINDIR</name> "/svnlook" <name>NL</name>
"$SVNLOOK log -t \"$TXN\" \"$REPOS\" | \\" <name>NL</name>
" grep \"[a-zA-Z0-9]\" &gt; /dev/null || exit 1" <name>NL</name>
"" <name>NL</name>
"#Check that the author of this commit has the rights to perform" <name>NL</name>
"#the commit on the files and directories being modified." <name>NL</name>
"commit-access-control.pl \"$REPOS\" \"$TXN\" commit-access-control.cfg || exit 1"
<name>NL</name>
"" <name>NL</name>
"#All checks passed, so allow the commit." <name>NL</name>
"exit 0" <name>NL</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCRIPT_NAME</name></cpp:undef>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating pre-commit hook"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<expr_stmt><expr><name>this_path</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
<argument><expr><call><name>svn_repos_pre_revprop_change_hook</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_REPOS__HOOK_DESC_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_NAME</name></cpp:macro> <cpp:value>SVN_REPOS__HOOK_PRE_REVPROP_CHANGE</cpp:value></cpp:define>
<expr_stmt><expr><name>contents</name> =
"#!/bin/sh" <name>NL</name>
"" <name>NL</name>
"#PRE-REVPROP-CHANGE HOOK" <name>NL</name>
"#" <name>NL</name>
"#The pre-revprop-change hook is invoked before a revision property" <name>NL</name>
"#is added, modified or deleted. Subversion runs this hook by invoking" <name>NL</name>
"#a program (script, executable, binary, etc.) named '"<name>SCRIPT_NAME</name>"'" <name>NL</name>
"#(for which this file is a template), with the following ordered" <name>NL</name>
"#arguments:" <name>NL</name>
"#" <name>NL</name>
"#[1] REPOS-PATH (the path to this repository)" <name>NL</name>
"#[2] REVISION (the revision being tweaked)" <name>NL</name>
"#[3] USER (the username of the person tweaking the property)" <name>NL</name>
"#[4] PROPNAME (the property being set on the revision)" <name>NL</name>
"#[5] ACTION (the property is being 'A'dded, 'M'odified, or 'D'eleted)"
<name>NL</name>
"#" <name>NL</name>
"#[STDIN] PROPVAL ** the new property value is passed via STDIN." <name>NL</name>
"#" <name>NL</name>
"#If the hook program exits with success, the propchange happens; but" <name>NL</name>
"#if it exits with failure (non-zero), the propchange doesn't happen." <name>NL</name>
"#The hook program can use the 'svnlook' utility to examine the " <name>NL</name>
"#existing value of the revision property." <name>NL</name>
"#" <name>NL</name>
"#WARNING: unlike other hooks, this hook MUST exist for revision" <name>NL</name>
"#properties to be changed. If the hook does not exist, Subversion " <name>NL</name>
"#will behave as if the hook were present, but failed. The reason" <name>NL</name>
"#for this is that revision properties are UNVERSIONED, meaning that" <name>NL</name>
"#a successful propchange is destructive; the old value is gone" <name>NL</name>
"#forever. We recommend the hook back up the old value somewhere." <name>NL</name>
"#" <name>NL</name>
"#On a Unix system, the normal procedure is to have '"<name>SCRIPT_NAME</name>"'" <name>NL</name>
"#invoke other programs to do the real work, though it may do the" <name>NL</name>
"#work itself too." <name>NL</name>
"#" <name>NL</name>
"#Note that '"<name>SCRIPT_NAME</name>"' must be executable by the user(s) who will" <name>NL</name>
"#invoke it (typically the user httpd runs as), and that user must" <name>NL</name>
"#have filesystem-level permission to access the repository." <name>NL</name>
"#" <name>NL</name>
"#On a Windows system, you should name the hook program" <name>NL</name>
"#'"<name>SCRIPT_NAME</name>".bat' or '"<name>SCRIPT_NAME</name>".exe'," <name>NL</name>
"#but the basic idea is the same." <name>NL</name>
"#" <name>NL</name>
<name>HOOKS_ENVIRONMENT_TEXT</name>
"#" <name>NL</name>
"#Here is an example hook script, for a Unix /bin/sh interpreter." <name>NL</name>
<name>PREWRITTEN_HOOKS_TEXT</name>
"" <name>NL</name>
"" <name>NL</name>
"REPOS=\"$1\"" <name>NL</name>
"REV=\"$2\"" <name>NL</name>
"USER=\"$3\"" <name>NL</name>
"PROPNAME=\"$4\"" <name>NL</name>
"ACTION=\"$5\"" <name>NL</name>
"" <name>NL</name>
"if [ \"$ACTION\" = \"M\" -a \"$PROPNAME\" = \"svn:log\" ]; then exit 0; fi" <name>NL</name>
"" <name>NL</name>
"echo \"Changing revision properties other than svn:log is prohibited\" &gt;&amp;2" <name>NL</name>
"exit 1" <name>NL</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCRIPT_NAME</name></cpp:undef>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating pre-revprop-change hook"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<expr_stmt><expr><name>this_path</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
<argument><expr><call><name>svn_repos_pre_lock_hook</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_REPOS__HOOK_DESC_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_NAME</name></cpp:macro> <cpp:value>SVN_REPOS__HOOK_PRE_LOCK</cpp:value></cpp:define>
<expr_stmt><expr><name>contents</name> =
"#!/bin/sh" <name>NL</name>
"" <name>NL</name>
"#PRE-LOCK HOOK" <name>NL</name>
"#" <name>NL</name>
"#The pre-lock hook is invoked before an exclusive lock is" <name>NL</name>
"#created. Subversion runs this hook by invoking a program " <name>NL</name>
"#(script, executable, binary, etc.) named '"<name>SCRIPT_NAME</name>"' (for which" <name>NL</name>
"#this file is a template), with the following ordered arguments:" <name>NL</name>
"#" <name>NL</name>
"#[1] REPOS-PATH (the path to this repository)" <name>NL</name>
"#[2] PATH (the path in the repository about to be locked)" <name>NL</name>
"#[3] USER (the user creating the lock)" <name>NL</name>
"#" <name>NL</name>
"#The default working directory for the invocation is undefined, so" <name>NL</name>
"#the program should set one explicitly if it cares." <name>NL</name>
"#" <name>NL</name>
"#If the hook program exits with success, the lock is created; but" <name>NL</name>
"#if it exits with failure (non-zero), the lock action is aborted" <name>NL</name>
"#and STDERR is returned to the client." <name>NL</name>
"" <name>NL</name>
"#On a Unix system, the normal procedure is to have '"<name>SCRIPT_NAME</name>"'" <name>NL</name>
"#invoke other programs to do the real work, though it may do the" <name>NL</name>
"#work itself too." <name>NL</name>
"#" <name>NL</name>
"#Note that '"<name>SCRIPT_NAME</name>"' must be executable by the user(s) who will" <name>NL</name>
"#invoke it (typically the user httpd runs as), and that user must" <name>NL</name>
"#have filesystem-level permission to access the repository." <name>NL</name>
"#" <name>NL</name>
"#On a Windows system, you should name the hook program" <name>NL</name>
"#'"<name>SCRIPT_NAME</name>".bat' or '"<name>SCRIPT_NAME</name>".exe'," <name>NL</name>
"#but the basic idea is the same." <name>NL</name>
"#" <name>NL</name>
"#Here is an example hook script, for a Unix /bin/sh interpreter:" <name>NL</name>
"" <name>NL</name>
"REPOS=\"$1\"" <name>NL</name>
"PATH=\"$2\"" <name>NL</name>
"USER=\"$3\"" <name>NL</name>
"" <name>NL</name>
"#If a lock exists and is owned by a different person, don't allow it" <name>NL</name>
"#to be stolen (e.g., with 'svn lock --force ...')." <name>NL</name>
"" <name>NL</name>
"#(Maybe this script could send email to the lock owner?)" <name>NL</name>
"SVNLOOK=" <name>SVN_BINDIR</name> "/svnlook" <name>NL</name>
"GREP=/bin/grep" <name>NL</name>
"SED=/bin/sed" <name>NL</name>
"" <name>NL</name>
"LOCK_OWNER=`$SVNLOOK lock \"$REPOS\" \"$PATH\" | \\" <name>NL</name>
" $GREP '^Owner: ' | $SED 's/Owner: //'`" <name>NL</name>
"" <name>NL</name>
"#If we get no result from svnlook, there's no lock, allow the lock to" <name>NL</name>
"#happen:" <name>NL</name>
"if [ \"$LOCK_OWNER\" = \"\" ]; then" <name>NL</name>
" exit 0" <name>NL</name>
"fi" <name>NL</name>
"" <name>NL</name>
"#If the person locking matches the lock's owner, allow the lock to" <name>NL</name>
"#happen:" <name>NL</name>
"if [ \"$LOCK_OWNER\" = \"$USER\" ]; then" <name>NL</name>
" exit 0" <name>NL</name>
"fi" <name>NL</name>
"" <name>NL</name>
"#Otherwise, we've got an owner mismatch, so return failure:" <name>NL</name>
"echo \"Error: $PATH already locked by ${LOCK_OWNER}.\" 1&gt;&amp;2" <name>NL</name>
"exit 1" <name>NL</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCRIPT_NAME</name></cpp:undef>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"Creating pre-lock hook"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<expr_stmt><expr><name>this_path</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
<argument><expr><call><name>svn_repos_pre_unlock_hook</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_REPOS__HOOK_DESC_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_NAME</name></cpp:macro> <cpp:value>SVN_REPOS__HOOK_PRE_UNLOCK</cpp:value></cpp:define>
<expr_stmt><expr><name>contents</name> =
"#!/bin/sh" <name>NL</name>
"" <name>NL</name>
"#PRE-UNLOCK HOOK" <name>NL</name>
"#" <name>NL</name>
"#The pre-unlock hook is invoked before an exclusive lock is" <name>NL</name>
"#destroyed. Subversion runs this hook by invoking a program " <name>NL</name>
"#(script, executable, binary, etc.) named '"<name>SCRIPT_NAME</name>"' (for which" <name>NL</name>
"#this file is a template), with the following ordered arguments:" <name>NL</name>
"#" <name>NL</name>
"#[1] REPOS-PATH (the path to this repository)" <name>NL</name>
"#[2] PATH (the path in the repository about to be unlocked)" <name>NL</name>
"#[3] USER (the user destroying the lock)" <name>NL</name>
"#" <name>NL</name>
"#The default working directory for the invocation is undefined, so" <name>NL</name>
"#the program should set one explicitly if it cares." <name>NL</name>
"#" <name>NL</name>
"#If the hook program exits with success, the lock is destroyed; but" <name>NL</name>
"#if it exits with failure (non-zero), the unlock action is aborted" <name>NL</name>
"#and STDERR is returned to the client." <name>NL</name>
"" <name>NL</name>
"#On a Unix system, the normal procedure is to have '"<name>SCRIPT_NAME</name>"'" <name>NL</name>
"#invoke other programs to do the real work, though it may do the" <name>NL</name>
"#work itself too." <name>NL</name>
"#" <name>NL</name>
"#Note that '"<name>SCRIPT_NAME</name>"' must be executable by the user(s) who will" <name>NL</name>
"#invoke it (typically the user httpd runs as), and that user must" <name>NL</name>
"#have filesystem-level permission to access the repository." <name>NL</name>
"#" <name>NL</name>
"#On a Windows system, you should name the hook program" <name>NL</name>
"#'"<name>SCRIPT_NAME</name>".bat' or '"<name>SCRIPT_NAME</name>".exe'," <name>NL</name>
"#but the basic idea is the same." <name>NL</name>
"#" <name>NL</name>
"#Here is an example hook script, for a Unix /bin/sh interpreter:" <name>NL</name>
"" <name>NL</name>
"REPOS=\"$1\"" <name>NL</name>
"PATH=\"$2\"" <name>NL</name>
"USER=\"$3\"" <name>NL</name>
"" <name>NL</name>
"#If a lock is owned by a different person, don't allow it be broken." <name>NL</name>
"#(Maybe this script could send email to the lock owner?)" <name>NL</name>
"" <name>NL</name>
"SVNLOOK=" <name>SVN_BINDIR</name> "/svnlook" <name>NL</name>
"GREP=/bin/grep" <name>NL</name>
"SED=/bin/sed" <name>NL</name>
"" <name>NL</name>
"LOCK_OWNER=`$SVNLOOK lock \"$REPOS\" \"$PATH\" | \\" <name>NL</name>
" $GREP '^Owner: ' | $SED 's/Owner: //'`" <name>NL</name>
"" <name>NL</name>
"#If we get no result from svnlook, there's no lock, return success:" <name>NL</name>
"if [ \"$LOCK_OWNER\" = \"\" ]; then" <name>NL</name>
" exit 0" <name>NL</name>
"fi" <name>NL</name>
"" <name>NL</name>
"#If the person unlocking matches the lock's owner, return success:" <name>NL</name>
"if [ \"$LOCK_OWNER\" = \"$USER\" ]; then" <name>NL</name>
" exit 0" <name>NL</name>
"fi" <name>NL</name>
"" <name>NL</name>
"#Otherwise, we've got an owner mismatch, so return failure:" <name>NL</name>
"echo \"Error: $PATH locked by ${LOCK_OWNER}.\" 1&gt;&amp;2" <name>NL</name>
"exit 1" <name>NL</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCRIPT_NAME</name></cpp:undef>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"Creating pre-unlock hook"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<expr_stmt><expr><name>this_path</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
<argument><expr><call><name>svn_repos_post_commit_hook</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_REPOS__HOOK_DESC_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_NAME</name></cpp:macro> <cpp:value>SVN_REPOS__HOOK_POST_COMMIT</cpp:value></cpp:define>
<expr_stmt><expr><name>contents</name> =
"#!/bin/sh" <name>NL</name>
"" <name>NL</name>
"#POST-COMMIT HOOK" <name>NL</name>
"#" <name>NL</name>
"#The post-commit hook is invoked after a commit. Subversion runs" <name>NL</name>
"#this hook by invoking a program (script, executable, binary, etc.)" <name>NL</name>
"#named '"<name>SCRIPT_NAME</name>"' (for which this file is a template) with the " <name>NL</name>
"#following ordered arguments:" <name>NL</name>
"#" <name>NL</name>
"#[1] REPOS-PATH (the path to this repository)" <name>NL</name>
"#[2] REV (the number of the revision just committed)" <name>NL</name>
"#" <name>NL</name>
"#The default working directory for the invocation is undefined, so" <name>NL</name>
"#the program should set one explicitly if it cares." <name>NL</name>
"#" <name>NL</name>
"#Because the commit has already completed and cannot be undone," <name>NL</name>
"#the exit code of the hook program is ignored. The hook program" <name>NL</name>
"#can use the 'svnlook' utility to help it examine the" <name>NL</name>
"#newly-committed tree." <name>NL</name>
"#" <name>NL</name>
"#On a Unix system, the normal procedure is to have '"<name>SCRIPT_NAME</name>"'" <name>NL</name>
"#invoke other programs to do the real work, though it may do the" <name>NL</name>
"#work itself too." <name>NL</name>
"#" <name>NL</name>
"#Note that '"<name>SCRIPT_NAME</name>"' must be executable by the user(s) who will" <name>NL</name>
"#invoke it (typically the user httpd runs as), and that user must" <name>NL</name>
"#have filesystem-level permission to access the repository." <name>NL</name>
"#" <name>NL</name>
"#On a Windows system, you should name the hook program" <name>NL</name>
"#'"<name>SCRIPT_NAME</name>".bat' or '"<name>SCRIPT_NAME</name>".exe'," <name>NL</name>
"#but the basic idea is the same." <name>NL</name>
"#" <name>NL</name>
<name>HOOKS_ENVIRONMENT_TEXT</name>
"#" <name>NL</name>
"#Here is an example hook script, for a Unix /bin/sh interpreter." <name>NL</name>
<name>PREWRITTEN_HOOKS_TEXT</name>
"" <name>NL</name>
"" <name>NL</name>
"REPOS=\"$1\"" <name>NL</name>
"REV=\"$2\"" <name>NL</name>
<name>NL</name>
"commit-email.pl \"$REPOS\" \"$REV\" commit-watchers@example.org" <name>NL</name>
"log-commit.py --repository \"$REPOS\" --revision \"$REV\"" <name>NL</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCRIPT_NAME</name></cpp:undef>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating post-commit hook"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<expr_stmt><expr><name>this_path</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
<argument><expr><call><name>svn_repos_post_lock_hook</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_REPOS__HOOK_DESC_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_NAME</name></cpp:macro> <cpp:value>SVN_REPOS__HOOK_POST_LOCK</cpp:value></cpp:define>
<expr_stmt><expr><name>contents</name> =
"#!/bin/sh" <name>NL</name>
"" <name>NL</name>
"#POST-LOCK HOOK" <name>NL</name>
"#" <name>NL</name>
"#The post-lock hook is run after a path is locked. Subversion runs" <name>NL</name>
"#this hook by invoking a program (script, executable, binary, etc.)" <name>NL</name>
"#named '"<name>SCRIPT_NAME</name>"' (for which this file is a template) with the " <name>NL</name>
"#following ordered arguments:" <name>NL</name>
"#" <name>NL</name>
"#[1] REPOS-PATH (the path to this repository)" <name>NL</name>
"#[2] USER (the user who created the lock)" <name>NL</name>
"#" <name>NL</name>
"#The paths that were just locked are passed to the hook via STDIN (as" <name>NL</name>
"#of Subversion 1.2, only one path is passed per invocation, but the" <name>NL</name>
"#plan is to pass all locked paths at once, so the hook program" <name>NL</name>
"#should be written accordingly)." <name>NL</name>
"#" <name>NL</name>
"#The default working directory for the invocation is undefined, so" <name>NL</name>
"#the program should set one explicitly if it cares." <name>NL</name>
"#" <name>NL</name>
"#Because the lock has already been created and cannot be undone," <name>NL</name>
"#the exit code of the hook program is ignored. The hook program" <name>NL</name>
"#can use the 'svnlook' utility to help it examine the" <name>NL</name>
"#newly-created lock." <name>NL</name>
"#" <name>NL</name>
"#On a Unix system, the normal procedure is to have '"<name>SCRIPT_NAME</name>"'" <name>NL</name>
"#invoke other programs to do the real work, though it may do the" <name>NL</name>
"#work itself too." <name>NL</name>
"#" <name>NL</name>
"#Note that '"<name>SCRIPT_NAME</name>"' must be executable by the user(s) who will" <name>NL</name>
"#invoke it (typically the user httpd runs as), and that user must" <name>NL</name>
"#have filesystem-level permission to access the repository." <name>NL</name>
"#" <name>NL</name>
"#On a Windows system, you should name the hook program" <name>NL</name>
"#'"<name>SCRIPT_NAME</name>".bat' or '"<name>SCRIPT_NAME</name>".exe'," <name>NL</name>
"#but the basic idea is the same." <name>NL</name>
"#" <name>NL</name>
"#Here is an example hook script, for a Unix /bin/sh interpreter:" <name>NL</name>
"" <name>NL</name>
"REPOS=\"$1\"" <name>NL</name>
"USER=\"$2\"" <name>NL</name>
"" <name>NL</name>
"#Send email to interested parties, let them know a lock was created:" <name>NL</name>
"mailer.py lock \"$REPOS\" \"$USER\" /path/to/mailer.conf" <name>NL</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCRIPT_NAME</name></cpp:undef>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"Creating post-lock hook"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<expr_stmt><expr><name>this_path</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
<argument><expr><call><name>svn_repos_post_unlock_hook</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_REPOS__HOOK_DESC_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_NAME</name></cpp:macro> <cpp:value>SVN_REPOS__HOOK_POST_UNLOCK</cpp:value></cpp:define>
<expr_stmt><expr><name>contents</name> =
"#!/bin/sh" <name>NL</name>
"" <name>NL</name>
"#POST-UNLOCK HOOK" <name>NL</name>
"#" <name>NL</name>
"#The post-unlock hook runs after a path is unlocked. Subversion runs" <name>NL</name>
"#this hook by invoking a program (script, executable, binary, etc.)" <name>NL</name>
"#named '"<name>SCRIPT_NAME</name>"' (for which this file is a template) with the " <name>NL</name>
"#following ordered arguments:" <name>NL</name>
"#" <name>NL</name>
"#[1] REPOS-PATH (the path to this repository)" <name>NL</name>
"#[2] USER (the user who destroyed the lock)" <name>NL</name>
"#" <name>NL</name>
"#The paths that were just unlocked are passed to the hook via STDIN" <name>NL</name>
"#(as of Subversion 1.2, only one path is passed per invocation, but" <name>NL</name>
"#the plan is to pass all unlocked paths at once, so the hook program" <name>NL</name>
"#should be written accordingly)." <name>NL</name>
"#" <name>NL</name>
"#The default working directory for the invocation is undefined, so" <name>NL</name>
"#the program should set one explicitly if it cares." <name>NL</name>
"#" <name>NL</name>
"#Because the lock has already been destroyed and cannot be undone," <name>NL</name>
"#the exit code of the hook program is ignored." <name>NL</name>
"#" <name>NL</name>
"#On a Unix system, the normal procedure is to have '"<name>SCRIPT_NAME</name>"'" <name>NL</name>
"#invoke other programs to do the real work, though it may do the" <name>NL</name>
"#work itself too." <name>NL</name>
"#" <name>NL</name>
"#Note that '"<name>SCRIPT_NAME</name>"' must be executable by the user(s) who will" <name>NL</name>
"#invoke it (typically the user httpd runs as), and that user must" <name>NL</name>
"#have filesystem-level permission to access the repository." <name>NL</name>
"#" <name>NL</name>
"#On a Windows system, you should name the hook program" <name>NL</name>
"#'"<name>SCRIPT_NAME</name>".bat' or '"<name>SCRIPT_NAME</name>".exe'," <name>NL</name>
"#but the basic idea is the same." <name>NL</name>
"#" <name>NL</name>
"#Here is an example hook script, for a Unix /bin/sh interpreter:" <name>NL</name>
"" <name>NL</name>
"REPOS=\"$1\"" <name>NL</name>
"USER=\"$2\"" <name>NL</name>
"" <name>NL</name>
"#Send email to interested parties, let them know a lock was removed:" <name>NL</name>
"mailer.py unlock \"$REPOS\" \"$USER\" /path/to/mailer.conf" <name>NL</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCRIPT_NAME</name></cpp:undef>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"Creating post-unlock hook"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<expr_stmt><expr><name>this_path</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>,
<argument><expr><call><name>svn_repos_post_revprop_change_hook</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_REPOS__HOOK_DESC_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_NAME</name></cpp:macro> <cpp:value>SVN_REPOS__HOOK_POST_REVPROP_CHANGE</cpp:value></cpp:define>
<expr_stmt><expr><name>contents</name> =
"#!/bin/sh" <name>NL</name>
"" <name>NL</name>
"#POST-REVPROP-CHANGE HOOK" <name>NL</name>
"#" <name>NL</name>
"#The post-revprop-change hook is invoked after a revision property" <name>NL</name>
"#has been added, modified or deleted. Subversion runs this hook by" <name>NL</name>
"#invoking a program (script, executable, binary, etc.) named" <name>NL</name>
"#'"<name>SCRIPT_NAME</name>"' (for which this file is a template), with the" <name>NL</name>
"#following ordered arguments:" <name>NL</name>
"#" <name>NL</name>
"#[1] REPOS-PATH (the path to this repository)" <name>NL</name>
"#[2] REV (the revision that was tweaked)" <name>NL</name>
"#[3] USER (the username of the person tweaking the property)" <name>NL</name>
"#[4] PROPNAME (the property that was changed)" <name>NL</name>
"#[5] ACTION (the property was 'A'dded, 'M'odified, or 'D'eleted)" <name>NL</name>
"#" <name>NL</name>
"#[STDIN] PROPVAL ** the old property value is passed via STDIN." <name>NL</name>
"#" <name>NL</name>
"#Because the propchange has already completed and cannot be undone," <name>NL</name>
"#the exit code of the hook program is ignored. The hook program" <name>NL</name>
"#can use the 'svnlook' utility to help it examine the" <name>NL</name>
"#new property value." <name>NL</name>
"#" <name>NL</name>
"#On a Unix system, the normal procedure is to have '"<name>SCRIPT_NAME</name>"'" <name>NL</name>
"#invoke other programs to do the real work, though it may do the" <name>NL</name>
"#work itself too." <name>NL</name>
"#" <name>NL</name>
"#Note that '"<name>SCRIPT_NAME</name>"' must be executable by the user(s) who will" <name>NL</name>
"#invoke it (typically the user httpd runs as), and that user must" <name>NL</name>
"#have filesystem-level permission to access the repository." <name>NL</name>
"#" <name>NL</name>
"#On a Windows system, you should name the hook program" <name>NL</name>
"#'"<name>SCRIPT_NAME</name>".bat' or '"<name>SCRIPT_NAME</name>".exe'," <name>NL</name>
"#but the basic idea is the same." <name>NL</name>
"#" <name>NL</name>
<name>HOOKS_ENVIRONMENT_TEXT</name>
"#" <name>NL</name>
"#Here is an example hook script, for a Unix /bin/sh interpreter." <name>NL</name>
<name>PREWRITTEN_HOOKS_TEXT</name>
"" <name>NL</name>
"" <name>NL</name>
"REPOS=\"$1\"" <name>NL</name>
"REV=\"$2\"" <name>NL</name>
"USER=\"$3\"" <name>NL</name>
"PROPNAME=\"$4\"" <name>NL</name>
"ACTION=\"$5\"" <name>NL</name>
"" <name>NL</name>
"commit-email.pl --revprop-change \"$REPOS\" \"$REV\" \"$USER\" \"$PROPNAME\" "
"watchers@example.org" <name>NL</name></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCRIPT_NAME</name></cpp:undef>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating post-revprop-change hook"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_conf</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>create_repos_dir</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>conf_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating conf directory"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name>svnserve_conf_contents</name> <init>=
<expr>"###This file controls the configuration of the svnserve daemon, if you" <name>NL</name>
"###use it to allow access to this repository. (If you only allow" <name>NL</name>
"###access through http: and/or file: URLs, then this file is" <name>NL</name>
"###irrelevant.)" <name>NL</name>
"" <name>NL</name>
"###Visit http://subversion.tigris.org/ for more information." <name>NL</name>
"" <name>NL</name>
"[general]" <name>NL</name>
"###These options control access to the repository for unauthenticated" <name>NL</name>
"###and authenticated users. Valid values are \"write\", \"read\"," <name>NL</name>
"###and \"none\". The sample settings below are the defaults." <name>NL</name>
"#anon-access = read" <name>NL</name>
"#auth-access = write" <name>NL</name>
"###The password-db option controls the location of the password" <name>NL</name>
"###database file. Unless you specify a path starting with a /," <name>NL</name>
"###the file's location is relative to the directory containing" <name>NL</name>
"###this configuration file." <name>NL</name>
"###If SASL is enabled (see below), this file will NOT be used." <name>NL</name>
"###Uncomment the line below to use the default password file." <name>NL</name>
"#password-db = passwd" <name>NL</name>
"###The authz-db option controls the location of the authorization" <name>NL</name>
"###rules for path-based access control. Unless you specify a path" <name>NL</name>
"###starting with a /, the file's location is relative to the the" <name>NL</name>
"###directory containing this file. If you don't specify an" <name>NL</name>
"###authz-db, no path-based access control is done." <name>NL</name>
"###Uncomment the line below to use the default authorization file." <name>NL</name>
"#authz-db = " <name>SVN_REPOS__CONF_AUTHZ</name> <name>NL</name>
"###This option specifies the authentication realm of the repository." <name>NL</name>
"###If two repositories have the same authentication realm, they should" <name>NL</name>
"###have the same password database, and vice versa. The default realm" <name>NL</name>
"###is repository's uuid." <name>NL</name>
"#realm = My First Repository" <name>NL</name>
"" <name>NL</name>
"[sasl]" <name>NL</name>
"###This option specifies whether you want to use the Cyrus SASL" <name>NL</name>
"###library for authentication. Default is false." <name>NL</name>
"###This section will be ignored if svnserve is not built with Cyrus" <name>NL</name>
"###SASL support; to check, run 'svnserve --version' and look for a line" <name>NL</name>
"###reading 'Cyrus SASL authentication is available.'" <name>NL</name>
"#use-sasl = true" <name>NL</name>
"###These options specify the desired strength of the security layer" <name>NL</name>
"###that you want SASL to provide. 0 means no encryption, 1 means" <name>NL</name>
"###integrity-checking only, values larger than 1 are correlated" <name>NL</name>
"###to the effective key length for encryption (e.g. 128 means 128-bit" <name>NL</name>
"###encryption). The values below are the defaults." <name>NL</name>
"#min-encryption = 0" <name>NL</name>
"#max-encryption = 256" <name>NL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><call><name>svn_repos_svnserve_conf</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>svnserve_conf_contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating svnserve.conf file"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name>passwd_contents</name> <init>=
<expr>"###This file is an example password file for svnserve." <name>NL</name>
"###Its format is similar to that of svnserve.conf. As shown in the" <name>NL</name>
"###example below it contains one section labelled [users]." <name>NL</name>
"###The name and password for each user follow, one account per line." <name>NL</name>
"" <name>NL</name>
"[users]" <name>NL</name>
"#harry = harryssecret" <name>NL</name>
"#sally = sallyssecret" <name>NL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>conf_path</name></name></expr></argument>,
<argument><expr><name>SVN_REPOS__CONF_PASSWD</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>passwd_contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating passwd file"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name>authz_contents</name> <init>=
<expr>"###This file is an example authorization file for svnserve." <name>NL</name>
"###Its format is identical to that of mod_authz_svn authorization" <name>NL</name>
"###files." <name>NL</name>
"###As shown below each section defines authorizations for the path and" <name>NL</name>
"###(optional) repository specified by the section name." <name>NL</name>
"###The authorizations follow. An authorization line can refer to:" <name>NL</name>
"###- a single user," <name>NL</name>
"###- a group of users defined in a special [groups] section," <name>NL</name>
"###- an alias defined in a special [aliases] section," <name>NL</name>
"###- all authenticated users, using the '$authenticated' token," <name>NL</name>
"###- only anonymous users, using the '$anonymous' token," <name>NL</name>
"###- anyone, using the '*' wildcard." <name>NL</name>
"###" <name>NL</name>
"###A match can be inverted by prefixing the rule with '~'. Rules can" <name>NL</name>
"###grant read ('r') access, read-write ('rw') access, or no access" <name>NL</name>
"###('')." <name>NL</name>
"" <name>NL</name>
"[aliases]" <name>NL</name>
"#joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average" <name>NL</name>
"" <name>NL</name>
"[groups]" <name>NL</name>
"#harry_and_sally = harry,sally" <name>NL</name>
"#harry_sally_and_joe = harry,sally,&amp;joe" <name>NL</name>
"" <name>NL</name>
"#[/foo/bar]" <name>NL</name>
"#harry = rw" <name>NL</name>
"#&amp;joe = r" <name>NL</name>
"#* =" <name>NL</name>
"" <name>NL</name>
"#[repository:/baz/fuz]" <name>NL</name>
"#@harry_and_sally = rw" <name>NL</name>
"#* = r" <name>NL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>conf_path</name></name></expr></argument>,
<argument><expr><name>SVN_REPOS__CONF_AUTHZ</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>authz_contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating authz file"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_repos_t</name> *</type>
<name>create_svn_repos_t</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>repos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>repos</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>repos</name>-&gt;<name>db_path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_REPOS__DB_DIR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>repos</name>-&gt;<name>conf_path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_REPOS__CONF_DIR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>repos</name>-&gt;<name>hook_path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_REPOS__HOOK_DIR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>repos</name>-&gt;<name>lock_path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_REPOS__LOCK_DIR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>repos</name>-&gt;<name>repository_capabilities</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>repos</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_repos_structure</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>fs_config</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>create_repos_dir</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Could not create top-level directory"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fs_config</name>
&amp;&amp; (<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>fs_config</name></expr></argument>, <argument><expr><name>SVN_FS_CONFIG_PRE_1_4_COMPATIBLE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>
|| <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>fs_config</name></expr></argument>, <argument><expr><name>SVN_FS_CONFIG_PRE_1_5_COMPATIBLE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dav_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>SVN_REPOS__DAV_DIR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>create_repos_dir</name><argument_list>(<argument><expr><name>dav_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Creating DAV sandbox dir"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_locks</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_hooks</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_conf</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name>readme_header</name> <init>=
<expr>"This is a Subversion repository; use the 'svnadmin' tool to examine" <name>NL</name>
"it. Do not add, delete, or modify files here unless you know how" <name>NL</name>
"to avoid corrupting the repository." <name>NL</name>
"" <name>NL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name>readme_bdb_insert</name> <init>=
<expr>"The directory \"" <name>SVN_REPOS__DB_DIR</name> "\" contains a Berkeley DB environment." <name>NL</name>
"you may need to tweak the values in \"" <name>SVN_REPOS__DB_DIR</name> "/DB_CONFIG\" to match the" <name>NL</name>
"requirements of your site." <name>NL</name>
"" <name>NL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name>readme_footer</name> <init>=
<expr>"Visit http://subversion.tigris.org/ for more information." <name>NL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>written</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>,
<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_REPOS__README</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_EXCL</name>)</expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>readme_header</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>readme_header</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>written</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>SVN_FS_TYPE_BDB</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>readme_bdb_insert</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>readme_bdb_insert</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>written</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>readme_footer</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>readme_footer</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>written</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>lock_repos</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>exclusive</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>nonblocking</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>SVN_FS_TYPE_BDB</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lockfile_path</name> <init>= <expr><call><name>svn_repos_db_lockfile</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_file_lock2</name><argument_list>(<argument><expr><name>lockfile_path</name></expr></argument>, <argument><expr><name>exclusive</name></expr></argument>, <argument><expr><name>nonblocking</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name> &amp;&amp; <call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error opening db lockfile"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_create</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> **</type><name>repos_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>unused_1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>unused_2</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>fs_config</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>repos</name> = <call><name>create_svn_repos_t</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>repos</name>-&gt;<name>format</name></name> = <name>SVN_REPOS__FORMAT_NUMBER</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fs_config</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>repos</name>-&gt;<name>fs_type</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>fs_config</name></expr></argument>, <argument><expr><name>SVN_FS_CONFIG_FS_TYPE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>fs_config</name></expr></argument>, <argument><expr><name>SVN_FS_CONFIG_PRE_1_4_COMPATIBLE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>repos</name>-&gt;<name>format</name></name> = <name>SVN_REPOS__FORMAT_NUMBER_LEGACY</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr>! <name><name>repos</name>-&gt;<name>fs_type</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>repos</name>-&gt;<name>fs_type</name></name> = <name>DEFAULT_FS_TYPE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>create_repos_structure</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fs_config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Repository creation failed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lock_repos</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_fs_create</name><argument_list>(<argument><expr>&amp;<name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>db_path</name></name></expr></argument>, <argument><expr><name>fs_config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_remove_dir2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_write_version_file</name>
<argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_REPOS__FORMAT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>repos</name>-&gt;<name>format</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>repos_p</name> = <name>repos</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>check_repos_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_REPOS__FORMAT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>kind</name> != <name>svn_node_file</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_check_resolved_path</name>
<argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_REPOS__DB_DIR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>kind</name> != <name>svn_node_dir</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_repos_format</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format_path</name></decl>;</decl_stmt>
<expr_stmt><expr><name>format_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__FORMAT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_read_version_file</name><argument_list>(<argument><expr>&amp;<name>format</name></expr></argument>, <argument><expr><name>format_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>format</name> != <name>SVN_REPOS__FORMAT_NUMBER</name> &amp;&amp;
<name>format</name> != <name>SVN_REPOS__FORMAT_NUMBER_LEGACY</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_REPOS_UNSUPPORTED_VERSION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Expected repository format '%d' or '%d'; found format '%d'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_REPOS__FORMAT_NUMBER_LEGACY</name></expr></argument>, <argument><expr><name>SVN_REPOS__FORMAT_NUMBER</name></expr></argument>,
<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>repos</name>-&gt;<name>format</name></name> = <name>format</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_repos</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> **</type><name>repos_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>exclusive</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>nonblocking</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>open_fs</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<expr_stmt><expr><name>repos</name> = <call><name>create_svn_repos_t</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_repos_format</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_type</name><argument_list>(<argument><expr>&amp;<name><name>repos</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>db_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lock_repos</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>exclusive</name></expr></argument>, <argument><expr><name>nonblocking</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>open_fs</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_open</name><argument_list>(<argument><expr>&amp;<name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>db_path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>repos_p</name> = <name>repos</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_repos_find_root_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>candidate</name> <init>= <expr><name>path</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>decoded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>decoded</name></expr></argument>, <argument><expr><name>candidate</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>err</name> &amp;&amp; <call><name>check_repos_path</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>candidate</name><index>[<expr>0</expr>]</index></name> == '\0' ||
<call><name>svn_dirent_is_root</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>candidate</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>candidate</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_open</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> **</type><name>repos_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_repos</name><argument_list>(<argument><expr><name>repos_p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_upgrade</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>nonblocking</name></decl></param>,
<param><function_decl><type><name>svn_error_t</name> *</type>(*<name>start_callback</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>start_callback_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>nonblocking</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>start_callback</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>start_callback</name><argument_list>(<argument><expr><name>start_callback_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>format_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__FORMAT</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_read_version_file</name><argument_list>(<argument><expr>&amp;<name>format</name></expr></argument>, <argument><expr><name>format_path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_write_version_file</name><argument_list>(<argument><expr><name>format_path</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_upgrade</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>db_path</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_write_version_file</name><argument_list>(<argument><expr><name>format_path</name></expr></argument>, <argument><expr><name>SVN_REPOS__FORMAT_NUMBER</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_delete</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>db_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_REPOS__DB_DIR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete_fs</name><argument_list>(<argument><expr><name>db_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_dir2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>capability_yes</name> <init>= <expr>"yes"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>capability_no</name> <init>= <expr>"no"</expr></init></decl>;</decl_stmt>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_has_capability</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>has</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>capability</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>repository_capabilities</name></name></expr></argument>,
<argument><expr><name>capability</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>val</name> == <name>capability_yes</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>has</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>val</name> == <name>capability_no</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>has</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>capability</name></expr></argument>, <argument><expr><name>SVN_REPOS_CAPABILITY_MERGEINFO</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>ignored</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>paths</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_get_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>ignored</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>repository_capabilities</name></name></expr></argument>,
<argument><expr><name>SVN_REPOS_CAPABILITY_MERGEINFO</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>capability_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>has</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>repository_capabilities</name></name></expr></argument>,
<argument><expr><name>SVN_REPOS_CAPABILITY_MERGEINFO</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>capability_yes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>has</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>repository_capabilities</name></name></expr></argument>,
<argument><expr><name>SVN_REPOS_CAPABILITY_MERGEINFO</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>capability_yes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>has</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_UNKNOWN_CAPABILITY</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"unknown capability '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>capability</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_fs_t</name> *</type>
<name>svn_repos_fs</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <name>repos</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><name><name>repos</name>-&gt;<name>fs</name></name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_recover3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>nonblocking</name></decl></param>,
<param><function_decl><type><name>svn_error_t</name> *</type>(*<name>start_callback</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>start_callback_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>, <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>nonblocking</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>start_callback</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>start_callback</name><argument_list>(<argument><expr><name>start_callback_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_recover</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>db_path</name></name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_recover2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>nonblocking</name></decl></param>,
<param><function_decl><type><name>svn_error_t</name> *</type>(*<name>start_callback</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list></function_decl></param>,
<param><decl><type><name>void</name> *</type><name>start_callback_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_repos_recover3</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>nonblocking</name></expr></argument>,
<argument><expr><name>start_callback</name></expr></argument>, <argument><expr><name>start_callback_baton</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_recover</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_repos_recover2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_repos_db_logfiles</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>logfiles</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>only_unused</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_berkeley_logfiles</name><argument_list>(<argument><expr><name>logfiles</name></expr></argument>,
<argument><expr><call><name>svn_repos_db_env</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>only_unused</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>(*<name>logfiles</name>)-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type> <name>log_file</name> <init>= <expr>&amp;(<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr>*<name>logfiles</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>log_file</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>SVN_REPOS__DB_DIR</name></expr></argument>, <argument><expr>*<name>log_file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>hotcopy_ctx_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>src_len</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>hotcopy_structure</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_finfo_t</name> *</type><name>finfo</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> struct <name>hotcopy_ctx_t</name> *</type><name>ctx</name> <init>= <expr>((struct <name>hotcopy_ctx_t</name> *) <name>baton</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sub_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> == <name><name>ctx</name>-&gt;<name>src_len</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sub_path</name> = ""</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>sub_path</name> = &amp;<name><name>path</name><index>[<expr><name><name>ctx</name>-&gt;<name>src_len</name></name>+1</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_path_compare_paths</name>
<argument_list>(<argument><expr><call><name>svn_path_get_longest_ancestor</name><argument_list>(<argument><expr><name>SVN_REPOS__DB_DIR</name></expr></argument>, <argument><expr><name>sub_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_REPOS__DB_DIR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>svn_path_compare_paths</name>
<argument_list>(<argument><expr><call><name>svn_path_get_longest_ancestor</name><argument_list>(<argument><expr><name>SVN_REPOS__LOCK_DIR</name></expr></argument>, <argument><expr><name>sub_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_REPOS__LOCK_DIR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>svn_path_compare_paths</name>
<argument_list>(<argument><expr><call><name>svn_path_get_longest_ancestor</name><argument_list>(<argument><expr><name>SVN_REPOS__FORMAT</name></expr></argument>, <argument><expr><name>sub_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_REPOS__FORMAT</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
}</block></else></if>
<expr_stmt><expr><name>target</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>dest</name></name></expr></argument>, <argument><expr><name>sub_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>finfo</name>-&gt;<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_repos_dir</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>finfo</name>-&gt;<name>filetype</name></name> == <name>APR_REG</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_copy_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>lock_db_logs_file</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>exclusive</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>lock_file</name> <init>= <expr><call><name>svn_repos_db_logs_lockfile</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>create_db_logs_lock</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_lock2</name><argument_list>(<argument><expr><name>lock_file</name></expr></argument>, <argument><expr><name>exclusive</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_hotcopy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>clean_logs</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>src_repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>dst_repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>hotcopy_ctx_t</name></type> <name>hotcopy_context</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_repos</name><argument_list>(<argument><expr>&amp;<name>src_repos</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lock_db_logs_file</name><argument_list>(<argument><expr><name>src_repos</name></expr></argument>, <argument><expr><name>clean_logs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotcopy_context</name>.<name>dest</name></name> = <name>dst_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hotcopy_context</name>.<name>src_len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_dir_walk</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>hotcopy_structure</name></expr></argument>,
<argument><expr>&amp;<name>hotcopy_context</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst_repos</name> = <call><name>create_svn_repos_t</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_repos</name>-&gt;<name>fs_type</name></name> = <name><name>src_repos</name>-&gt;<name>fs_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst_repos</name>-&gt;<name>format</name></name> = <name><name>src_repos</name>-&gt;<name>format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_locks</name><argument_list>(<argument><expr><name>dst_repos</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_dir_make_sgid</name><argument_list>(<argument><expr><name><name>dst_repos</name>-&gt;<name>db_path</name></name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lock_repos</name><argument_list>(<argument><expr><name>dst_repos</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_hotcopy</name><argument_list>(<argument><expr><name><name>src_repos</name>-&gt;<name>db_path</name></name></expr></argument>, <argument><expr><name><name>dst_repos</name>-&gt;<name>db_path</name></name></expr></argument>,
<argument><expr><name>clean_logs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_write_version_file</name>
<argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>dst_repos</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>SVN_REPOS__FORMAT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>dst_repos</name>-&gt;<name>format</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>svn_version_t</name> *</type>
<name>svn_repos_version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>SVN_VERSION_BODY</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_stat</name><parameter_list>(<param><decl><type><name>svn_dirent_t</name> **</type><name>dirent</name></decl></param>,
<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>datestring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>prophash</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_check_path</name><argument_list>(<argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>dirent</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ent</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ent</name>-&gt;<name>kind</name></name> = <name>kind</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_file_length</name><argument_list>(<argument><expr>&amp;(<name><name>ent</name>-&gt;<name>size</name></name>)</expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_proplist</name><argument_list>(<argument><expr>&amp;<name>prophash</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>prophash</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><name><name>ent</name>-&gt;<name>has_props</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_get_committed_info</name><argument_list>(<argument><expr>&amp;(<name><name>ent</name>-&gt;<name>created_rev</name></name>)</expr></argument>,
<argument><expr>&amp;<name>datestring</name></expr></argument>,
<argument><expr>&amp;(<name><name>ent</name>-&gt;<name>last_author</name></name>)</expr></argument>,
<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>datestring</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;(<name><name>ent</name>-&gt;<name>time</name></name>)</expr></argument>, <argument><expr><name>datestring</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>dirent</name> = <name>ent</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_remember_client_capabilities</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>capabilities</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>repos</name>-&gt;<name>client_capabilities</name></name> = <name>capabilities</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
