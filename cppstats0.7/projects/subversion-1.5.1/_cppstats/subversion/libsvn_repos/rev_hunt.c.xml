<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_repos/rev_hunt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_sorts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_time</name><parameter_list>(<param><decl><type><name>apr_time_t</name> *</type><name>tm</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>date_str</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr>&amp;<name>date_str</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>date_str</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to find time on revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name><name>date_str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_dated_revision</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>apr_time_t</name></type> <name>tm</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev_mid</name></decl>, <decl><type ref="prev"/><name>rev_top</name></decl>, <decl><type ref="prev"/><name>rev_bot</name></decl>, <decl><type ref="prev"/><name>rev_latest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>this_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>rev_latest</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rev_bot</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>rev_top</name> = <name>rev_latest</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rev_bot</name> &lt;= <name>rev_top</name></expr>)</condition> <block>{
<expr_stmt><expr><name>rev_mid</name> = (<name>rev_top</name> + <name>rev_bot</name>) / 2</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_time</name><argument_list>(<argument><expr>&amp;<name>this_time</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev_mid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>this_time</name> &gt; <name>tm</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>previous_time</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rev_mid</name> - 1) &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>revision</name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_time</name><argument_list>(<argument><expr>&amp;<name>previous_time</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev_mid</name> - 1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>previous_time</name> &lt;= <name>tm</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>revision</name> = <name>rev_mid</name> - 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>rev_top</name> = <name>rev_mid</name> - 1</expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name>this_time</name> &lt; <name>tm</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>next_time</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rev_mid</name> + 1) &gt; <name>rev_latest</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>revision</name> = <name>rev_latest</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_time</name><argument_list>(<argument><expr>&amp;<name>next_time</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev_mid</name> + 1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>next_time</name> &gt; <name>tm</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>revision</name> = <name>rev_mid</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>rev_bot</name> = <name>rev_mid</name> + 1</expr>;</expr_stmt>
}</block></then>
<else>else <block>{
<expr_stmt><expr>*<name>revision</name> = <name>rev_mid</name></expr>;</expr_stmt>
<break>break;</break>
}</block></else></if></else></if>
}</block></while>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_committed_info</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>committed_rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>committed_date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>last_author</name></decl></param>,
<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><call><name>svn_fs_root_fs</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>committed_date_s</name></decl>, *<decl><type ref="prev"/><name>last_author_s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_created_rev</name><argument_list>(<argument><expr><name>committed_rev</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr>&amp;<name>committed_date_s</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>*<name>committed_rev</name></expr></argument>,
<argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr>&amp;<name>last_author_s</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>*<name>committed_rev</name></expr></argument>,
<argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>committed_date</name> = <name>committed_date_s</name> ? <name><name>committed_date_s</name>-&gt;<name>data</name></name> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>last_author</name> = <name>last_author_s</name> ? <name><name>last_author_s</name>-&gt;<name>data</name></name> : <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_history</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_repos_history_func_t</name></type> <name>history_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>history_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>cross_copies</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_repos_history2</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>history_func</name></expr></argument>, <argument><expr><name>history_baton</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>cross_copies</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_history2</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_repos_history_func_t</name></type> <name>history_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>history_baton</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>cross_copies</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_history_t</name> *</type><name>history</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>oldpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>newpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>history_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>history_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_NO_SUCH_REVISION</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid start revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_NO_SUCH_REVISION</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid end revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>start</name> &gt; <name>end</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>tmprev</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>start</name> = <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> = <name>tmprev</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_AUTHZ_UNREADABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_history</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>oldpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmppool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_prev</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>history</name></expr></argument>, <argument><expr><name>cross_copies</name></expr></argument>, <argument><expr><name>newpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>history</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_location</name><argument_list>(<argument><expr>&amp;<name>history_path</name></expr></argument>, <argument><expr>&amp;<name>history_rev</name></expr></argument>,
<argument><expr><name>history</name></expr></argument>, <argument><expr><name>newpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>history_rev</name> &lt; <name>start</name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>history_root</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>history_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>history_rev</name></expr></argument>, <argument><expr><name>newpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>history_root</name></expr></argument>, <argument><expr><name>history_path</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>newpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>history_func</name><argument_list>(<argument><expr><name>history_baton</name></expr></argument>, <argument><expr><name>history_path</name></expr></argument>, <argument><expr><name>history_rev</name></expr></argument>, <argument><expr><name>newpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CEASE_INVOCATION</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then> <else>else <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>oldpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmppool</name> = <name>oldpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>oldpool</name> = <name>newpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newpool</name> = <name>tmppool</name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>history</name></expr>)</condition>;</do>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>oldpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>newpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_deleted_rev</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>deleted</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>, *<decl><type ref="prev"/><name>copy_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>mid_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>start_node_id</name></decl>, *<decl><type ref="prev"/><name>curr_node_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_NO_SUCH_REVISION</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid start revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_NO_SUCH_REVISION</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid end revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>start</name> &gt; <name>end</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>tmprev</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>start</name> = <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> = <name>tmprev</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>start_node_id</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>deleted</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>curr_node_id</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>curr_node_id</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_fs_compare_ids</name><argument_list>(<argument><expr><name>start_node_id</name></expr></argument>, <argument><expr><name>curr_node_id</name></expr></argument>)</argument_list></call> != -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>copy_root</name></expr></argument>, <argument><expr>&amp;<name>copy_path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>copy_root</name> ||
(<call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>copy_root</name></expr></argument>)</argument_list></call> &lt;= <name>start</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>deleted</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></else></if></else></if>
<expr_stmt><expr><name>mid_rev</name> = (<name>start</name> + <name>end</name>) / 2</expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>mid_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>curr_node_id</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> = <name>mid_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mid_rev</name> = (<name>start</name> + <name>mid_rev</name>) / 2</expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><name>err</name></expr>;</return></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>svn_fs_compare_ids</name><argument_list>(<argument><expr><name>start_node_id</name></expr></argument>, <argument><expr><name>curr_node_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>copy_root</name></expr></argument>, <argument><expr>&amp;<name>copy_path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmp</name> == -1 ||
(<name>copy_root</name> &amp;&amp;
(<call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>copy_root</name></expr></argument>)</argument_list></call> &gt; <name>start</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>end</name> = <name>mid_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mid_rev</name> = (<name>start</name> + <name>mid_rev</name>) / 2</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>end</name> - <name>mid_rev</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>deleted</name> = <name>end</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>start</name> = <name>mid_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mid_rev</name> = (<name>start</name> + <name>end</name>) / 2</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></else></if>
}</block></while>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_readability</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_AUTHZ_UNREADABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unreadable path encountered; access denied"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_ancestry_of_peg_path</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>is_ancestor</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>future_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_history_t</name> *</type><name>history</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>lastpool</name></decl>, *<decl><type ref="prev"/><name>currpool</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lastpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>currpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>future_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_history</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>lastpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs_path</name> = <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmppool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_prev</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>history</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>history</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_location</name><argument_list>(<argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>revision</name></expr></argument>, <argument><expr><name>history</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fs_path</name></expr>)</condition><then>
<expr_stmt><expr><name>fs_path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>revision</name> &lt;= <name>peg_revision</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>lastpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmppool</name> = <name>lastpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lastpool</name> = <name>currpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>currpool</name> = <name>tmppool</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fs_path</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>is_ancestor</name> = (<name>history</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>)</argument_list></call> == 0)</expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos__prev_location</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>appeared_rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>prev_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>prev_rev</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>, *<decl><type ref="prev"/><name>copy_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_path</name></decl>, *<decl><type ref="prev"/><name>copy_src_path</name></decl>, *<decl><type ref="prev"/><name>remainder</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copy_src_rev</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>appeared_rev</name></expr>)</condition><then>
<expr_stmt><expr>*<name>appeared_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>prev_rev</name></expr>)</condition><then>
<expr_stmt><expr>*<name>prev_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>prev_path</name></expr>)</condition><then>
<expr_stmt><expr>*<name>prev_path</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>copy_root</name></expr></argument>, <argument><expr>&amp;<name>copy_path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>copy_root</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>copy_src_rev</name></expr></argument>, <argument><expr>&amp;<name>copy_src_path</name></expr></argument>,
<argument><expr><name>copy_root</name></expr></argument>, <argument><expr><name>copy_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>copy_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>remainder</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>copy_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>prev_path</name></expr>)</condition><then>
<expr_stmt><expr>*<name>prev_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>copy_src_path</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>appeared_rev</name></expr>)</condition><then>
<expr_stmt><expr>*<name>appeared_rev</name> = <call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>copy_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>prev_rev</name></expr>)</condition><then>
<expr_stmt><expr>*<name>prev_rev</name> = <name>copy_src_rev</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_trace_node_locations</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>locations</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>location_revisions_orig</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>location_revisions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>revision_ptr</name></decl>, *<decl><type ref="prev"/><name>revision_ptr_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_ancestor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>lastpool</name></decl>, *<decl><type ref="prev"/><name>currpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>location_revisions_orig</name>-&gt;<name>elt_size</name></name> == <sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>fs_path</name> != '/'</expr>)</condition><then>
<expr_stmt><expr><name>fs_path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>peg_root</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>peg_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_readability</name><argument_list>(<argument><expr><name>peg_root</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>locations</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lastpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>currpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>location_revisions</name> = <call><name>apr_array_copy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>location_revisions_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>location_revisions</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>location_revisions</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>revision_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>svn_sort_compare_revisions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision_ptr</name> = (<name>svn_revnum_t</name> *)<name><name>location_revisions</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>revision_ptr_end</name> = <name>revision_ptr</name> + <name><name>location_revisions</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_ancestor</name> = <name>FALSE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>revision_ptr</name> &lt; <name>revision_ptr_end</name> &amp;&amp; *<name>revision_ptr</name> &gt; <name>peg_revision</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_ancestry_of_peg_path</name><argument_list>(<argument><expr>&amp;<name>is_ancestor</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>, <argument><expr>*<name>revision_ptr</name></expr></argument>,
<argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_ancestor</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr>++<name>revision_ptr</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>revision</name> = <name>is_ancestor</name> ? *<name>revision_ptr</name> : <name>peg_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <name>fs_path</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_readability</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr><name>revision_ptr</name> &lt; <name>revision_ptr_end</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmppool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>appeared_rev</name></decl>, <decl><type ref="prev"/><name>prev_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prev_path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos__prev_location</name><argument_list>(<argument><expr>&amp;<name>appeared_rev</name></expr></argument>, <argument><expr>&amp;<name>prev_path</name></expr></argument>, <argument><expr>&amp;<name>prev_rev</name></expr></argument>,
<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>prev_path</name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>tmp_root</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>tmp_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>tmp_root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<while>while <condition>(<expr>(<name>revision_ptr</name> &lt; <name>revision_ptr_end</name>)
&amp;&amp; (*<name>revision_ptr</name> &gt;= <name>appeared_rev</name>)</expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>locations</name></expr></argument>, <argument><expr><name>revision_ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>revision_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision_ptr</name>++</expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr>(<name>revision_ptr</name> &lt; <name>revision_ptr_end</name>)
&amp;&amp; (*<name>revision_ptr</name> &gt; <name>prev_rev</name>)</expr>)</condition>
<expr_stmt><expr><name>revision_ptr</name>++</expr>;</expr_stmt></while>
<expr_stmt><expr><name>path</name> = <name>prev_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>revision</name> = <name>prev_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>lastpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmppool</name> = <name>lastpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lastpool</name> = <name>currpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>currpool</name> = <name>tmppool</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>id</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>revision_ptr</name> &lt; <name>revision_ptr_end</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>lrev_id</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>*<name>revision_ptr</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_check_path</name><argument_list>(<argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>lrev_id</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>svn_fs_check_related</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>lrev_id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>locations</name></expr></argument>, <argument><expr><name>revision_ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>revision_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision_ptr</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>lastpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>currpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>maybe_crop_and_send_segment</name><parameter_list>(<param><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl></param>,
<param><decl><type><name>svn_location_segment_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! ((<name><name>segment</name>-&gt;<name>range_start</name></name> &gt; <name>start_rev</name>)
|| (<name><name>segment</name>-&gt;<name>range_end</name></name> &lt; <name>end_rev</name>))</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>segment</name>-&gt;<name>range_start</name></name> &lt; <name>end_rev</name></expr>)</condition><then>
<expr_stmt><expr><name><name>segment</name>-&gt;<name>range_start</name></name> = <name>end_rev</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>segment</name>-&gt;<name>range_end</name></name> &gt; <name>start_rev</name></expr>)</condition><then>
<expr_stmt><expr><name><name>segment</name>-&gt;<name>range_end</name></name> = <name>start_rev</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>receiver</name><argument_list>(<argument><expr><name>segment</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_node_location_segments</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl></param>,
<param><decl><type><name>svn_location_segment_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>current_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init>, <name>current_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>peg_revision</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>peg_revision</name> = <name>youngest_rev</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>start_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>youngest_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>start_rev</name> = <name>youngest_rev</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>start_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr><name>end_rev</name> = <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>end_rev</name></expr></argument>)</argument_list></call> ? <name>end_rev</name> : 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end_rev</name> &lt;= <name>start_rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>start_rev</name> &lt;= <name>peg_revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>path</name> != '/'</expr>)</condition><then>
<expr_stmt><expr><name>path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>peg_root</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>peg_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_readability</name><argument_list>(<argument><expr><name>peg_root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_rev</name> = <name>peg_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_path</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>current_rev</name> &gt;= <name>end_rev</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>appeared_rev</name></decl>, <decl><type ref="prev"/><name>prev_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cur_path</name></decl>, *<decl><type ref="prev"/><name>prev_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_path</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>current_path</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>current_path</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>segment</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>segment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>segment</name>-&gt;<name>range_end</name></name> = <name>current_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>segment</name>-&gt;<name>range_start</name></name> = <name>end_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>segment</name>-&gt;<name>path</name></name> = <name>cur_path</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos__prev_location</name><argument_list>(<argument><expr>&amp;<name>appeared_rev</name></expr></argument>, <argument><expr>&amp;<name>prev_path</name></expr></argument>, <argument><expr>&amp;<name>prev_rev</name></expr></argument>,
<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>current_rev</name></expr></argument>, <argument><expr><name>cur_path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>prev_path</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>revroot</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revroot</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>current_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_origin_rev</name><argument_list>(<argument><expr>&amp;(<name><name>segment</name>-&gt;<name>range_start</name></name>)</expr></argument>, <argument><expr><name>revroot</name></expr></argument>,
<argument><expr><name>cur_path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>segment</name>-&gt;<name>range_start</name></name> &lt; <name>end_rev</name></expr>)</condition><then>
<expr_stmt><expr><name><name>segment</name>-&gt;<name>range_start</name></name> = <name>end_rev</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>current_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>segment</name>-&gt;<name>range_start</name></name> = <name>appeared_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name>current_path</name></expr></argument>, <argument><expr><name>prev_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_rev</name> = <name>prev_rev</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>cur_rev_root</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>cur_rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name><name>segment</name>-&gt;<name>range_end</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>cur_rev_root</name></expr></argument>, <argument><expr><name><name>segment</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_crop_and_send_segment</name><argument_list>(<argument><expr><name>segment</name></expr></argument>, <argument><expr><name>start_rev</name></expr></argument>, <argument><expr><name>end_rev</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>current_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name><name>segment</name>-&gt;<name>range_start</name></name> - <name>current_rev</name> &gt; 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>gap_segment</name></decl>;</decl_stmt>
<expr_stmt><expr><name>gap_segment</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>gap_segment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gap_segment</name>-&gt;<name>range_end</name></name> = <name><name>segment</name>-&gt;<name>range_start</name></name> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>gap_segment</name>-&gt;<name>range_start</name></name> = <name>current_rev</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>gap_segment</name>-&gt;<name>path</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_crop_and_send_segment</name><argument_list>(<argument><expr><name>gap_segment</name></expr></argument>, <argument><expr><name>start_rev</name></expr></argument>, <argument><expr><name>end_rev</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_path_mergeinfo</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>mergeinfo</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>tmp_catalog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>paths</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>tmp_catalog</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>,
<argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>mergeinfo</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>tmp_catalog</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>mergeinfo</name></expr>)</condition><then>
<expr_stmt><expr>*<name>mergeinfo</name> = <call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr>*<name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>svn_boolean_t</name></type>
<name>is_path_in_hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>duplicate_path_revs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s:%ld"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ptr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>duplicate_path_revs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ptr</name> != <name>NULL</name></expr>;</return>
}</block></function>
<struct>struct <name>path_revision</name> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>merged_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>merged</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_merged_mergeinfo</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>merged_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type>struct <name>path_revision</name> *</type><name>old_path_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>curr_mergeinfo</name></decl>, *<decl><type ref="prev"/><name>prev_mergeinfo</name></decl>, *<decl><type ref="prev"/><name>deleted</name></decl>, *<decl><type ref="prev"/><name>changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_path_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>curr_mergeinfo</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>old_path_rev</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>old_path_rev</name>-&gt;<name>revnum</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>get_path_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>prev_mergeinfo</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>old_path_rev</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>old_path_rev</name>-&gt;<name>revnum</name></name> - 1</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_diff</name><argument_list>(<argument><expr>&amp;<name>deleted</name></expr></argument>, <argument><expr>&amp;<name>changed</name></expr></argument>, <argument><expr><name>prev_mergeinfo</name></expr></argument>, <argument><expr><name>curr_mergeinfo</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr><name>changed</name></expr></argument>, <argument><expr><name>deleted</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>merged_mergeinfo</name> = <call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>changed</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>find_interesting_revisions</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>path_revisions</name></decl></param>,
<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>mark_as_merged</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>duplicate_path_revs</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iter_pool</name></decl>, *<decl><type ref="prev"/><name>last_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_history_t</name> *</type><name>history</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<expr_stmt><expr><name>iter_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>last_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_check_path</name><argument_list>(<argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> != <name>svn_node_file</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_NOT_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not a file in revision %ld"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_history</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>last_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>path_rev</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>path_rev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmp_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_prev</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>history</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>history</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_location</name><argument_list>(<argument><expr>&amp;<name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>&amp;<name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>,
<argument><expr><name>history</name></expr></argument>, <argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>include_merged_revisions</name>
&amp;&amp; <call><name>is_path_in_hash</name><argument_list>(<argument><expr><name>duplicate_path_revs</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>, <argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>tmp_root</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>tmp_root</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>,
<argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>tmp_root</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>path_rev</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path_rev</name>-&gt;<name>merged</name></name> = <name>mark_as_merged</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>path_revisions</name></expr></argument>, <argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></call> = <name>path_rev</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_merged_mergeinfo</name><argument_list>(<argument><expr>&amp;<name><name>path_rev</name>-&gt;<name>merged_mergeinfo</name></name></expr></argument>, <argument><expr><name>repos</name></expr></argument>,
<argument><expr><name>path_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>path_rev</name>-&gt;<name>merged_mergeinfo</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>duplicate_path_revs</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s:%ld"</expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>(<name>void</name> *)0xdeadbeef</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>path_rev</name>-&gt;<name>revnum</name></name> &lt;= <name>start</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>tmp_pool</name> = <name>iter_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iter_pool</name> = <name>last_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_pool</name> = <name>tmp_pool</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_path_revisions</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>a_pr</name> <init>= <expr>*(struct <name>path_revision</name> **)<name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>b_pr</name> <init>= <expr>*(struct <name>path_revision</name> **)<name>b</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>a_pr</name>-&gt;<name>revnum</name></name> == <name><name>b_pr</name>-&gt;<name>revnum</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr><name><name>a_pr</name>-&gt;<name>revnum</name></name> &lt; <name><name>b_pr</name>-&gt;<name>revnum</name></name> ? 1 : -1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>find_merged_revisions</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>merged_path_revisions_out</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>mainline_path_revisions</name></decl></param>,
<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>duplicate_path_revs</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>old</name></decl>, *<decl><type ref="prev"/><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iter_pool</name></decl>, *<decl><type ref="prev"/><name>last_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>merged_path_revisions</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>old</name> = <name>mainline_path_revisions</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iter_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>temp_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>old</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>old_pr</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>old_pr</name>-&gt;<name>merged_mergeinfo</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>, <argument><expr><name><name>old_pr</name>-&gt;<name>merged_mergeinfo</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>rangelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>rangelist</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist</name></expr></argument>, <argument><expr><name>j</name></expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>range</name>-&gt;<name>end</name></name></expr></argument>,
<argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_check_path</name><argument_list>(<argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> != <name>svn_node_file</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>find_interesting_revisions</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name><name>range</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name><name>range</name>-&gt;<name>end</name></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>duplicate_path_revs</name></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></for>
}</block></for>
<expr_stmt><expr><name>merged_path_revisions</name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>, <argument><expr><name>merged_path_revisions</name></expr></argument>,
<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old</name> = <name>new</name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_pool</name> = <name>last_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_pool</name> = <name>iter_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iter_pool</name> = <name>temp_pool</name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name><name>new</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition>;</do>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>merged_path_revisions</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>merged_path_revisions</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare_path_revisions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>merged_path_revisions_out</name> = <call><name>apr_array_copy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>merged_path_revisions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iter_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>last_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>send_baton</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iter_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>last_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>last_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>last_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>last_root</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>send_path_revision</name><parameter_list>(<param><decl><type>struct <name>path_revision</name> *</type><name>path_rev</name></decl></param>,
<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type>struct <name>send_baton</name> *</type><name>sb</name></decl></param>,
<param><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>rev_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>prop_diffs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_stream_t</name> *</type><name>delta_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>delta_handler</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>delta_baton</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmp_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>contents_changed</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_proplist</name><argument_list>(<argument><expr>&amp;<name>rev_props</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>,
<argument><expr><name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>,
<argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_proplist</name><argument_list>(<argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_prop_diffs</name><argument_list>(<argument><expr>&amp;<name>prop_diffs</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>last_props</name></name></expr></argument>,
<argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sb</name>-&gt;<name>last_root</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_contents_changed</name><argument_list>(<argument><expr>&amp;<name>contents_changed</name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>last_root</name></name></expr></argument>,
<argument><expr><name><name>sb</name>-&gt;<name>last_path</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>contents_changed</name> = <name>TRUE</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handler</name><argument_list>(<argument><expr><name>handler_baton</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>revnum</name></name></expr></argument>,
<argument><expr><name>rev_props</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>merged</name></name></expr></argument>,
<argument><expr><name>contents_changed</name> ? &amp;<name>delta_handler</name> : <name>NULL</name></expr></argument>,
<argument><expr><name>contents_changed</name> ? &amp;<name>delta_baton</name> : <name>NULL</name></expr></argument>,
<argument><expr><name>prop_diffs</name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>delta_handler</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_file_delta_stream</name><argument_list>(<argument><expr>&amp;<name>delta_stream</name></expr></argument>,
<argument><expr><name><name>sb</name>-&gt;<name>last_root</name></name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>last_path</name></name></expr></argument>,
<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>path_rev</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_send_txstream</name><argument_list>(<argument><expr><name>delta_stream</name></expr></argument>,
<argument><expr><name>delta_handler</name></expr></argument>, <argument><expr><name>delta_baton</name></expr></argument>,
<argument><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>sb</name>-&gt;<name>last_root</name></name> = <name>root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>-&gt;<name>last_path</name></name> = <name><name>path_rev</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>-&gt;<name>last_props</name></name> = <name>props</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_pool</name> = <name><name>sb</name>-&gt;<name>iter_pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>-&gt;<name>iter_pool</name></name> = <name><name>sb</name>-&gt;<name>last_pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>-&gt;<name>last_pool</name></name> = <name>tmp_pool</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_file_revs2</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>mainline_path_revisions</name></decl>, *<decl><type ref="prev"/><name>merged_path_revisions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>duplicate_path_revs</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>send_baton</name></type> <name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mainline_pos</name></decl>, <decl><type ref="prev"/><name>merged_pos</name></decl>;</decl_stmt>
<expr_stmt><expr><name>duplicate_path_revs</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mainline_path_revisions</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>find_interesting_revisions</name><argument_list>(<argument><expr><name>mainline_path_revisions</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>include_merged_revisions</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>duplicate_path_revs</name></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>find_merged_revisions</name><argument_list>(<argument><expr>&amp;<name>merged_path_revisions</name></expr></argument>,
<argument><expr><name>mainline_path_revisions</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>,
<argument><expr><name>duplicate_path_revs</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>merged_path_revisions</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mainline_path_revisions</name>-&gt;<name>nelts</name></name> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>iter_pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>last_pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>last_root</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>last_path</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>last_props</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>sb</name>.<name>last_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mainline_pos</name> = <name><name>mainline_path_revisions</name>-&gt;<name>nelts</name></name> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>merged_pos</name> = <name><name>merged_path_revisions</name>-&gt;<name>nelts</name></name> - 1</expr>;</expr_stmt>
<while>while <condition>(<expr><name>mainline_pos</name> &gt;= 0 &amp;&amp; <name>merged_pos</name> &gt;= 0</expr>)</condition> <block>{
<decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>main_pr</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>mainline_path_revisions</name></expr></argument>,
<argument><expr><name>mainline_pos</name></expr></argument>,
<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>merged_pr</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>merged_path_revisions</name></expr></argument>,
<argument><expr><name>merged_pos</name></expr></argument>,
<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>main_pr</name>-&gt;<name>revnum</name></name> &lt;= <name><name>merged_pr</name>-&gt;<name>revnum</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_path_revision</name><argument_list>(<argument><expr><name>main_pr</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>,
<argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mainline_pos</name> -= 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_path_revision</name><argument_list>(<argument><expr><name>merged_pr</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>,
<argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>merged_pos</name> -= 1</expr>;</expr_stmt>
}</block></else></if>
}</block></while>
<for>for (<init>;</init> <condition><expr><name>mainline_pos</name> &gt;= 0</expr>;</condition> <incr><expr><name>mainline_pos</name> -= 1</expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>main_pr</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>mainline_path_revisions</name></expr></argument>,
<argument><expr><name>mainline_pos</name></expr></argument>,
<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_path_revision</name><argument_list>(<argument><expr><name>main_pr</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for (<init>;</init> <condition><expr><name>merged_pos</name> &gt;= 0</expr>;</condition> <incr><expr><name>merged_pos</name> -= 1</expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>path_revision</name> *</type><name>merged_pr</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>merged_path_revisions</name></expr></argument>,
<argument><expr><name>merged_pos</name></expr></argument>,
<argument>struct <expr><name>path_revision</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_path_revision</name><argument_list>(<argument><expr><name>merged_pr</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>,
<argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>sb</name>.<name>last_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>sb</name>.<name>iter_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_file_revs</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>svn_repos_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>handler2_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_compat_wrap_file_rev_handler</name><argument_list>(<argument><expr>&amp;<name>handler2</name></expr></argument>, <argument><expr>&amp;<name>handler2_baton</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>,
<argument><expr><name>handler_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_repos_get_file_revs2</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
<argument><expr><name>handler2</name></expr></argument>, <argument><expr><name>handler2_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
