<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_repos/reporter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CACHED_SOURCE_ROOTS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>path_info_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>link_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>path_info_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>report_baton_t</name> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s_operand</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>t_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_depth_t</name></type> <name>requested_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_switch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>tempfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>path_info_t</name> *</type><name>lookahead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>t_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name><name>s_roots</name><index>[<expr><name>NUM_CACHED_SOURCE_ROOTS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>report_baton_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type><name>proplist_change_fn_t</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><name>void</name> *</type><name>object</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>delta_dirs</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>s_rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s_path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t_path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>e_path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>wc_depth</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>requested_depth</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_number</name><parameter_list>(<param><decl><type><name>apr_uint64_t</name> *</type><name>num</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>temp</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>num</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_getc</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == ':'</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr>*<name>num</name> = *<name>num</name> * 10 + (<name>c</name> - '0')</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>str</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>temp</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_number</name><argument_list>(<argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> + 1 &lt; <name>len</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_REPOS_BAD_REVISION_REPORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid length (%%%s) when "
"about to read a string"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_UINT64_T_FMT</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_read_full</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>str</name> = <name>buf</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_rev</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>rev</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>temp</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>num</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_getc</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == '+'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_number</name><argument_list>(<argument><expr>&amp;<name>num</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>rev</name> = (<name>svn_revnum_t</name>) <name>num</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_depth</name><parameter_list>(<param><decl><type><name>svn_depth_t</name> *</type><name>depth</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>temp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_getc</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
<case>case <expr>'X'</expr>:
<expr_stmt><expr>*<name>depth</name> = <name>svn_depth_exclude</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'E'</expr>:
<expr_stmt><expr>*<name>depth</name> = <name>svn_depth_empty</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'F'</expr>:
<expr_stmt><expr>*<name>depth</name> = <name>svn_depth_files</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'M'</expr>:
<expr_stmt><expr>*<name>depth</name> = <name>svn_depth_immediates</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_REPOS_BAD_REVISION_REPORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid depth (%c) for path '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</default>}</block></switch>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_path_info</name><parameter_list>(<param><decl><type><name>path_info_t</name> **</type><name>pi</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>temp</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_getc</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>pi</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>pi</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>pi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_string</name><argument_list>(<argument><expr>&amp;<name>(*<name>pi</name>)-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_getc</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == '+'</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_string</name><argument_list>(<argument><expr>&amp;<name>(*<name>pi</name>)-&gt;<name>link_path</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>(*<name>pi</name>)-&gt;<name>link_path</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_rev</name><argument_list>(<argument><expr>&amp;<name>(*<name>pi</name>)-&gt;<name>rev</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_getc</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == '+'</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_depth</name><argument_list>(<argument><expr>&amp;(<name>(*<name>pi</name>)-&gt;<name>depth</name></name>)</expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>(*<name>pi</name>)-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>(*<name>pi</name>)-&gt;<name>depth</name></name> = <name>svn_depth_infinity</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_getc</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>pi</name>)-&gt;<name>start_empty</name></name> = (<name>c</name> == '+')</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_getc</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == '+'</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_string</name><argument_list>(<argument><expr>&amp;<name>(*<name>pi</name>)-&gt;<name>lock_token</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>(*<name>pi</name>)-&gt;<name>lock_token</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>(*<name>pi</name>)-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>relevant</name><parameter_list>(<param><decl><type><name>path_info_t</name> *</type><name>pi</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>plen</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>pi</name> &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name><name>pi</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> == 0 &amp;&amp;
(!*<name>prefix</name> || <name><name>pi</name>-&gt;<name>path</name><index>[<expr><name>plen</name></expr>]</index></name> == '/'))</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fetch_path_info</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>entry</name></decl></param>, <param><decl><type><name>path_info_t</name> **</type><name>info</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>plen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relpath</name></decl>, *<decl><type ref="prev"/><name>sep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>relevant</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>lookahead</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>entry</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>info</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>relpath</name> = <name><name>b</name>-&gt;<name>lookahead</name>-&gt;<name>path</name></name> + (*<name>prefix</name> ? <name>plen</name> + 1 : 0)</expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>relpath</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sep</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>entry</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>relpath</name></expr></argument>, <argument><expr><name>sep</name> - <name>relpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>info</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>entry</name> = <name>relpath</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>info</name> = <name><name>b</name>-&gt;<name>lookahead</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_path_info</name><argument_list>(<argument><expr>&amp;<name><name>b</name>-&gt;<name>lookahead</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>skip_path_info</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>plen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>relevant</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>lookahead</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>lookahead</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_path_info</name><argument_list>(<argument><expr>&amp;<name><name>b</name>-&gt;<name>lookahead</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>any_path_info</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>relevant</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>lookahead</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_source_root</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><name>svn_fs_root_t</name> **</type><name>s_root</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>, *<decl><type ref="prev"/><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NUM_CACHED_SOURCE_ROOTS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>root</name> = <name><name>b</name>-&gt;<name>s_roots</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>s_roots</name><index>[<expr><name>i</name></expr>]</index></name> = <name>prev</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>root</name> &amp;&amp; <call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call> == <name>rev</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>prev</name> = <name>root</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>i</name> == <name>NUM_CACHED_SOURCE_ROOTS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>prev</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_fs_close_root</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>b</name>-&gt;<name>s_roots</name><index>[<expr>0</expr>]</index></name> = <name>root</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>s_root</name> = <name>root</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_dir_prop</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>change_dir_prop</name></name><argument_list>(<argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_file_prop</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_proplists</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>s_rev</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t_path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
<param><decl><type><name>proplist_change_fn_t</name> *</type><name>change_fn</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>object</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>s_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>s_props</name></decl>, *<decl><type ref="prev"/><name>t_props</name></decl>, *<decl><type ref="prev"/><name>r_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>prop_diffs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>crev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>cr_str</name></decl>, *<decl><type ref="prev"/><name>cdate</name></decl>, *<decl><type ref="prev"/><name>last_author</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_created_rev</name><argument_list>(<argument><expr>&amp;<name>crev</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>crev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cr_str</name> = <call><name>svn_string_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>crev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>change_fn</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>object</name></expr></argument>,
<argument><expr><name>SVN_PROP_ENTRY_COMMITTED_REV</name></expr></argument>, <argument><expr><name>cr_str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_proplist</name><argument_list>(<argument><expr>&amp;<name>r_props</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>crev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cdate</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>r_props</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cdate</name> || <name>s_path</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>change_fn</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_DATE</name></expr></argument>,
<argument><expr><name>cdate</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>last_author</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>r_props</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>last_author</name> || <name>s_path</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>change_fn</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_LAST_AUTHOR</name></expr></argument>,
<argument><expr><name>last_author</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_uuid</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr>&amp;<name>uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>change_fn</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_UUID</name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>lock_token</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_lock</name><argument_list>(<argument><expr>&amp;<name>lock</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>lock</name> || <call><name>strcmp</name><argument_list>(<argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>change_fn</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_LOCK_TOKEN</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>s_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_source_root</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>s_root</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_props_changed</name><argument_list>(<argument><expr>&amp;<name>changed</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>s_root</name></expr></argument>,
<argument><expr><name>s_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>changed</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_proplist</name><argument_list>(<argument><expr>&amp;<name>s_props</name></expr></argument>, <argument><expr><name>s_root</name></expr></argument>, <argument><expr><name>s_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>s_props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_proplist</name><argument_list>(<argument><expr>&amp;<name>t_props</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_prop_diffs</name><argument_list>(<argument><expr>&amp;<name>prop_diffs</name></expr></argument>, <argument><expr><name>t_props</name></expr></argument>, <argument><expr><name>s_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>prop_diffs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>pc</name> = &amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>prop_diffs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>change_fn</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_files</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>s_rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s_path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t_path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>s_root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_stream_t</name> *</type><name>dstream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>s_digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s_hex_digest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>dhandler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>dbaton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delta_proplists</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name>s_path</name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>,
<argument><expr><name>change_file_prop</name></expr></argument>, <argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_source_root</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>s_root</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>ignore_ancestry</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos__compare_files</name><argument_list>(<argument><expr>&amp;<name>changed</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>,
<argument><expr><name>s_root</name></expr></argument>, <argument><expr><name>s_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_contents_changed</name><argument_list>(<argument><expr>&amp;<name>changed</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>s_root</name></expr></argument>,
<argument><expr><name>s_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>!<name>changed</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_file_md5_checksum</name><argument_list>(<argument><expr><name>s_digest</name></expr></argument>, <argument><expr><name>s_root</name></expr></argument>, <argument><expr><name>s_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s_hex_digest</name> = <call><name>svn_md5_digest_to_cstring</name><argument_list>(<argument><expr><name>s_digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>apply_textdelta</name></name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>s_hex_digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr>&amp;<name>dhandler</name></expr></argument>, <argument><expr>&amp;<name>dbaton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>text_deltas</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_file_delta_stream</name><argument_list>(<argument><expr>&amp;<name>dstream</name></expr></argument>, <argument><expr><name>s_root</name></expr></argument>, <argument><expr><name>s_path</name></expr></argument>,
<argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_txdelta_send_txstream</name><argument_list>(<argument><expr><name>dstream</name></expr></argument>, <argument><expr><name>dhandler</name></expr></argument>, <argument><expr><name>dbaton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else
<return>return <expr><call><name>dhandler</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dbaton</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_auth</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><name>svn_boolean_t</name> *</type><name>allowed</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>authz_read_func</name></name></expr>)</condition><then>
<return>return <expr><call><name><name>b</name>-&gt;<name>authz_read_func</name></name><argument_list>(<argument><expr><name>allowed</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name><name>b</name>-&gt;<name>authz_read_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>*<name>allowed</name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fake_dirent</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_dirent_t</name> **</type><name>entry</name></decl></param>, <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_dirent_t</name> *</type><name>ent</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_check_path</name><argument_list>(<argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then>
<expr_stmt><expr>*<name>entry</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>ent</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ent</name>-&gt;<name>name</name></name> = <call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name><name>ent</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ent</name>-&gt;<name>kind</name></name> = <name>kind</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>entry</name> = <name>ent</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>is_depth_upgrade</name><parameter_list>(<param><decl><type><name>svn_depth_t</name></type> <name>wc_depth</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>requested_depth</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>requested_depth</name> == <name>svn_depth_unknown</name>
|| <name>requested_depth</name> &lt;= <name>wc_depth</name>
|| <name>wc_depth</name> == <name>svn_depth_immediates</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name>
&amp;&amp; <name>wc_depth</name> == <name>svn_depth_files</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name>
&amp;&amp; <name>wc_depth</name> == <name>svn_depth_empty</name>
&amp;&amp; <name>requested_depth</name> == <name>svn_depth_files</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file_smartly</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>o_path</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>new_file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>copyfrom_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><call><name>svn_repos_fs</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>closest_copy_root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>closest_copy_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>copyfrom_path</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>copyfrom_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>send_copyfrom_args</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>o_path</name> != '/'</expr>)</condition><then>
<expr_stmt><expr><name>o_path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>o_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_closest_copy</name><argument_list>(<argument><expr>&amp;<name>closest_copy_root</name></expr></argument>, <argument><expr>&amp;<name>closest_copy_path</name></expr></argument>,
<argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>, <argument><expr><name>o_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>closest_copy_root</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>closest_copy_path</name></expr></argument>, <argument><expr><name>o_path</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr><name>copyfrom_rev</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>,
<argument><expr><name>closest_copy_root</name></expr></argument>, <argument><expr><name>closest_copy_path</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>authz_read_func</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>allowed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>copyfrom_root</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>copyfrom_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr>*<name>copyfrom_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>authz_read_func</name></name><argument_list>(<argument><expr>&amp;<name>allowed</name></expr></argument>, <argument><expr><name>copyfrom_root</name></expr></argument>,
<argument><expr>*<name>copyfrom_path</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>authz_read_baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>allowed</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>copyfrom_path</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>copyfrom_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>,
<argument><expr>*<name>copyfrom_path</name></expr></argument>, <argument><expr>*<name>copyfrom_rev</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>new_file_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>update_entry</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>s_rev</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_fs_dirent_t</name> *</type><name>s_entry</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_fs_dirent_t</name> *</type><name>t_entry</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>e_path</name></decl></param>, <param><decl><type><name>path_info_t</name> *</type><name>info</name></decl></param>, <param><decl><type><name>svn_depth_t</name></type> <name>wc_depth</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>requested_depth</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>s_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>allowed</name></decl>, <decl><type ref="prev"/><name>related</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>new_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hex_digest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>distance</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>info</name> &amp;&amp; <name><name>info</name>-&gt;<name>link_path</name></name> &amp;&amp; !<name><name>b</name>-&gt;<name>is_switch</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>t_path</name> = <name><name>info</name>-&gt;<name>link_path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fake_dirent</name><argument_list>(<argument><expr>&amp;<name>t_entry</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>info</name> &amp;&amp; !<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s_path</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_entry</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>info</name> &amp;&amp; <name>s_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s_path</name> = (<name><name>info</name>-&gt;<name>link_path</name></name>) ? <name><name>info</name>-&gt;<name>link_path</name></name> : <name>s_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_rev</name> = <name><name>info</name>-&gt;<name>rev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_source_root</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>s_root</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fake_dirent</name><argument_list>(<argument><expr>&amp;<name>s_entry</name></expr></argument>, <argument><expr><name>s_root</name></expr></argument>, <argument><expr><name>s_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>s_path</name> &amp;&amp; !<name>s_entry</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Working copy path '%s' does not exist in "
"repository"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e_path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>related</name> = <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s_entry</name> &amp;&amp; <name>t_entry</name> &amp;&amp; <name><name>s_entry</name>-&gt;<name>kind</name></name> == <name><name>t_entry</name>-&gt;<name>kind</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>distance</name> = <call><name>svn_fs_compare_ids</name><argument_list>(<argument><expr><name><name>s_entry</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>t_entry</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>distance</name> == 0 &amp;&amp; !<call><name>any_path_info</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e_path</name></expr></argument>)</argument_list></call>
&amp;&amp; (!<name>info</name> || (!<name><name>info</name>-&gt;<name>start_empty</name></name> &amp;&amp; !<name><name>info</name>-&gt;<name>lock_token</name></name>))
&amp;&amp; (<name>requested_depth</name> &lt;= <name>wc_depth</name> || <name><name>t_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>distance</name> != -1 || <name><name>b</name>-&gt;<name>ignore_ancestry</name></name></expr>)</condition><then>
<expr_stmt><expr><name>related</name> = <name>TRUE</name></expr>;</expr_stmt></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>s_entry</name> &amp;&amp; !<name>related</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>deleted_rev</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_deleted_rev</name><argument_list>(<argument><expr><call><name>svn_fs_root_fs</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t_path</name></expr></argument>,
<argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_rev</name></name></expr></argument>, <argument><expr>&amp;<name>deleted_rev</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr><name>e_path</name></expr></argument>, <argument><expr><name>deleted_rev</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s_path</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>t_entry</name></expr>)</condition><then>
<return>return <expr><call><name>skip_path_info</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e_path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_auth</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>allowed</name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>allowed</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>t_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>absent_directory</name></name><argument_list>(<argument><expr><name>e_path</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>absent_file</name></name><argument_list>(<argument><expr><name>e_path</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><call><name>skip_path_info</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e_path</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>t_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>related</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>open_directory</name></name><argument_list>(<argument><expr><name>e_path</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr>&amp;<name>new_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr><name>e_path</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr>&amp;<name>new_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delta_dirs</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name>s_path</name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>new_baton</name></expr></argument>, <argument><expr><name>e_path</name></expr></argument>,
<argument><expr><name>info</name> ? <name><name>info</name>-&gt;<name>start_empty</name></name> : <name>FALSE</name></expr></argument>,
<argument><expr><name>wc_depth</name></expr></argument>, <argument><expr><name>requested_depth</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>close_directory</name></name><argument_list>(<argument><expr><name>new_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>related</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>open_file</name></name><argument_list>(<argument><expr><name>e_path</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr>&amp;<name>new_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delta_files</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>new_baton</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name>s_path</name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>,
<argument><expr><name>info</name> ? <name><name>info</name>-&gt;<name>lock_token</name></name> : <name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_file_smartly</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e_path</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>, <argument><expr>&amp;<name>new_baton</name></expr></argument>,
<argument><expr>&amp;<name>copyfrom_path</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>copyfrom_path</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delta_files</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>new_baton</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name>s_path</name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>,
<argument><expr><name>info</name> ? <name><name>info</name>-&gt;<name>lock_token</name></name> : <name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delta_files</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>new_baton</name></expr></argument>, <argument><expr><name>copyfrom_rev</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>,
<argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>info</name> ? <name><name>info</name>-&gt;<name>lock_token</name></name> : <name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_file_md5_checksum</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hex_digest</name> = <call><name>svn_md5_digest_to_cstring</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>close_file</name></name><argument_list>(<argument><expr><name>new_baton</name></expr></argument>, <argument><expr><name>hex_digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEPTH_BELOW_HERE</name><parameter_list>(<param><type><name>depth</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((depth) == svn_depth_immediates) ? svn_depth_empty : (depth)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_dirs</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>s_rev</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t_path</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>e_path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>, <param><decl><type><name>svn_depth_t</name></type> <name>wc_depth</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>requested_depth</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>s_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>s_entries</name> <init>= <expr><name>NULL</name></expr></init>, *<name>t_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_dirent_t</name> *</type><name>s_entry</name></decl>, *<decl><type ref="prev"/><name>t_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>, *<decl><type ref="prev"/><name>s_fullpath</name></decl>, *<decl><type ref="prev"/><name>t_fullpath</name></decl>, *<decl><type ref="prev"/><name>e_fullpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>path_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delta_proplists</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name>start_empty</name> ? <name>NULL</name> : <name>s_path</name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>change_dir_prop</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>requested_depth</name> &gt; <name>svn_depth_empty</name>
|| <name>requested_depth</name> == <name>svn_depth_unknown</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>s_path</name> &amp;&amp; !<name>start_empty</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_source_root</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>s_root</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_dir_entries</name><argument_list>(<argument><expr>&amp;<name>s_entries</name></expr></argument>, <argument><expr><name>s_root</name></expr></argument>, <argument><expr><name>s_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_dir_entries</name><argument_list>(<argument><expr>&amp;<name>t_entries</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>, <argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fetch_path_info</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>, <argument><expr><name>e_path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>name</name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name>info</name>
&amp;&amp; !<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>rev</name></name></expr></argument>)</argument_list></call>
&amp;&amp; <name><name>info</name>-&gt;<name>depth</name></name> != <name>svn_depth_exclude</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>s_entries</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>s_entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>e_fullpath</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>e_path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t_fullpath</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>t_path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t_entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>t_entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s_fullpath</name> = <name>s_path</name> ? <call><name>svn_path_join</name><argument_list>(<argument><expr><name>s_path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_entry</name> = <name>s_entries</name> ?
<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>s_entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name>info</name> || <name><name>info</name>-&gt;<name>depth</name></name> != <name>svn_depth_exclude</name>)
&amp;&amp; (<name>requested_depth</name> != <name>svn_depth_files</name>
|| ((! <name>t_entry</name> || <name><name>t_entry</name>-&gt;<name>kind</name></name> != <name>svn_node_dir</name>)
&amp;&amp; (! <name>s_entry</name> || <name><name>s_entry</name>-&gt;<name>kind</name></name> != <name>svn_node_dir</name>)))</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>update_entry</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name>s_fullpath</name></expr></argument>, <argument><expr><name>s_entry</name></expr></argument>, <argument><expr><name>t_fullpath</name></expr></argument>,
<argument><expr><name>t_entry</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>e_fullpath</name></expr></argument>, <argument><expr><name>info</name></expr></argument>,
<argument><expr><name>info</name> ? <name><name>info</name>-&gt;<name>depth</name></name>
: <call><name>DEPTH_BELOW_HERE</name><argument_list>(<argument><expr><name>wc_depth</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DEPTH_BELOW_HERE</name><argument_list>(<argument><expr><name>requested_depth</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>t_entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s_entries</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>s_entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>info</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></while>
<if>if <condition>(<expr><name>s_entries</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>s_entries</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s_entry</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>t_entries</name></expr></argument>, <argument><expr><name><name>s_entry</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>deleted_rev</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>s_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>
&amp;&amp; <name>wc_depth</name> &lt; <name>svn_depth_files</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>s_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>
&amp;&amp; (<name>wc_depth</name> &lt; <name>svn_depth_immediates</name>
|| <name>requested_depth</name> == <name>svn_depth_files</name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>e_fullpath</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>e_path</name></expr></argument>, <argument><expr><name><name>s_entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_deleted_rev</name><argument_list>(<argument><expr><call><name>svn_fs_root_fs</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>t_path</name></expr></argument>,
<argument><expr><name><name>s_entry</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_rev</name></name></expr></argument>,
<argument><expr>&amp;<name>deleted_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr><name>e_fullpath</name></expr></argument>,
<argument><expr><name>deleted_rev</name></expr></argument>,
<argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>t_entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t_entry</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>is_depth_upgrade</name><argument_list>(<argument><expr><name>wc_depth</name></expr></argument>, <argument><expr><name>requested_depth</name></expr></argument>, <argument><expr><name><name>t_entry</name>-&gt;<name>kind</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s_entry</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_fullpath</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>t_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>
&amp;&amp; <name>requested_depth</name> == <name>svn_depth_unknown</name>
&amp;&amp; <name>wc_depth</name> &lt; <name>svn_depth_files</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>t_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>
&amp;&amp; (<name>wc_depth</name> &lt; <name>svn_depth_immediates</name>
|| <name>requested_depth</name> == <name>svn_depth_files</name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>s_entry</name> = <name>s_entries</name> ?
<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>s_entries</name></expr></argument>, <argument><expr><name><name>t_entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>
: <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_fullpath</name> = <name>s_entry</name> ?
<call><name>svn_path_join</name><argument_list>(<argument><expr><name>s_path</name></expr></argument>, <argument><expr><name><name>t_entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>e_fullpath</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>e_path</name></expr></argument>, <argument><expr><name><name>t_entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t_fullpath</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>t_path</name></expr></argument>, <argument><expr><name><name>t_entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>update_entry</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name>s_fullpath</name></expr></argument>, <argument><expr><name>s_entry</name></expr></argument>, <argument><expr><name>t_fullpath</name></expr></argument>,
<argument><expr><name>t_entry</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>e_fullpath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>DEPTH_BELOW_HERE</name><argument_list>(<argument><expr><name>wc_depth</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>DEPTH_BELOW_HERE</name><argument_list>(<argument><expr><name>requested_depth</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>drive</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>s_rev</name></decl></param>, <param><decl><type><name>path_info_t</name> *</type><name>info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t_anchor</name></decl>, *<decl><type ref="prev"/><name>s_fullpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>allowed</name></decl>, <decl><type ref="prev"/><name>info_is_set_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>s_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_dirent_t</name> *</type><name>s_entry</name></decl>, *<decl><type ref="prev"/><name>t_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>root_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t_anchor</name> = *<name><name>b</name>-&gt;<name>s_operand</name></name> ? <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>t_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call> : <name><name>b</name>-&gt;<name>t_path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_auth</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>allowed</name></expr></argument>, <argument><expr><name>t_anchor</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>allowed</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_AUTHZ_ROOT_UNREADABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Not authorized to open root of edit operation"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>set_target_revision</name></name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_rev</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s_fullpath</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>fs_base</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>s_operand</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_source_root</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>s_root</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fake_dirent</name><argument_list>(<argument><expr>&amp;<name>s_entry</name></expr></argument>, <argument><expr><name>s_root</name></expr></argument>, <argument><expr><name>s_fullpath</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fake_dirent</name><argument_list>(<argument><expr>&amp;<name>t_entry</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info_is_set_path</name> = (<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>rev</name></name></expr></argument>)</argument_list></call> &amp;&amp; !<name><name>info</name>-&gt;<name>link_path</name></name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>info_is_set_path</name> &amp;&amp; !<name>s_entry</name></expr>)</condition><then>
<expr_stmt><expr><name>s_fullpath</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!*<name><name>b</name>-&gt;<name>s_operand</name></name> &amp;&amp; !(<name>t_entry</name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_PATH_SYNTAX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Target path does not exist"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <if>if <condition>(<expr>!*<name><name>b</name>-&gt;<name>s_operand</name></name> &amp;&amp; (!<name>s_entry</name> || <name><name>s_entry</name>-&gt;<name>kind</name></name> != <name>svn_node_dir</name>
|| <name><name>t_entry</name>-&gt;<name>kind</name></name> != <name>svn_node_dir</name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_PATH_SYNTAX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot replace a directory from within"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>open_root</name></name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>root_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name><name>b</name>-&gt;<name>s_operand</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delta_dirs</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name>s_fullpath</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_path</name></name></expr></argument>, <argument><expr><name>root_baton</name></expr></argument>,
<argument><expr>""</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>start_empty</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>depth</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>requested_depth</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>update_entry</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name>s_fullpath</name></expr></argument>, <argument><expr><name>s_entry</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_path</name></name></expr></argument>,
<argument><expr><name>t_entry</name></expr></argument>, <argument><expr><name>root_baton</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>s_operand</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>depth</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>requested_depth</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>close_directory</name></name><argument_list>(<argument><expr><name>root_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>editor</name>-&gt;<name>close_edit</name></name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>finish_report</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>path_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>s_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr>"-"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_seek</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name>APR_SET</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_path_info</name><argument_list>(<argument><expr>&amp;<name>info</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>info</name> || <call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>s_operand</name></name></expr></argument>)</argument_list></call> != 0
|| <name><name>info</name>-&gt;<name>link_path</name></name> || !<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_REPOS_BAD_REVISION_REPORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid report for top level of working copy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>s_rev</name> = <name><name>info</name>-&gt;<name>rev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_path_info</name><argument_list>(<argument><expr>&amp;<name><name>b</name>-&gt;<name>lookahead</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>lookahead</name></name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>lookahead</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>s_operand</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!*<name><name>b</name>-&gt;<name>s_operand</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_REPOS_BAD_REVISION_REPORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Two top-level reports with no target"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>lookahead</name>-&gt;<name>rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>b</name>-&gt;<name>lookahead</name>-&gt;<name>depth</name></name> = <name><name>info</name>-&gt;<name>depth</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>info</name> = <name><name>b</name>-&gt;<name>lookahead</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_path_info</name><argument_list>(<argument><expr>&amp;<name><name>b</name>-&gt;<name>lookahead</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name><name>b</name>-&gt;<name>t_root</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>t_rev</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NUM_CACHED_SOURCE_ROOTS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>b</name>-&gt;<name>s_roots</name><index>[<expr><name>i</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt></for>
<return>return <expr><call><name>drive</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s_rev</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>write_path_info</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>b</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lpath</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>, <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lrep</name></decl>, *<decl><type ref="prev"/><name>rrep</name></decl>, *<decl><type ref="prev"/><name>drep</name></decl>, *<decl><type ref="prev"/><name>ltrep</name></decl>, *<decl><type ref="prev"/><name>rep</name></decl>;</decl_stmt>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>s_operand</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lrep</name> = <name>lpath</name> ? <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"+%" <name>APR_SIZE_T_FMT</name> ":%s"</expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>lpath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lpath</name></expr></argument>)</argument_list></call> : "-"</expr>;</expr_stmt>
<expr_stmt><expr><name>rrep</name> = (<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call>) ?
<call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"+%ld:"</expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call> : "-"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_exclude</name></expr>)</condition><then>
<expr_stmt><expr><name>drep</name> = "+X"</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_empty</name></expr>)</condition><then>
<expr_stmt><expr><name>drep</name> = "+E"</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_files</name></expr>)</condition><then>
<expr_stmt><expr><name>drep</name> = "+F"</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_immediates</name></expr>)</condition><then>
<expr_stmt><expr><name>drep</name> = "+M"</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_infinity</name></expr>)</condition><then>
<expr_stmt><expr><name>drep</name> = "-"</expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_REPOS_BAD_ARGS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unsupported report depth '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if></else></if></else></if></else></if>
<expr_stmt><expr><name>ltrep</name> = <name>lock_token</name> ? <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"+%" <name>APR_SIZE_T_FMT</name> ":%s"</expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call> : "-"</expr>;</expr_stmt>
<expr_stmt><expr><name>rep</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"+%" <name>APR_SIZE_T_FMT</name> ":%s%s%s%s%c%s"</expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>lrep</name></expr></argument>, <argument><expr><name>rrep</name></expr></argument>, <argument><expr><name>drep</name></expr></argument>,
<argument><expr><name>start_empty</name> ? '+' : '-'</expr></argument>, <argument><expr><name>ltrep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_set_path3</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>write_path_info</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>start_empty</name></expr></argument>,
<argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_set_path2</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_repos_set_path3</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>svn_depth_infinity</name></expr></argument>,
<argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_set_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_repos_set_path2</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_link_path3</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>link_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>, <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_exclude</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_REPOS_BAD_ARGS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Depth 'exclude' not supported for link"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>write_path_info</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>link_path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_link_path2</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>link_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_repos_link_path3</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>link_path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>svn_depth_infinity</name></expr></argument>,
<argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_link_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>link_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_repos_link_path2</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>link_path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>start_empty</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_delete_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>write_path_info</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>svn_depth_infinity</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_finish_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>report_baton_t</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>finish_err</name></decl>, *<decl><type ref="prev"/><name>close_err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>finish_err</name> = <call><name>finish_report</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>close_err</name> = <call><name>svn_io_file_close</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>finish_err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>close_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>finish_err</name> ? <name>finish_err</name> : <name>close_err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_abort_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>report_baton_t</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_begin_report2</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl></param>,
<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_base</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s_operand</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>report_baton_t</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tempdir</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_exclude</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_REPOS_BAD_ARGS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Request depth 'exclude' not supported"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>b</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>repos</name></name> = <name>repos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>fs_base</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fs_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>s_operand</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>s_operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>t_rev</name></name> = <name>revnum</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>t_path</name></name> = <name>switch_path</name> ? <name>switch_path</name>
: <call><name>svn_path_join</name><argument_list>(<argument><expr><name>fs_base</name></expr></argument>, <argument><expr><name>s_operand</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>text_deltas</name></name> = <name>text_deltas</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>requested_depth</name></name> = <name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>ignore_ancestry</name></name> = <name>ignore_ancestry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>send_copyfrom_args</name></name> = <name>send_copyfrom_args</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>is_switch</name></name> = (<name>switch_path</name> != <name>NULL</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>editor</name></name> = <name>editor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>authz_read_func</name></name> = <name>authz_read_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>authz_read_baton</name></name> = <name>authz_read_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_temp_dir</name><argument_list>(<argument><expr>&amp;<name>tempdir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr>&amp;<name><name>b</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s/report"</expr></argument>, <argument><expr><name>tempdir</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>".tmp"</expr></argument>, <argument><expr><name>svn_io_file_del_on_close</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>report_baton</name> = <name>b</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_begin_report</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_base</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s_operand</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_repos_begin_report2</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>,
<argument><expr><name>revnum</name></expr></argument>,
<argument><expr><name>repos</name></expr></argument>,
<argument><expr><name>fs_base</name></expr></argument>,
<argument><expr><name>s_operand</name></expr></argument>,
<argument><expr><name>switch_path</name></expr></argument>,
<argument><expr><name>text_deltas</name></expr></argument>,
<argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ignore_ancestry</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>editor</name></expr></argument>,
<argument><expr><name>edit_baton</name></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
