<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_repos/log.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_sorts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repos.h"</cpp:file></cpp:include>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_check_revision_access</name><parameter_list>(<param><decl><type><name>svn_repos_revision_access_level_t</name> *</type><name>access_level</name></decl></param>,
<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>rev_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>found_readable</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>found_unreadable</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>access_level</name> = <name>svn_repos_revision_access_full</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>authz_read_func</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_paths_changed</name><argument_list>(<argument><expr>&amp;<name>changes</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_path_change_t</name> *</type><name>change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>change</name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
<expr_stmt><expr><name>found_unreadable</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>found_readable</name> = <name>TRUE</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>found_readable</name> &amp;&amp; <name>found_unreadable</name></expr>)</condition><then>
<goto>goto <name>decision</name>;</goto></then></if>
<switch>switch <condition>(<expr><name><name>change</name>-&gt;<name>change_kind</name></name></expr>)</condition> <block>{
<case>case <expr><name>svn_fs_path_change_add</name></expr>:
</case><case>case <expr><name>svn_fs_path_change_replace</name></expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>copyfrom_rev</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_path</name></expr></argument>,
<argument><expr><name>rev_root</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copyfrom_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copyfrom_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>copyfrom_root</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>copyfrom_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>copyfrom_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>,
<argument><expr><name>copyfrom_root</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
<expr_stmt><expr><name>found_unreadable</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>found_readable</name> &amp;&amp; <name>found_unreadable</name></expr>)</condition><then>
<goto>goto <name>decision</name>;</goto></then></if>
}</block></then></if>
}</block>
<break>break;</break>
</case><case>case <expr><name>svn_fs_path_change_delete</name></expr>:
</case><case>case <expr><name>svn_fs_path_change_modify</name></expr>:
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></for>
<label><name>decision</name>:</label>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>found_readable</name></expr>)</condition><then>
<expr_stmt><expr>*<name>access_level</name> = <name>svn_repos_revision_access_none</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>found_unreadable</name></expr>)</condition><then>
<expr_stmt><expr>*<name>access_level</name> = <name>svn_repos_revision_access_partial</name></expr>;</expr_stmt></then></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>detect_changed</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>changed</name></decl></param>,
<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>found_readable</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>found_unreadable</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>changed</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_paths_changed</name><argument_list>(<argument><expr>&amp;<name>changes</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_path_change_t</name> *</type><name>change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_log_changed_path_t</name> *</type><name>item</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = (const <name>char</name> *) <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>change</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>,
<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found_unreadable</name> = <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>found_readable</name> = <name>TRUE</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>change</name>-&gt;<name>change_kind</name></name></expr>)</condition> <block>{
<case>case <expr><name>svn_fs_path_change_reset</name></expr>:
<continue>continue;</continue>
</case><case>case <expr><name>svn_fs_path_change_add</name></expr>:
<expr_stmt><expr><name>action</name> = 'A'</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_fs_path_change_replace</name></expr>:
<expr_stmt><expr><name>action</name> = 'R'</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_fs_path_change_delete</name></expr>:
<expr_stmt><expr><name>action</name> = 'D'</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_fs_path_change_modify</name></expr>:
</case><default>default:
<expr_stmt><expr><name>action</name> = 'M'</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><name>item</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name>-&gt;<name>action</name></name> = <name>action</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name>-&gt;<name>copyfrom_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>action</name> == 'A') || (<name>action</name> == 'R')</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>copyfrom_rev</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_path</name></expr></argument>,
<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copyfrom_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copyfrom_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>copyfrom_root</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>copyfrom_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>copyfrom_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>,
<argument><expr><name>copyfrom_root</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
<expr_stmt><expr><name>found_unreadable</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>readable</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>item</name>-&gt;<name>copyfrom_path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name>-&gt;<name>copyfrom_rev</name></name> = <name>copyfrom_rev</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>changed</name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>found_readable</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_AUTHZ_UNREADABLE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>found_unreadable</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_AUTHZ_PARTIALLY_READABLE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>path_info</name> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>history_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>first_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_history_t</name> *</type><name>hist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>newpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>oldpool</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_history</name><parameter_list>(<param><decl><type>struct <name>path_info</name> *</type><name>info</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>history_root</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_history_t</name> *</type><name>hist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>hist</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>subpool</name> = <name><name>info</name>-&gt;<name>newpool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_prev</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>hist</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>hist</name></name></expr></argument>,
<argument><expr><name>strict</name> ? <name>FALSE</name> : <name>TRUE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hist</name> = <name><name>info</name>-&gt;<name>hist</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>history_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>history_rev</name></name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_history</name><argument_list>(<argument><expr>&amp;<name>hist</name></expr></argument>, <argument><expr><name>history_root</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>path</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_prev</name><argument_list>(<argument><expr>&amp;<name>hist</name></expr></argument>, <argument><expr><name>hist</name></expr></argument>, <argument><expr><name>strict</name> ? <name>FALSE</name> : <name>TRUE</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>first_time</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>info</name>-&gt;<name>first_time</name></name> = <name>FALSE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_prev</name><argument_list>(<argument><expr>&amp;<name>hist</name></expr></argument>, <argument><expr><name>hist</name></expr></argument>, <argument><expr><name>strict</name> ? <name>FALSE</name> : <name>TRUE</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></else></if>
<if>if <condition>(<expr>! <name>hist</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>oldpool</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>oldpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>info</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_location</name><argument_list>(<argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name><name>info</name>-&gt;<name>history_rev</name></name></expr></argument>,
<argument><expr><name>hist</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>history_rev</name></name> &lt; <name>start</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>oldpool</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>oldpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>info</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>history_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>history_rev</name></name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>history_root</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>path</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
<expr_stmt><expr><name><name>info</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr>! <name><name>info</name>-&gt;<name>hist</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>temppool</name> <init>= <expr><name><name>info</name>-&gt;<name>oldpool</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>oldpool</name></name> = <name><name>info</name>-&gt;<name>newpool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>temppool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>newpool</name></name> = <name>temppool</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_history</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>changed</name></decl></param>,
<param><decl><type>struct <name>path_info</name> *</type><name>info</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>current</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>done</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>history_rev</name></name> &lt; <name>current</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr>*<name>changed</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_history</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_revnum_t</name></type>
<name>next_history_rev</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>histories</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>next_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>histories</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>path_info</name> *</type><name>info</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>histories</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument>struct <expr><name>path_info</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>done</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>history_rev</name></name> &gt; <name>next_rev</name></expr>)</condition><then>
<expr_stmt><expr><name>next_rev</name> = <name><name>info</name>-&gt;<name>history_rev</name></name></expr>;</expr_stmt></then></if>
}</block></for>
<return>return <expr><name>next_rev</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fs_mergeinfo_changed</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_catalog_t</name> *</type><name>deleted_mergeinfo_catalog</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_catalog_t</name> *</type><name>added_mergeinfo_catalog</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><name>NULL</name></expr></init>, *<name>iterpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>deleted_mergeinfo_catalog</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>added_mergeinfo_catalog</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev</name> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_paths_changed</name><argument_list>(<argument><expr>&amp;<name>changes</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_path_change_t</name> *</type><name>change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changed_path</name></decl>, *<decl><type ref="prev"/><name>base_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>base_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>prev_mergeinfo_value</name> <init>= <expr><name>NULL</name></expr></init>, *<name>mergeinfo_value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>changed_path</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>change</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>change</name>-&gt;<name>prop_mod</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<switch>switch <condition>(<expr><name><name>change</name>-&gt;<name>change_kind</name></name></expr>)</condition> <block>{
<case>case <expr><name>svn_fs_path_change_add</name></expr>:
</case><case>case <expr><name>svn_fs_path_change_replace</name></expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copied_from</name><argument_list>(<argument><expr>&amp;<name>copyfrom_rev</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_path</name></expr></argument>,
<argument><expr><name>root</name></expr></argument>, <argument><expr><name>changed_path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copyfrom_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copyfrom_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>base_path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base_rev</name> = <name>copyfrom_rev</name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>svn_fs_path_change_modify</name></expr>: <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>appeared_rev</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos__prev_location</name><argument_list>(<argument><expr>&amp;<name>appeared_rev</name></expr></argument>, <argument><expr>&amp;<name>base_path</name></expr></argument>,
<argument><expr>&amp;<name>base_rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name>changed_path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! (<name>base_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>base_rev</name></expr></argument>)</argument_list></call>
&amp;&amp; (<name>appeared_rev</name> == <name>rev</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>base_path</name> = <name>changed_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>base_rev</name> = <name>rev</name> - 1</expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>svn_fs_path_change_delete</name></expr>:
</case><case>case <expr><name>svn_fs_path_change_reset</name></expr>:
</case><default>default:
<continue>continue;</continue>
</default>}</block></switch>
<if>if <condition>(<expr><name>base_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>base_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>base_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>query_paths</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>base_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>base_catalog</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>base_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>base_rev</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>query_paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>base_path</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>base_catalog</name></expr></argument>, <argument><expr><name>base_root</name></expr></argument>, <argument><expr><name>query_paths</name></expr></argument>,
<argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base_mergeinfo</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>base_catalog</name></expr></argument>, <argument><expr><name>base_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>base_mergeinfo</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_to_string</name><argument_list>(<argument><expr>&amp;<name>prev_mergeinfo_value</name></expr></argument>,
<argument><expr><name>base_mergeinfo</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_prop</name><argument_list>(<argument><expr>&amp;<name>mergeinfo_value</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>changed_path</name></expr></argument>,
<argument><expr><name>SVN_PROP_MERGEINFO</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>prev_mergeinfo_value</name> &amp;&amp; (! <name>mergeinfo_value</name>))
|| ((! <name>prev_mergeinfo_value</name>) &amp;&amp; <name>mergeinfo_value</name>)
|| (<name>prev_mergeinfo_value</name> &amp;&amp; <name>mergeinfo_value</name>
&amp;&amp; (! <call><name>svn_string_compare</name><argument_list>(<argument><expr><name>mergeinfo_value</name></expr></argument>,
<argument><expr><name>prev_mergeinfo_value</name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>prev_mergeinfo</name> <init>= <expr><name>NULL</name></expr></init>, <name>mergeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>deleted</name></decl>, <decl><type ref="prev"/><name>added</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hash_path</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>mergeinfo_value</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_parse</name><argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>,
<argument><expr><name><name>mergeinfo_value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>prev_mergeinfo_value</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_parse</name><argument_list>(<argument><expr>&amp;<name>prev_mergeinfo</name></expr></argument>,
<argument><expr><name><name>prev_mergeinfo_value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_diff</name><argument_list>(<argument><expr>&amp;<name>deleted</name></expr></argument>, <argument><expr>&amp;<name>added</name></expr></argument>, <argument><expr><name>prev_mergeinfo</name></expr></argument>,
<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hash_path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>changed_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>deleted_mergeinfo_catalog</name></expr></argument>, <argument><expr><name>hash_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>deleted</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>added_mergeinfo_catalog</name></expr></argument>, <argument><expr><name>hash_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>added</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_combined_mergeinfo_changes</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>combined_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>added_mergeinfo_catalog</name></decl>, <decl><type ref="prev"/><name>deleted_mergeinfo_catalog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>, *<decl><type ref="prev"/><name>iterpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>combined_mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev</name> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr>! <name><name>paths</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fs_mergeinfo_changed</name><argument_list>(<argument><expr>&amp;<name>deleted_mergeinfo_catalog</name></expr></argument>,
<argument><expr>&amp;<name>added_mergeinfo_catalog</name></expr></argument>,
<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prev_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>appeared_rev</name></decl>, <decl><type ref="prev"/><name>prev_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>prev_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>catalog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>prev_mergeinfo</name></decl>, <decl><type ref="prev"/><name>mergeinfo</name></decl>, <decl><type ref="prev"/><name>deleted</name></decl>, <decl><type ref="prev"/><name>added</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>query_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>deleted_mergeinfo_catalog</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_repos__prev_location</name><argument_list>(<argument><expr>&amp;<name>appeared_rev</name></expr></argument>, <argument><expr>&amp;<name>prev_path</name></expr></argument>, <argument><expr>&amp;<name>prev_rev</name></expr></argument>,
<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! (<name>prev_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>prev_rev</name></expr></argument>)</argument_list></call>
&amp;&amp; (<name>appeared_rev</name> == <name>rev</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>prev_path</name> = <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_rev</name> = <name>rev</name> - 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>prev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>prev_rev</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>query_paths</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>query_paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>prev_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_get_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>catalog</name></expr></argument>, <argument><expr><name>prev_root</name></expr></argument>, <argument><expr><name>query_paths</name></expr></argument>,
<argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_mergeinfo</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>prev_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>query_paths</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_get_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>catalog</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>query_paths</name></expr></argument>,
<argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mergeinfo</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_diff</name><argument_list>(<argument><expr>&amp;<name>deleted</name></expr></argument>, <argument><expr>&amp;<name>added</name></expr></argument>, <argument><expr><name>prev_mergeinfo</name></expr></argument>,
<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mergeinfo</name> = <name>deleted</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>added</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr>*<name>combined_mergeinfo</name></expr></argument>,
<argument><expr><call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>added_mergeinfo_catalog</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changed_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>added_mergeinfo</name></decl>, <decl><type ref="prev"/><name>deleted_mergeinfo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>changed_path</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>added_mergeinfo</name> = <name>val</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>changed_path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>deleted_mergeinfo</name> =
<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>deleted_mergeinfo_catalog</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr>*<name>combined_mergeinfo</name></expr></argument>,
<argument><expr><call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>deleted_mergeinfo</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr>*<name>combined_mergeinfo</name></expr></argument>,
<argument><expr><call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>added_mergeinfo</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></for>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fill_log_entry</name><parameter_list>(<param><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>r_props</name></decl>, *<decl><type ref="prev"/><name>changed_paths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>get_revprops</name> <init>= <expr><name>TRUE</name></expr></init>, <name>censor_revprops</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rev</name> &gt; 0)
&amp;&amp; (<name>authz_read_func</name> || <name>discover_changed_paths</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>newroot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>patherr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>newroot</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>patherr</name> = <call><name>detect_changed</name><argument_list>(<argument><expr>&amp;<name>changed_paths</name></expr></argument>,
<argument><expr><name>newroot</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>patherr</name>
&amp;&amp; <name><name>patherr</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_AUTHZ_UNREADABLE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>patherr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>changed_paths</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>get_revprops</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>patherr</name>
&amp;&amp; <name><name>patherr</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_AUTHZ_PARTIALLY_READABLE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>patherr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>censor_revprops</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>patherr</name></expr>)</condition><then>
<return>return <expr><name>patherr</name></expr>;</return></then></if></else></if></else></if>
<if>if <condition>(<expr>! <name>discover_changed_paths</name></expr>)</condition><then>
<expr_stmt><expr><name>changed_paths</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>get_revprops</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_proplist</name><argument_list>(<argument><expr>&amp;<name>r_props</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>revprops</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>censor_revprops</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>r_props</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>r_props</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name> = <name>r_props</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>revprops</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>r_props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>censor_revprops</name>
&amp;&amp; !(<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>)</argument_list></call> == 0
|| <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>revprops</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>log_entry</name>-&gt;<name>changed_paths</name></name> = <name>changed_paths</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_entry</name>-&gt;<name>revision</name></name> = <name>rev</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>send_log</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>has_children</name></decl></param>,
<param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl>;</decl_stmt>
<expr_stmt><expr><name>log_entry</name> = <call><name>svn_log_entry_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fill_log_entry</name><argument_list>(<argument><expr><name>log_entry</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>discover_changed_paths</name></expr></argument>,
<argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_entry</name>-&gt;<name>has_children</name></name> = <name>has_children</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name>receiver</name>)<argument_list>(<argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>log_entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OPEN_HISTORIES</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_path_histories</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>histories</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>hist_start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>hist_end</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>histories</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>paths</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_info</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>hist_end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>this_path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>path_info</name> *</type><name>info</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>authz_read_func</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>readable</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_read_func</name><argument_list>(<argument><expr>&amp;<name>readable</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>readable</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_AUTHZ_UNREADABLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>info</name>-&gt;<name>path</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>done</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>history_rev</name></name> = <name>hist_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>first_time</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; <name>MAX_OPEN_HISTORIES</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_history</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>hist</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>newpool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>oldpool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>hist</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>oldpool</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>newpool</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_history</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>strict_node_history</name></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
<argument><expr><name>hist_start</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr>*<name>histories</name></expr></argument>, <argument>struct <expr><name>path_info</name> *</expr></argument>)</argument_list></call> = <name>info</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>array_pop_front</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>arr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>item</name> <init>= <expr><name><name>arr</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>arr</name>-&gt;<name>elts</name></name> += <name><name>arr</name>-&gt;<name>elt_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arr</name>-&gt;<name>nelts</name></name> -= 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>arr</name>-&gt;<name>nalloc</name></name> -= 1</expr>;</expr_stmt>
<return>return <expr><name>item</name></expr>;</return>
}</block></function>
<struct>struct <name>path_list_range</name> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name></type> <name>range</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>rangelist_path</name> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_rangelist_paths</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rangelist_path</name> *</type><name>rpa</name> <init>= <expr>*((struct <name>rangelist_path</name> **) <name>a</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>rangelist_path</name> *</type><name>rpb</name> <init>= <expr>*((struct <name>rangelist_path</name> **) <name>b</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>mra</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rpa</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>mrb</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rpb</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>mra</name>-&gt;<name>start</name></name> &lt; <name><name>mrb</name>-&gt;<name>start</name></name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>mra</name>-&gt;<name>start</name></name> &gt; <name><name>mrb</name>-&gt;<name>start</name></name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>mra</name>-&gt;<name>end</name></name> &lt; <name><name>mrb</name>-&gt;<name>end</name></name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>mra</name>-&gt;<name>end</name></name> &gt; <name><name>mrb</name>-&gt;<name>end</name></name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>combine_mergeinfo_path_lists</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>combined_list</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rangelist_paths</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>rangelist_path</name> *</type><name>rp</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name><name>rp</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>(<name>void</name> *) &amp;<name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call> = <name>rp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>rangelist</name></name> = <call><name>svn_rangelist_dup</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>rp</name>-&gt;<name>rangelist</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>start</name> += 1</expr>;</expr_stmt></for>
}</block></for>
<expr_stmt><expr>*<name>combined_list</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>path_list_range</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>rangelist_paths</name>-&gt;<name>nelts</name></name> &gt; 1</expr>)</condition> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest</name></decl>, <decl><type ref="prev"/><name>next_youngest</name></decl>, <decl><type ref="prev"/><name>tail</name></decl>, <decl><type ref="prev"/><name>youngest_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>path_list_range</name> *</type><name>plr</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>rangelist_path</name> *</type><name>rp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_revs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>rangelist_paths</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>rangelist_paths</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><name><name>rangelist_paths</name>-&gt;<name>elt_size</name></name></expr></argument>, <argument><expr><name>compare_rangelist_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument><expr>0</expr></argument>, <argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>youngest</name> =
<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument>struct <expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_youngest</name> = <name>youngest</name></expr>;</expr_stmt>
<for>for (<init><expr><name>num_revs</name> = 1</expr>;</init> <condition><expr><name>next_youngest</name> == <name>youngest</name></expr>;</condition> <incr><expr><name>num_revs</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name>num_revs</name> == <name><name>rangelist_paths</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>num_revs</name> += 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>rp</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument><expr><name>num_revs</name></expr></argument>,
<argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_youngest</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument>struct <expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>start</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>num_revs</name> -= 1</expr>;</expr_stmt>
<expr_stmt><expr><name>youngest_end</name> =
<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call>-&gt;<name>rangelist</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>end</name></expr>;</expr_stmt>
<if>if <condition>( <expr>(<name>next_youngest</name> == <name>youngest</name>) || (<name>youngest_end</name> &lt; <name>next_youngest</name>)</expr> )</condition><then>
<expr_stmt><expr><name>tail</name> = <name>youngest_end</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>tail</name> = <name>next_youngest</name> - 1</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>plr</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>plr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plr</name>-&gt;<name>range</name>.<name>start</name></name> = <name>youngest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plr</name>-&gt;<name>range</name>.<name>end</name></name> = <name>tail</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plr</name>-&gt;<name>paths</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>num_revs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_revs</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>plr</name>-&gt;<name>paths</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> =
<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call>-&gt;<name>path</name></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr>*<name>combined_list</name></expr></argument>, <argument>struct <expr><name>path_list_range</name> *</expr></argument>)</argument_list></call> = <name>plr</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_revs</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rp</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name></name> = <name>tail</name> + 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>range</name>-&gt;<name>start</name></name> &gt; <name><name>range</name>-&gt;<name>end</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>rp</name>-&gt;<name>rangelist</name>-&gt;<name>nelts</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>array_pop_front</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>--</expr>;</expr_stmt>
<expr_stmt><expr><name>num_revs</name>--</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>array_pop_front</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>rangelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></for>
}</block></while>
<if>if <condition>(<expr><name><name>rangelist_paths</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type>struct <name>rangelist_path</name> *</type><name>first_rp</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist_paths</name></expr></argument>, <argument><expr>0</expr></argument>, <argument>struct <expr><name>rangelist_path</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>first_rp</name>-&gt;<name>rangelist</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type>struct <name>path_list_range</name> *</type><name>plr</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>plr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>plr</name>-&gt;<name>paths</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>plr</name>-&gt;<name>paths</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name><name>first_rp</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>plr</name>-&gt;<name>range</name></name> = *<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>first_rp</name>-&gt;<name>rangelist</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>array_pop_front</name><argument_list>(<argument><expr><name><name>first_rp</name>-&gt;<name>rangelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr>*<name>combined_list</name></expr></argument>, <argument>struct <expr><name>path_list_range</name> *</expr></argument>)</argument_list></call> = <name>plr</name></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>do_logs</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>hist_start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>hist_end</name></decl></param>,
<param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>descending_order</name></decl></param>,
<param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>handle_merged_revisions</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
<param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>combined_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_log_entry_t</name> *</type><name>empty_log_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>combine_mergeinfo_path_lists</name><argument_list>(<argument><expr>&amp;<name>combined_list</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name><name>combined_list</name>-&gt;<name>nelts</name></name> - 1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>path_list_range</name> *</type><name>pl_range</name>
<init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>combined_list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument>struct <expr><name>path_list_range</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>do_logs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name><name>pl_range</name>-&gt;<name>paths</name></name></expr></argument>, <argument><expr><name><name>pl_range</name>-&gt;<name>range</name>.<name>start</name></name></expr></argument>,
<argument><expr><name><name>pl_range</name>-&gt;<name>range</name>.<name>end</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>discover_changed_paths</name></expr></argument>,
<argument><expr><name>strict_node_history</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name> ||
<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NO_SUCH_REVISION</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>empty_log_entry</name> = <call><name>svn_log_entry_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>empty_log_entry</name>-&gt;<name>revision</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name>receiver</name>)<argument_list>(<argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>empty_log_entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_logs</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>hist_start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>hist_end</name></decl></param>,
<param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>descending_order</name></decl></param>,
<param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>revs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>rev_mergeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>histories</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>any_histories_left</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>send_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_path_histories</name><argument_list>(<argument><expr>&amp;<name>histories</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>hist_start</name></expr></argument>, <argument><expr><name>hist_end</name></expr></argument>,
<argument><expr><name>strict_node_history</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>current</name> = <name>hist_end</name></expr>;</init>
<condition><expr><name>any_histories_left</name></expr>;</condition>
<incr><expr><name>current</name> = <call><name>next_history_rev</name><argument_list>(<argument><expr><name>histories</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>changed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>any_histories_left</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>histories</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>path_info</name> *</type><name>info</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>histories</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument>struct <expr><name>path_info</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_history</name><argument_list>(<argument><expr>&amp;<name>changed</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>current</name></expr></argument>,
<argument><expr><name>strict_node_history</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>hist_start</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>info</name>-&gt;<name>done</name></name></expr>)</condition><then>
<expr_stmt><expr><name>any_histories_left</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
}</block></for>
<if>if <condition>(<expr><name>changed</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_children</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>cur_paths</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr><name><name>paths</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>histories</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>path_info</name> *</type><name>info</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>histories</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument>struct <expr><name>path_info</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>cur_paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name><name>info</name>-&gt;<name>path</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_combined_mergeinfo_changes</name><argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>cur_paths</name></expr></argument>,
<argument><expr><name>current</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_children</name> = (<call><name>apr_hash_count</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call> &gt; 0)</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>descending_order</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_log</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>discover_changed_paths</name></expr></argument>,
<argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>has_children</name></expr></argument>, <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>has_children</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_merged_revisions</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>,
<argument><expr><name>strict_node_history</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>limit</name> &amp;&amp; ++<name>send_count</name> &gt;= <name>limit</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></then>
<else>else <block>{
<if>if <condition>(<expr>! <name>revs</name></expr>)</condition><then>
<expr_stmt><expr><name>revs</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>64</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call> = <name>current</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mergeinfo</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>cur_rev</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cur_rev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>cur_rev</name> = <name>current</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>rev_mergeinfo</name></expr>)</condition><then>
<expr_stmt><expr><name>rev_mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>rev_mergeinfo</name></expr></argument>, <argument><expr><name>cur_rev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cur_rev</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>revs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>revs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_children</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name><name>revs</name>-&gt;<name>nelts</name></name> - <name>i</name> - 1</expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rev_mergeinfo</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mergeinfo</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>rev_mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>current</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_children</name> = (<call><name>apr_hash_count</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call> &gt; 0)</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_log</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>has_children</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>has_children</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_merged_revisions</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>,
<argument><expr><name>strict_node_history</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>limit</name> &amp;&amp; <name>i</name> + 1 &gt;= <name>limit</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_logs4</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>head</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>descending_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>hist_start</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>hist_end</name> <init>= <expr><name>end</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>head</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>start</name> = <name>head</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>end</name> = <name>head</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>start</name> &gt; <name>head</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_NO_SUCH_REVISION</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"No such revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>end</name> &gt; <name>head</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_NO_SUCH_REVISION</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"No such revision %ld"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>descending_order</name> = <name>start</name> &gt;= <name>end</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>descending_order</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hist_start</name> = <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hist_end</name> = <name>start</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <name>paths</name></expr>)</condition><then>
<expr_stmt><expr><name>paths</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(! <name>include_merged_revisions</name>)
&amp;&amp; ((! <name><name>paths</name>-&gt;<name>nelts</name></name>)
|| ((<name><name>paths</name>-&gt;<name>nelts</name></name> == 1)
&amp;&amp; (<call><name>svn_path_is_empty</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
|| (<call><name>strcmp</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"/"</expr></argument>)</argument_list></call> == 0))))</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>send_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>send_count</name> = <name>hist_end</name> - <name>hist_start</name> + 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>limit</name> &amp;&amp; <name>send_count</name> &gt; <name>limit</name></expr>)</condition><then>
<expr_stmt><expr><name>send_count</name> = <name>limit</name></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>send_count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name> <init>= <expr><name>hist_start</name> + <name>i</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>descending_order</name></expr>)</condition><then>
<expr_stmt><expr><name>rev</name> = <name>hist_end</name> - <name>i</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_log</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>authz_read_func</name></expr></argument>,
<argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>do_logs</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>hist_start</name></expr></argument>, <argument><expr><name>hist_end</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>strict_node_history</name></expr></argument>,
<argument><expr><name>include_merged_revisions</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>descending_order</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_logs3</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>receiver2_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_compat_wrap_log_receiver</name><argument_list>(<argument><expr>&amp;<name>receiver2</name></expr></argument>, <argument><expr>&amp;<name>receiver2_baton</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_repos_get_logs4</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>strict_node_history</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>svn_compat_log_revprops_in</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>,
<argument><expr><name>receiver2</name></expr></argument>, <argument><expr><name>receiver2_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_logs2</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_repos_authz_func_t</name></type> <name>authz_read_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>authz_read_baton</name></decl></param>,
<param><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_repos_get_logs3</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>strict_node_history</name></expr></argument>,
<argument><expr><name>authz_read_func</name></expr></argument>, <argument><expr><name>authz_read_baton</name></expr></argument>, <argument><expr><name>receiver</name></expr></argument>,
<argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_repos_get_logs</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_repos_get_logs3</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>strict_node_history</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
