<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_ra_neon/log.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_neon.h"</cpp:file></cpp:include>
<struct>struct <name>log_baton</name> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>want_cdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>cdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>revprop_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>want_author</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>want_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>want_message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_log_changed_path_t</name> *</type><name>this_path_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>receiver_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nest_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>limit_compat_bailout</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>reset_log_item</name><parameter_list>(<param><decl><type>struct <name>log_baton</name> *</type><name>lb</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revision</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>changed_paths</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>has_children</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_start_element</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>elem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>parent</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl>, *<decl><type ref="prev"/><name>copyfrom_revstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>log_baton</name> *</type><name>lb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name></type> <name><name>log_report_elements</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"log-report"</expr>, <expr><name>ELEM_log_report</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"log-item"</expr>, <expr><name>ELEM_log_item</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"date"</expr>, <expr><name>ELEM_log_date</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{
<expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"added-path"</expr>, <expr><name>ELEM_added_path</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"deleted-path"</expr>, <expr><name>ELEM_deleted_path</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"modified-path"</expr>, <expr><name>ELEM_modified_path</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"replaced-path"</expr>, <expr><name>ELEM_replaced_path</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"revprop"</expr>, <expr><name>ELEM_revprop</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{
<expr>"DAV:"</expr>, <expr><name>SVN_DAV__VERSION_NAME</name></expr>, <expr><name>ELEM_version_name</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{
<expr>"DAV:"</expr>, <expr>"creator-displayname"</expr>, <expr><name>ELEM_creator_displayname</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"comment"</expr>, <expr><name>ELEM_comment</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{
<expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"has-children"</expr>, <expr><name>ELEM_has_children</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name>
<init>= <expr><call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>log_report_elements</name></expr></argument>, <argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>elem</name> = <name>elm</name> ? <name><name>elm</name>-&gt;<name>id</name></name> : <name>SVN_RA_NEON__XML_DECLINE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>elm</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<switch>switch <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_creator_displayname</name></expr>:
</case><case>case <expr><name>ELEM_log_date</name></expr>:
</case><case>case <expr><name>ELEM_version_name</name></expr>:
</case><case>case <expr><name>ELEM_added_path</name></expr>:
</case><case>case <expr><name>ELEM_replaced_path</name></expr>:
</case><case>case <expr><name>ELEM_deleted_path</name></expr>:
</case><case>case <expr><name>ELEM_modified_path</name></expr>:
</case><case>case <expr><name>ELEM_revprop</name></expr>:
</case><case>case <expr><name>ELEM_comment</name></expr>:
<expr_stmt><expr><name><name>lb</name>-&gt;<name>want_cdata</name></name> = <name><name>lb</name>-&gt;<name>cdata</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>cdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_revprop</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lb</name>-&gt;<name>revprop_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>,
<argument><expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>,
<argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>lb</name>-&gt;<name>revprop_name</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in revprop element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>ELEM_has_children</name></expr>:
<expr_stmt><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>has_children</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name><name>lb</name>-&gt;<name>want_cdata</name></name> = <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<switch>switch <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_added_path</name></expr>:
</case><case>case <expr><name>ELEM_replaced_path</name></expr>:
</case><case>case <expr><name>ELEM_deleted_path</name></expr>:
</case><case>case <expr><name>ELEM_modified_path</name></expr>:
<expr_stmt><expr><name><name>lb</name>-&gt;<name>this_path_item</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*(<name><name>lb</name>-&gt;<name>this_path_item</name></name>)</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>-&gt;<name>this_path_item</name>-&gt;<name>copyfrom_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_added_path</name>) || (<name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_replaced_path</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lb</name>-&gt;<name>this_path_item</name>-&gt;<name>action</name></name>
= (<name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_added_path</name>) ? 'A' : 'R'</expr>;</expr_stmt>
<expr_stmt><expr><name>copyfrom_path</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-path"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copyfrom_revstr</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copyfrom_path</name> &amp;&amp; <name>copyfrom_revstr</name>
&amp;&amp; (<call><name>SVN_IS_VALID_REVNUM</name>
<argument_list>(<argument><expr><name>copyfrom_rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>copyfrom_revstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lb</name>-&gt;<name>this_path_item</name>-&gt;<name>copyfrom_path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>,
<argument><expr><name>copyfrom_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>-&gt;<name>this_path_item</name>-&gt;<name>copyfrom_rev</name></name> = <name>copyfrom_rev</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_deleted_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lb</name>-&gt;<name>this_path_item</name>-&gt;<name>action</name></name> = 'D'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>lb</name>-&gt;<name>this_path_item</name>-&gt;<name>action</name></name> = 'M'</expr>;</expr_stmt>
}</block></else></if></else></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name><name>lb</name>-&gt;<name>this_path_item</name></name> = <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_end_element</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>log_baton</name> *</type><name>lb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_version_name</name></expr>:
<expr_stmt><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revision</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>cdata</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ELEM_creator_displayname</name></expr>:
<if>if <condition>(<expr><name><name>lb</name>-&gt;<name>want_author</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_create_from_buf</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>cdata</name></name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>ELEM_log_date</name></expr>:
<if>if <condition>(<expr><name><name>lb</name>-&gt;<name>want_date</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_create_from_buf</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>cdata</name></name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>ELEM_added_path</name></expr>:
</case><case>case <expr><name>ELEM_replaced_path</name></expr>:
</case><case>case <expr><name>ELEM_deleted_path</name></expr>:
</case><case>case <expr><name>ELEM_modified_path</name></expr>: <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>cdata</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>changed_paths</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>changed_paths</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>changed_paths</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>lb</name>-&gt;<name>this_path_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>ELEM_revprop</name></expr>:
<if>if <condition>(<expr>! <name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>revprop_name</name></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_create_from_buf</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>cdata</name></name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ELEM_comment</name></expr>:
<if>if <condition>(<expr><name><name>lb</name>-&gt;<name>want_message</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_create_from_buf</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>cdata</name></name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>ELEM_log_item</name></expr>: <block>{
<if>if <condition>(<expr><name><name>lb</name>-&gt;<name>limit</name></name> &amp;&amp; (<name><name>lb</name>-&gt;<name>nest_level</name></name> == 0) &amp;&amp; (++<name><name>lb</name>-&gt;<name>count</name></name> &gt; <name><name>lb</name>-&gt;<name>limit</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lb</name>-&gt;<name>limit_compat_bailout</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr>(*(<name><name>lb</name>-&gt;<name>receiver</name></name>))(<name><name>lb</name>-&gt;<name>receiver_baton</name></name>,
<name><name>lb</name>-&gt;<name>log_entry</name></name>,
<name><name>lb</name>-&gt;<name>subpool</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>has_children</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lb</name>-&gt;<name>nest_level</name></name>++</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>log_entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>nest_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>-&gt;<name>nest_level</name></name>--</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>reset_log_item</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><name><name>lb</name>-&gt;<name>want_cdata</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__get_log</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
<param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>request_body</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>want_custom_revprops</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>log_baton</name></type> <name>lb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>, <decl><type ref="prev"/><name>bc_relative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>final_bc_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>use_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>log_request_head</name><index>[]</index></name>
<init>= <expr>"&lt;S:log-report xmlns:S=\"" <name>SVN_XML_NAMESPACE</name> "\"&gt;" <name>DEBUG_CR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>log_request_tail</name><index>[]</index></name> <init>= <expr>"&lt;/S:log-report&gt;" <name>DEBUG_CR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr><name>log_request_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:start-revision&gt;%ld"
"&lt;/S:start-revision&gt;"</expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:end-revision&gt;%ld"
"&lt;/S:end-revision&gt;"</expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>limit</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:limit&gt;%d&lt;/S:limit&gt;"</expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>discover_changed_paths</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:discover-changed-paths/&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>strict_node_history</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:strict-node-history/&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:include-merged-revisions/&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>revprops</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lb</name>.<name>want_author</name></name> = <name><name>lb</name>.<name>want_date</name></name> = <name><name>lb</name>.<name>want_message</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>want_custom_revprops</name> = <name>FALSE</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>revprops</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr>"&lt;S:revprop&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr>"&lt;/S:revprop&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>lb</name>.<name>want_author</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>lb</name>.<name>want_date</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>lb</name>.<name>want_message</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>want_custom_revprops</name> = <name>TRUE</name></expr>;</expr_stmt></else></if></else></if></else></if>
}</block></for>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:all-revprops/&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>.<name>want_author</name></name> = <name><name>lb</name>.<name>want_date</name></name> = <name><name>lb</name>.<name>want_message</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>want_custom_revprops</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>want_custom_revprops</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_log_revprops</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__has_capability</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>has_log_revprops</name></expr></argument>,
<argument><expr><name>SVN_RA_CAPABILITY_LOG_REVPROPS</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>has_log_revprops</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Server does not support custom revprops"
" via log"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>paths</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>this_path</name> <init>=
<expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr>"&lt;S:path&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr>"&lt;/S:path&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr><name>log_request_tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>.<name>receiver</name></name> = <name>receiver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>.<name>receiver_baton</name></name> = <name>receiver_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>.<name>subpool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>.<name>limit</name></name> = <name>limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>.<name>count</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>.<name>nest_level</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>.<name>limit_compat_bailout</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>.<name>cdata</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>.<name>log_entry</name></name> = <call><name>svn_log_entry_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lb</name>.<name>want_cdata</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_log_item</name><argument_list>(<argument><expr>&amp;<name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>use_rev</name> = (<name>start</name> &gt; <name>end</name>) ? <name>start</name> : <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ras</name></expr></argument>, <argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>use_rev</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>final_bc_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__parsed_request</name><argument_list>(<argument><expr><name>ras</name></expr></argument>,
<argument><expr>"REPORT"</expr></argument>,
<argument><expr><name>final_bc_url</name></expr></argument>,
<argument><expr><name><name>request_body</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>log_start_element</name></expr></argument>,
<argument><expr><name>svn_ra_neon__xml_collect_cdata</name></expr></argument>,
<argument><expr><name>log_end_element</name></expr></argument>,
<argument><expr>&amp;<name>lb</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>lb</name>.<name>subpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>lb</name>.<name>limit_compat_bailout</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
</unit>
