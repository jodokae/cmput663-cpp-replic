<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_ra_neon/file_revs.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_neon.h"</cpp:file></cpp:include>
<struct>struct <name>report_baton</name> <block>{
<decl_stmt><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>handler_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>rev_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>prop_diffs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>base64_prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>cdata_accum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>merged_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>had_txdelta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>reset_file_rev</name><parameter_list>(<param><decl><type>struct <name>report_baton</name> *</type><name>rb</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>path</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>revnum</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>rev_props</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>prop_diffs</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>subpool</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>merged_rev</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>had_txdelta</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>stream</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name></type> <name><name>report_elements</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"file-revs-report"</expr>, <expr><name>ELEM_file_revs_report</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"file-rev"</expr>, <expr><name>ELEM_file_rev</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"rev-prop"</expr>, <expr><name>ELEM_rev_prop</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"set-prop"</expr>, <expr><name>ELEM_set_prop</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"remove-prop"</expr>, <expr><name>ELEM_remove_prop</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"merged-revision"</expr>, <expr><name>ELEM_merged_revision</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"txdelta"</expr>, <expr><name>ELEM_txdelta</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_element</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>elem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userdata</name></decl></param>, <param><decl><type><name>int</name></type> <name>parent_state</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ln</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>report_baton</name> *</type><name>rb</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>att</name></decl>;</decl_stmt>
<expr_stmt><expr><name>elm</name> = <call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>report_elements</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>elm</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>elem</name> = <name>NE_XML_DECLINE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name>parent_state</name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_root</name></expr>:
<if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> != <name>ELEM_file_revs_report</name></expr>)</condition><then>
<return>return <expr><call><name>UNEXPECTED_ELEMENT</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr><name>ELEM_file_revs_report</name></expr>:
<if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_file_rev</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>reset_file_rev</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>att</name></expr>)</condition><then>
<return>return <expr><call><name>MISSING_ATTR</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr>"rev"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>revnum</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"path"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>att</name></expr>)</condition><then>
<return>return <expr><call><name>MISSING_ATTR</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr>"path"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>subpool</name></name></expr></argument>, <argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><call><name>UNEXPECTED_ELEMENT</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
<break>break;</break>
</case><case>case <expr><name>ELEM_file_rev</name></expr>:
<if>if <condition>(<expr><name><name>rb</name>-&gt;<name>had_txdelta</name></name></expr>)</condition><then>
<return>return <expr><call><name>UNEXPECTED_ELEMENT</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<switch>switch <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_rev_prop</name></expr>:
</case><case>case <expr><name>ELEM_set_prop</name></expr>:
<expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>att</name></expr>)</condition><then>
<return>return <expr><call><name>MISSING_ATTR</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>prop_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>subpool</name></name></expr></argument>, <argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"encoding"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>att</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>att</name></expr></argument>, <argument><expr>"base64"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>base64_prop</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>rb</name>-&gt;<name>base64_prop</name></name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>ELEM_remove_prop</name></expr>: <block>{
<decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>prop</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>prop_diffs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>att</name> || *<name>att</name> == '\0'</expr>)</condition><then>
<return>return <expr><call><name>MISSING_ATTR</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>prop</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>subpool</name></name></expr></argument>, <argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name>-&gt;<name>value</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block>
<break>break;</break>
</case><case>case <expr><name>ELEM_txdelta</name></expr>: <block>{
<decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>whandler</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>wbaton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>handler</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>handler_baton</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>revnum</name></name></expr></argument>,
<argument><expr><name><name>rb</name>-&gt;<name>rev_props</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>merged_rev</name></name></expr></argument>, <argument><expr>&amp;<name>whandler</name></expr></argument>,
<argument><expr>&amp;<name>wbaton</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>prop_diffs</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>whandler</name></expr>)</condition><then>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>stream</name></name> = <call><name>svn_base64_decode</name>
<argument_list>(<argument><expr><call><name>svn_txdelta_parse_svndiff</name><argument_list>(<argument><expr><name>whandler</name></expr></argument>, <argument><expr><name>wbaton</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name><name>rb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block>
<break>break;</break>
</case><case>case <expr><name>ELEM_merged_revision</name></expr>: <block>{
<expr_stmt><expr><name><name>rb</name>-&gt;<name>merged_rev</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block>
<break>break;</break>
</case><default>default:
<return>return <expr><call><name>UNEXPECTED_ELEMENT</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</return>
</default>}</block></switch>
<break>break;</break>
</case><default>default:
<return>return <expr><call><name>UNEXPECTED_ELEMENT</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr>*<name>elem</name> = <name><name>elm</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_string_t</name> *</type>
<name>extract_propval</name><parameter_list>(<param><decl><type>struct <name>report_baton</name> *</type><name>rb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>v</name> <init>= <expr><call><name>svn_string_create_from_buf</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>cdata_accum</name></name></expr></argument>,
<argument><expr><name><name>rb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>cdata_accum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>rb</name>-&gt;<name>base64_prop</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_base64_decode_string</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><name>v</name></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_element</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userdata</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>elt_name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>report_baton</name> *</type><name>rb</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_file_rev</name></expr>:
<if>if <condition>(<expr>!<name><name>rb</name>-&gt;<name>had_txdelta</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>handler</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>handler_baton</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>revnum</name></name></expr></argument>,
<argument><expr><name><name>rb</name>-&gt;<name>rev_props</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>merged_rev</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>rb</name>-&gt;<name>prop_diffs</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>subpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>ELEM_rev_prop</name></expr>:
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>rev_props</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>prop_name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>extract_propval</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ELEM_set_prop</name></expr>: <block>{
<decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>prop</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>prop_diffs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>prop</name>-&gt;<name>name</name></name> = <name><name>rb</name>-&gt;<name>prop_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name>-&gt;<name>value</name></name> = <call><name>extract_propval</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>ELEM_txdelta</name></expr>:
<if>if <condition>(<expr><name><name>rb</name>-&gt;<name>stream</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>stream</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>had_txdelta</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cdata_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userdata</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cdata</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>report_baton</name> *</type><name>rb</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_rev_prop</name></expr>:
</case><case>case <expr><name>ELEM_set_prop</name></expr>:
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>cdata_accum</name></name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ELEM_txdelta</name></expr>:
<if>if <condition>(<expr><name><name>rb</name>-&gt;<name>stream</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>l</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr>&amp;<name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>l</name> != <name>len</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_INCOMPLETE_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to write full amount to stream"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
</case>}</block></switch>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__get_file_revs</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
<param><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>request_body</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>, <decl><type ref="prev"/><name>bc_relative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>final_bc_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>http_status</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>report_baton</name></type> <name>rb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>request_headers</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>request_head</name><index>[]</index></name>
<init>= <expr>"&lt;S:file-revs-report xmlns:S=\"" <name>SVN_XML_NAMESPACE</name> "\"&gt;" <name>DEBUG_CR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>request_tail</name><index>[]</index></name>
<init>= <expr>"&lt;/S:file-revs-report&gt;"</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>request_headers</name></expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr>"svndiff1;q=0.9,svndiff;q=0.8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr><name>request_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:start-revision&gt;%ld"
"&lt;/S:start-revision&gt;"</expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:end-revision&gt;%ld"
"&lt;/S:end-revision&gt;"</expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:include-merged-revisions/&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr>"&lt;S:path&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr>"&lt;/S:path&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr><name>request_tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>handler</name></name> = <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>handler_baton</name></name> = <name>handler_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>cdata_accum</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>subpool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reset_file_rev</name><argument_list>(<argument><expr>&amp;<name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ras</name></expr></argument>, <argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>final_bc_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__parsed_request</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr>"REPORT"</expr></argument>, <argument><expr><name>final_bc_url</name></expr></argument>,
<argument><expr><name><name>request_body</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>start_element</name></expr></argument>, <argument><expr><name>cdata_handler</name></expr></argument>, <argument><expr><name>end_element</name></expr></argument>,
<argument><expr>&amp;<name>rb</name></expr></argument>, <argument><expr><name>request_headers</name></expr></argument>, <argument><expr>&amp;<name>http_status</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>http_status</name> == 501</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'get-file-revs' REPORT not implemented"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>rb</name>.<name>revnum</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_REQUEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The file-revs report didn't contain any "
"revisions"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>rb</name>.<name>subpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
