<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_ra_neon/lock.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_neon.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name></type> <name><name>lock_elements</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"DAV:"</expr>, <expr>"response"</expr>, <expr><name>ELEM_response</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"propstat"</expr>, <expr><name>ELEM_propstat</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"status"</expr>, <expr><name>ELEM_status</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"prop"</expr>, <expr><name>ELEM_prop</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"lockdiscovery"</expr>, <expr><name>ELEM_lock_discovery</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"activelock"</expr>, <expr><name>ELEM_lock_activelock</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"locktype"</expr>, <expr><name>ELEM_lock_type</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"lockscope"</expr>, <expr><name>ELEM_lock_scope</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"depth"</expr>, <expr><name>ELEM_lock_depth</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"owner"</expr>, <expr><name>ELEM_lock_owner</name></expr>, <expr><name>SVN_RA_NEON__XML_COLLECT</name></expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"timeout"</expr>, <expr><name>ELEM_lock_timeout</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"locktoken"</expr>, <expr><name>ELEM_lock_token</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"href"</expr>, <expr><name>ELEM_href</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr>""</expr>, <expr>""</expr>, <expr><name>ELEM_unknown</name></expr>, <expr><name>SVN_RA_NEON__XML_COLLECT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>cdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>xml_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>href</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>status_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>token</name></decl>;</decl_stmt>
}</block></struct></type> <name>lock_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>lock_start_element</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>elem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>parent</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lock_baton_t</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name> <init>=
<expr><call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>xml_table</name></name></expr></argument>, <argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>elm</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>elem</name> = <name>NE_XML_DECLINE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_lock_owner</name></expr>:
</case><case>case <expr><name>ELEM_lock_timeout</name></expr>:
</case><case>case <expr><name>ELEM_lock_depth</name></expr>:
</case><case>case <expr><name>ELEM_status</name></expr>:
<expr_stmt><expr><name><name>b</name>-&gt;<name>cdata</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ELEM_href</name></expr>:
<if>if <condition>(<expr><name>parent</name> == <name>ELEM_lock_token</name>
|| <name>parent</name> == <name>ELEM_response</name></expr>)</condition><then>
<expr_stmt><expr><name><name>b</name>-&gt;<name>cdata</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name><name>b</name>-&gt;<name>cdata</name></name> = <name>NULL</name></expr>;</expr_stmt>
</default>}</block></switch>
<expr_stmt><expr><name><name>b</name>-&gt;<name>parent</name></name> = <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>elem</name> = <name><name>elm</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>lock_end_element</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lock_baton_t</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>cdata</name></name></expr>)</condition><then>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_lock_owner</name></expr>:
<expr_stmt><expr><name><name>b</name>-&gt;<name>owner</name></name> = <name><name>b</name>-&gt;<name>cdata</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ELEM_lock_timeout</name></expr>:
<expr_stmt><expr><name><name>b</name>-&gt;<name>timeout</name></name> = <name><name>b</name>-&gt;<name>cdata</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ELEM_lock_depth</name></expr>:
<expr_stmt><expr><name><name>b</name>-&gt;<name>depth</name></name> = <name><name>b</name>-&gt;<name>cdata</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ELEM_href</name></expr>:
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>parent</name></name> == <name>ELEM_lock_token</name></expr>)</condition><then>
<expr_stmt><expr><name><name>b</name>-&gt;<name>token</name></name> = <name><name>b</name>-&gt;<name>cdata</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>b</name>-&gt;<name>href</name></name> = <name><name>b</name>-&gt;<name>cdata</name></name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>ELEM_status</name></expr>:
<expr_stmt><expr><name><name>b</name>-&gt;<name>status_line</name></name> = <name><name>b</name>-&gt;<name>cdata</name></name></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch></then></if>
<expr_stmt><expr><name><name>b</name>-&gt;<name>cdata</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>lock_cdata</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cdata</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lock_baton_t</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>cdata</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>cdata</name></name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>lock_from_baton</name><parameter_list>(<param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>,
<param><decl><type><name>svn_ra_neon__request_t</name> *</type><name>req</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>lock_baton_t</name> *</type><name>lrb</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lck</name> <init>= <expr><call><name>svn_lock_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>lrb</name>-&gt;<name>token</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>lck</name>-&gt;<name>token</name></name> = <name><name>lrb</name>-&gt;<name>token</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr>*<name>lock</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></else></if>
<expr_stmt><expr><name>val</name> = <call><name>ne_get_response_header</name><argument_list>(<argument><expr><name><name>req</name>-&gt;<name>ne_req</name></name></expr></argument>, <argument><expr><name>SVN_DAV_CREATIONDATE_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;(<name><name>lck</name>-&gt;<name>creation_date</name></name>)</expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid creation date header value in response."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>val</name> = <call><name>ne_get_response_header</name><argument_list>(<argument><expr><name><name>req</name>-&gt;<name>ne_req</name></name></expr></argument>, <argument><expr><name>SVN_DAV_LOCK_OWNER_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name></expr>)</condition><then>
<expr_stmt><expr><name><name>lck</name>-&gt;<name>owner</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>lrb</name>-&gt;<name>owner</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>lck</name>-&gt;<name>comment</name></name> = <name><name>lrb</name>-&gt;<name>owner</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>path</name></expr>)</condition><then>
<expr_stmt><expr><name><name>lck</name>-&gt;<name>path</name></name> = <name>path</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>lrb</name>-&gt;<name>timeout</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>timeout_str</name> <init>= <expr><name><name>lrb</name>-&gt;<name>timeout</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>timeout_str</name></expr></argument>, <argument><expr>"Infinite"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>"Second-"</expr></argument>, <argument><expr><name>timeout_str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr>"Second-"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>time_offset</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr>&amp;(<name><name>timeout_str</name><index>[<expr>7</expr>]</index></name>)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>lck</name>-&gt;<name>expiration_date</name></name> = <name><name>lck</name>-&gt;<name>creation_date</name></name>
+ <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>time_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_RESPONSE_HEADER_BADNESS</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid timeout value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then> <else>else
<expr_stmt><expr><name><name>lck</name>-&gt;<name>expiration_date</name></name> = 0</expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr>*<name>lock</name> = <name>lck</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_lock</name><parameter_list>(<param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comment</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>current_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__request_t</name> *</type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ne_uri</name></type> <name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>fs_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ne_xml_parser</name> *</type><name>lck_parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lock_baton_t</name> *</type><name>lrb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>lrb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>fs_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ne_uri_parse</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_CREATING_REQUEST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to parse URI '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>req</name> = <call><name>svn_ra_neon__request_create</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr>"LOCK"</expr></argument>, <argument><expr><name><name>uri</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lrb</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lrb</name>-&gt;<name>xml_table</name></name> = &amp;(<name><name>lock_elements</name><index>[<expr>3</expr>]</index></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>lck_parser</name> = <call><name>svn_ra_neon__xml_parser_create</name>
<argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>ne_accept_2xx</name></expr></argument>,
<argument><expr><name>lock_start_element</name></expr></argument>, <argument><expr><name>lock_cdata</name></expr></argument>, <argument><expr><name>lock_end_element</name></expr></argument>, <argument><expr><name>lrb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>body</name> = <call><name>svn_stringbuf_createf</name>
<argument_list>(<argument><expr><name><name>req</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;" <name>DEBUG_CR</name>
"&lt;D:lockinfo xmlns:D=\"DAV:\"&gt;" <name>DEBUG_CR</name>
" &lt;D:lockscope&gt;&lt;D:exclusive /&gt;&lt;/D:lockscope&gt;" <name>DEBUG_CR</name>
" &lt;D:locktype&gt;&lt;D:write /&gt;&lt;/D:locktype&gt;" <name>DEBUG_CR</name>
"%s"
"&lt;/D:lockinfo&gt;"</expr></argument>,
<argument><expr>(<name>comment</name>
? <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>req</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>" &lt;D:owner&gt;%s&lt;/D:owner&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call>
: "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>req</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"Depth"</expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"Timeout"</expr></argument>, <argument><expr>"Infinite"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>,
<argument><expr>"text/xml; charset=\"utf-8\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>force</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>SVN_DAV_OPTIONS_HEADER</name></expr></argument>,
<argument><expr><name>SVN_DAV_OPTION_LOCK_STEAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>current_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>SVN_DAV_VERSION_NAME_HEADER</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>req</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>current_rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__request_dispatch</name><argument_list>(<argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name><name>body</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr>200</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
<expr_stmt><expr><name>err</name> = <call><name>lock_from_baton</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>fs_path</name>.<name>data</name></name></expr></argument>, <argument><expr><name>lrb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>svn_ra_neon__request_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__lock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>path_revs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comment</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_ra_lock_callback_t</name></type> <name>lock_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>lock_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>ret_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>revnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>callback_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>revnum</name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>do_lock</name><argument_list>(<argument><expr>&amp;<name>lock</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr>*<name>revnum</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; !<call><name>SVN_ERR_IS_LOCK_ERROR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret_err</name> = <name>err</name></expr>;</expr_stmt>
<goto>goto <name>departure</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>lock_func</name></expr>)</condition><then>
<expr_stmt><expr><name>callback_err</name> = <call><name>lock_func</name><argument_list>(<argument><expr><name>lock_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>err</name> ? <name>NULL</name> : <name>lock</name></expr></argument>,
<argument><expr><name>err</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>callback_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret_err</name> = <name>callback_err</name></expr>;</expr_stmt>
<goto>goto <name>departure</name>;</goto>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>departure</name>:</label>
<return>return <expr><call><name>svn_ra_neon__maybe_store_auth_info_after_result</name><argument_list>(<argument><expr><name>ret_err</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_unlock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ne_uri</name></type> <name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ne_uri_parse</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_CREATING_REQUEST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to parse URI '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>url_path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>uri</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>token</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_lock</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>lock</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>lock</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_LOCKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not locked in the repository"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>token</name> = <name><name>lock</name>-&gt;<name>token</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"Lock-Token"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;%s&gt;"</expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>force</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>SVN_DAV_OPTIONS_HEADER</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>SVN_DAV_OPTION_LOCK_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>svn_ra_neon__simple_request</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>, <argument><expr>"UNLOCK"</expr></argument>, <argument><expr><name>url_path</name></expr></argument>,
<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>204</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__unlock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>path_tokens</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_ra_lock_callback_t</name></type> <name>lock_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>lock_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>ret_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path_tokens</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>callback_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <name>key</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><name>token</name> = <name>val</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>token</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>err</name> = <call><name>do_unlock</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; !<call><name>SVN_ERR_IS_UNLOCK_ERROR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret_err</name> = <name>err</name></expr>;</expr_stmt>
<goto>goto <name>departure</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>lock_func</name></expr>)</condition><then>
<expr_stmt><expr><name>callback_err</name> = <call><name>lock_func</name><argument_list>(<argument><expr><name>lock_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>callback_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret_err</name> = <name>callback_err</name></expr>;</expr_stmt>
<goto>goto <name>departure</name>;</goto>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>departure</name>:</label>
<return>return <expr><call><name>svn_ra_neon__maybe_store_auth_info_after_result</name><argument_list>(<argument><expr><name>ret_err</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__get_lock_internal</name><parameter_list>(<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl></param>,
<param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>fs_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ne_uri</name></type> <name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lock_baton_t</name> *</type><name>lrb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>lrb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__request_t</name> *</type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ne_xml_parser</name> *</type><name>lck_parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>body</name> <init>=
<expr>"&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;" <name>DEBUG_CR</name>
"&lt;D:propfind xmlns:D=\"DAV:\"&gt;" <name>DEBUG_CR</name>
" &lt;D:prop&gt;" <name>DEBUG_CR</name>
" &lt;D:lockdiscovery /&gt;" <name>DEBUG_CR</name>
" &lt;/D:prop&gt;" <name>DEBUG_CR</name>
"&lt;/D:propfind&gt;"</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>fs_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__maybe_store_auth_info_after_result</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ne_uri_parse</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>uri</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>req</name> = <call><name>svn_ra_neon__request_create</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr>"PROPFIND"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lrb</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lrb</name>-&gt;<name>xml_table</name></name> = <name>lock_elements</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lck_parser</name> = <call><name>svn_ra_neon__xml_parser_create</name>
<argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>ne_accept_207</name></expr></argument>, <argument><expr><name>lock_start_element</name></expr></argument>, <argument><expr><name>lock_cdata</name></expr></argument>, <argument><expr><name>lock_end_element</name></expr></argument>, <argument><expr><name>lrb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>req</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"Depth"</expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>,
<argument><expr>"text/xml; charset=\"utf-8\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__request_dispatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>body</name></expr></argument>,
<argument><expr>200</expr></argument>, <argument><expr>207</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_quick_wrap</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to fetch lock information"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>lock_from_baton</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>fs_path</name>.<name>data</name></name></expr></argument>, <argument><expr><name>lrb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>svn_ra_neon__request_destroy</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__get_lock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_ra_neon__get_lock_internal</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
