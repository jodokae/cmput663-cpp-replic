<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_ra_neon/replay.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_neon.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>dirs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>file_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>whandler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>whandler_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>svndiff_decoder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>base64_decoder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>prop_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>prop_accum</name></decl>;</decl_stmt>
}</block></struct></type> <name>replay_baton_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_DIR</name><parameter_list>(<param><type><name>rb</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(APR_ARRAY_IDX((rb)-&gt;dirs, (rb)-&gt;dirs-&gt;nelts - 1, dir_item_t))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>dir_item_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>push_dir</name><parameter_list>(<param><decl><type><name>replay_baton_t</name> *</type><name>rb</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_item_t</name> *</type><name>di</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>dirs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>baton</name></name> = <name>baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>di</name>-&gt;<name>file_pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name></type> <name><name>editor_report_elements</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"editor-report"</expr>, <expr><name>ELEM_editor_report</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"target-revision"</expr>, <expr><name>ELEM_target_revision</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"open-root"</expr>, <expr><name>ELEM_open_root</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"delete-entry"</expr>, <expr><name>ELEM_delete_entry</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"open-directory"</expr>, <expr><name>ELEM_open_directory</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"add-directory"</expr>, <expr><name>ELEM_add_directory</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"open-file"</expr>, <expr><name>ELEM_open_file</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"add-file"</expr>, <expr><name>ELEM_add_file</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"close-file"</expr>, <expr><name>ELEM_close_file</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"close-directory"</expr>, <expr><name>ELEM_close_directory</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"apply-textdelta"</expr>, <expr><name>ELEM_apply_textdelta</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"change-file-prop"</expr>, <expr><name>ELEM_change_file_prop</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"change-dir-prop"</expr>, <expr><name>ELEM_change_dir_prop</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_element</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>elem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>parent_state</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>elt_name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>replay_baton_t</name> *</type><name>rb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name>
<init>= <expr><call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>editor_report_elements</name></expr></argument>, <argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>elm</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>elem</name> = <name>NE_XML_DECLINE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>parent_state</name> == <name>ELEM_root</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> != <name>ELEM_editor_report</name></expr>)</condition><then>
<return>return <expr><call><name>UNEXPECTED_ELEMENT</name><argument_list>(<argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>parent_state</name> != <name>ELEM_editor_report</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>UNEXPECTED_ELEMENT</name><argument_list>(<argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<switch>switch <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_target_revision</name></expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>crev</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>crev</name></expr>)</condition><then>
<return>return <expr><call><name>MISSING_ATTR</name><argument_list>(<argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>, <argument><expr>"rev"</expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>set_target_revision</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>edit_baton</name></name></expr></argument>,
<argument><expr><call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>crev</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block>
<break>break;</break>
</case><case>case <expr><name>ELEM_open_root</name></expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>crev</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>crev</name></expr>)</condition><then>
<return>return <expr><call><name>MISSING_ATTR</name><argument_list>(<argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>, <argument><expr>"rev"</expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>dir_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>open_root</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>edit_baton</name></name></expr></argument>,
<argument><expr><call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>crev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr>&amp;<name>dir_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push_dir</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block>
<break>break;</break>
</case><case>case <expr><name>ELEM_delete_entry</name></expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>crev</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>path</name></expr>)</condition><then>
<return>return <expr><call><name>MISSING_ATTR</name><argument_list>(<argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <if>if <condition>(<expr>! <name>crev</name></expr>)</condition><then>
<return>return <expr><call><name>MISSING_ATTR</name><argument_list>(<argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>, <argument><expr>"rev"</expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<decl_stmt><decl><type><name>dir_item_t</name> *</type><name>di</name> <init>= <expr>&amp;<call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>crev</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>di</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name><name>di</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block>
<break>break;</break>
</case><case>case <expr><name>ELEM_open_directory</name></expr>:
</case><case>case <expr><name>ELEM_add_directory</name></expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>crev</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>name</name></expr>)</condition><then>
<return>return <expr><call><name>MISSING_ATTR</name><argument_list>(<argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<decl_stmt><decl><type><name>dir_item_t</name> *</type><name>parent</name> <init>= <expr>&amp;<call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>dir_baton</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>crev</name></expr>)</condition><then>
<expr_stmt><expr><name>rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>crev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_open_directory</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>open_directory</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>dir_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_add_directory</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cpath</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-path"</expr></argument>,
<argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>crev</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>crev</name></expr>)</condition><then>
<expr_stmt><expr><name>rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>crev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr>&amp;<name>dir_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><call><name>push_dir</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block>
<break>break;</break>
</case><case>case <expr><name>ELEM_open_file</name></expr>:
</case><case>case <expr><name>ELEM_add_file</name></expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dir_item_t</name> *</type><name>parent</name> <init>= <expr>&amp;<call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>path</name></expr>)</condition><then>
<return>return <expr><call><name>MISSING_ATTR</name><argument_list>(<argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_add_file</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cpath</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-path"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>crev</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>crev</name></expr>)</condition><then>
<expr_stmt><expr><name>rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>crev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name><name>parent</name>-&gt;<name>file_pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>crev</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>crev</name></expr>)</condition><then>
<expr_stmt><expr><name>rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>crev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>open_file</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name><name>parent</name>-&gt;<name>file_pool</name></name></expr></argument>,
<argument><expr>&amp;<name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block>
<break>break;</break>
</case><case>case <expr><name>ELEM_apply_textdelta</name></expr>:
<if>if <condition>(<expr>! <name><name>rb</name>-&gt;<name>file_baton</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Got apply-textdelta element without preceding "
"add-file or open-file"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>checksum</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"checksum"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>apply_textdelta</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>,
<argument><expr><name>checksum</name></expr></argument>,
<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>file_pool</name></expr></argument>,
<argument><expr>&amp;<name><name>rb</name>-&gt;<name>whandler</name></name></expr></argument>,
<argument><expr>&amp;<name><name>rb</name>-&gt;<name>whandler_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>svndiff_decoder</name></name> = <call><name>svn_txdelta_parse_svndiff</name>
<argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>whandler</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>whandler_baton</name></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>file_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>base64_decoder</name></name> = <call><name>svn_base64_decode</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>svndiff_decoder</name></name></expr></argument>,
<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>file_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>ELEM_close_file</name></expr>:
<if>if <condition>(<expr>! <name><name>rb</name>-&gt;<name>file_baton</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Got close-file element without preceding "
"add-file or open-file"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>checksum</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"checksum"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>close_file</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>,
<argument><expr><name>checksum</name></expr></argument>,
<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>file_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>file_baton</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>ELEM_close_directory</name></expr>:
<if>if <condition>(<expr><name><name>rb</name>-&gt;<name>dirs</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Got close-directory element without ever opening "
"a directory"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<decl_stmt><decl><type><name>dir_item_t</name> *</type><name>di</name> <init>= <expr>&amp;<call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>close_directory</name></name><argument_list>(<argument><expr><name><name>di</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name><name>di</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>di</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_array_pop</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>dirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>ELEM_change_file_prop</name></expr>:
</case><case>case <expr><name>ELEM_change_dir_prop</name></expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>name</name></expr>)</condition><then>
<return>return <expr><call><name>MISSING_ATTR</name><argument_list>(<argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>, <argument><expr>"name"</expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>prop_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"del"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>prop_accum</name></name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>rb</name>-&gt;<name>prop_accum</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>prop_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>prop_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>prop_pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block>
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr>*<name>elem</name> = <name><name>elm</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_element</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>elt_name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>replay_baton_t</name> *</type><name>rb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name>
<init>= <expr><call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>editor_report_elements</name></expr></argument>, <argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>elm</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<switch>switch <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_editor_report</name></expr>:
<if>if <condition>(<expr><name><name>rb</name>-&gt;<name>dirs</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>dirs</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>dir_item_t</name></expr></argument>)</argument_list></call>.<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
<break>break;</break>
</case><case>case <expr><name>ELEM_apply_textdelta</name></expr>:
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>base64_decoder</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>whandler</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>whandler_baton</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>svndiff_decoder</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>base64_decoder</name></name> = <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ELEM_change_file_prop</name></expr>:
</case><case>case <expr><name>ELEM_change_dir_prop</name></expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>decoded_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>prop</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>rb</name>-&gt;<name>prop_accum</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>prop</name>.<name>data</name></name> = <name><name>rb</name>-&gt;<name>prop_accum</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name>.<name>len</name></name> = <name><name>rb</name>-&gt;<name>prop_accum</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>decoded_value</name> = <call><name>svn_base64_decode_string</name><argument_list>(<argument><expr>&amp;<name>prop</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>prop_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>decoded_value</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_change_dir_prop</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>change_dir_prop</name></name><argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>baton</name></expr></argument>,
<argument><expr><name><name>rb</name>-&gt;<name>prop_name</name></name></expr></argument>,
<argument><expr><name>decoded_value</name></expr></argument>,
<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>,
<argument><expr><name><name>rb</name>-&gt;<name>prop_name</name></name></expr></argument>,
<argument><expr><name>decoded_value</name></expr></argument>,
<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>file_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cdata_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cdata</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>replay_baton_t</name> *</type><name>rb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nlen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_apply_textdelta</name></expr>:
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>base64_decoder</name></name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr>&amp;<name>nlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nlen</name> != <name>len</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_STREAM_UNEXPECTED_EOF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error writing stream: unexpected EOF"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<break>break;</break>
</case><case>case <expr><name>ELEM_change_dir_prop</name></expr>:
</case><case>case <expr><name>ELEM_change_file_prop</name></expr>:
<if>if <condition>(<expr>! <name><name>rb</name>-&gt;<name>prop_accum</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Got cdata content for a prop delete"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>prop_accum</name></name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<break>break;</break>
</case>}</block></switch>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__replay</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>send_deltas</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_baton_t</name></type> <name>rb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name>
<init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:replay-report xmlns:S=\"svn:\"&gt;\n"
" &lt;S:revision&gt;%ld&lt;/S:revision&gt;\n"
" &lt;S:low-water-mark&gt;%ld&lt;/S:low-water-mark&gt;\n"
" &lt;S:send-deltas&gt;%d&lt;/S:send-deltas&gt;\n"
"&lt;/S:replay-report&gt;"</expr></argument>,
<argument><expr><name>revision</name></expr></argument>, <argument><expr><name>low_water_mark</name></expr></argument>, <argument><expr><name>send_deltas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>rb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>editor</name></name> = <name>editor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>dirs</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dir_item_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>prop_pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>prop_accum</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>rb</name>.<name>prop_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_ra_neon__parsed_request</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr>"REPORT"</expr></argument>, <argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>start_element</name></expr></argument>,
<argument><expr><name>cdata_handler</name></expr></argument>,
<argument><expr><name>end_element</name></expr></argument>,
<argument><expr>&amp;<name>rb</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__replay_range</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start_revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end_revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>send_deltas</name></decl></param>,
<param><decl><type><name>svn_ra_replay_revstart_callback_t</name></type> <name>revstart_func</name></decl></param>,
<param><decl><type><name>svn_ra_replay_revfinish_callback_t</name></type> <name>revfinish_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>replay_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
