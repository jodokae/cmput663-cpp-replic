<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_ra_neon/get_locations.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ne_basic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_neon.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name></type> <name><name>gloc_report_elements</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"get-locations-report"</expr>, <expr><name>ELEM_get_locations_report</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"location"</expr>, <expr><name>ELEM_location</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>get_locations_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>gloc_start_element</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>elem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userdata</name></decl></param>, <param><decl><type><name>int</name></type> <name>parent_state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ln</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>get_locations_baton_t</name> *</type><name>baton</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name></decl>;</decl_stmt>
<expr_stmt><expr><name>elm</name> = <call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>gloc_report_elements</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>elm</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>elem</name> = <name>NE_XML_DECLINE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>parent_state</name> == <name>ELEM_get_locations_report</name>
&amp;&amp; <name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_location</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then>
<expr_stmt><expr><name>rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>path</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"path"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call> &amp;&amp; <name>path</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>hash</name></name></expr></argument>,
<argument><expr><call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Expected a valid revnum and path"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then></if>
<expr_stmt><expr>*<name>elem</name> = <name><name>elm</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__get_locations</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>locations</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relative_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>location_revisions</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>request_body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>get_locations_baton_t</name></type> <name>request_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relative_path_quoted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>, <decl><type ref="prev"/><name>bc_relative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>final_bc_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status_code</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>locations</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>request_body</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr>"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;" <name>DEBUG_CR</name>
"&lt;S:get-locations xmlns:S=\"" <name>SVN_XML_NAMESPACE</name>
"\" xmlns:D=\"DAV:\"&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr>"&lt;S:path&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>relative_path_quoted</name> = <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>relative_path</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr><name>relative_path_quoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr>"&lt;/S:path&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:peg-revision&gt;%ld"
"&lt;/S:peg-revision&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>location_revisions</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>location_revisions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:location-revision&gt;%ld"
"&lt;/S:location-revision&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>request_body</name></expr></argument>, <argument><expr>"&lt;/S:get-locations&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>request_baton</name>.<name>ras</name></name> = <name>ras</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>request_baton</name>.<name>hash</name></name> = *<name>locations</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>request_baton</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ras</name></expr></argument>, <argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>final_bc_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__parsed_request</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr>"REPORT"</expr></argument>, <argument><expr><name>final_bc_url</name></expr></argument>,
<argument><expr><name><name>request_body</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>gloc_start_element</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>request_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>status_code</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status_code</name> == 501</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'get-locations' REPORT not implemented"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
</unit>
