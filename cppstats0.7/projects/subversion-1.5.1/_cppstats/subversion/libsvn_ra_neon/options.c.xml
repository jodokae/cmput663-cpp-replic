<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_ra_neon/options.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_neon.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name></type> <name><name>options_elements</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"DAV:"</expr>, <expr>"activity-collection-set"</expr>, <expr><name>ELEM_activity_coll_set</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"href"</expr>, <expr><name>ELEM_href</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"options-response"</expr>, <expr><name>ELEM_options_response</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>want_cdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>cdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>activity_coll</name></decl>;</decl_stmt>
}</block></struct></type> <name>options_ctx_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>validate_element</name><parameter_list>(<param><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>parent</name></decl></param>, <param><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>child</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>parent</name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_root</name></expr>:
<if>if <condition>(<expr><name>child</name> == <name>ELEM_options_response</name></expr>)</condition><then>
<return>return <expr><name>child</name></expr>;</return></then>
<else>else
<return>return <expr><name>SVN_RA_NEON__XML_INVALID</name></expr>;</return></else></if>
</case><case>case <expr><name>ELEM_options_response</name></expr>:
<if>if <condition>(<expr><name>child</name> == <name>ELEM_activity_coll_set</name></expr>)</condition><then>
<return>return <expr><name>child</name></expr>;</return></then>
<else>else
<return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return></else></if>
</case><case>case <expr><name>ELEM_activity_coll_set</name></expr>:
<if>if <condition>(<expr><name>child</name> == <name>ELEM_href</name></expr>)</condition><then>
<return>return <expr><name>child</name></expr>;</return></then>
<else>else
<return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return></else></if>
</case><default>default:
<return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_element</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>elem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>parent</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>options_ctx_t</name> *</type><name>oc</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name>
<init>= <expr><call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>options_elements</name></expr></argument>, <argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>elem</name> = <name>elm</name> ? <call><name>validate_element</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>elm</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call> : <name>SVN_RA_NEON__XML_DECLINE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>elem</name> &lt; 1</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name> == <name>ELEM_href</name></expr>)</condition><then>
<expr_stmt><expr><name><name>oc</name>-&gt;<name>want_cdata</name></name> = <name><name>oc</name>-&gt;<name>cdata</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>oc</name>-&gt;<name>want_cdata</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_element</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>options_ctx_t</name> *</type><name>oc</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>state</name> == <name>ELEM_href</name></expr>)</condition><then>
<expr_stmt><expr><name><name>oc</name>-&gt;<name>activity_coll</name></name> = <call><name>svn_string_create_from_buf</name><argument_list>(<argument><expr><name><name>oc</name>-&gt;<name>cdata</name></name></expr></argument>, <argument><expr><name><name>oc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__get_activity_collection</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>activity_coll</name></decl></param>,
<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>options_ctx_t</name></type> <name>oc</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
ne_add_response_header_handler(req, "dav",
ne_duplicate_header, &amp;dav_header);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>oc</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oc</name>.<name>cdata</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__parsed_request</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr>"OPTIONS"</expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr>"&lt;?xml version=\"1.0\" "
"encoding=\"utf-8\"?&gt;"
"&lt;D:options xmlns:D=\"DAV:\"&gt;"
"&lt;D:activity-collection-set/&gt;"
"&lt;/D:options&gt;"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>start_element</name></expr></argument>,
<argument><expr><name>svn_ra_neon__xml_collect_cdata</name></expr></argument>,
<argument><expr><name>end_element</name></expr></argument>, <argument><expr>&amp;<name>oc</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>oc</name>.<name>activity_coll</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The OPTIONS response did not include the "
"requested activity-collection-set; "
"this often means that "
"the URL is not WebDAV-enabled"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>activity_coll</name> = <name><name>oc</name>.<name>activity_coll</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
