<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_ra_neon/commit.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uuid.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_neon.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vsn_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wr_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>local_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>version_rsrc_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>activity_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>valid_targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_get_wc_prop_func_t</name></type> <name>get_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_push_wc_prop_func_t</name></type> <name>push_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>cb_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>disable_merge_response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_commit_callback2_t</name></type> <name>callback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>callback_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>tokens</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl>;</decl_stmt>
}</block></struct></type> <name>commit_ctx_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>tmpfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>put_baton_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>prop_changes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>prop_deletes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>created</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>copied</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>put_baton_t</name> *</type><name>put_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
}</block></struct></type> <name>resource_baton_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ne_propname</name></type> <name><name>fetch_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"DAV:"</expr>, <expr>"checked-in"</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ne_propname</name></type> <name>log_message_prop</name> <init>= <expr><block>{ <expr><name>SVN_DAV_PROP_NS_SVN</name></expr>, <expr>"log"</expr> }</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>version_rsrc_t</name> *</type> <name>dup_resource</name><parameter_list>(<param><decl><type><name>version_rsrc_t</name> *</type><name>base</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rsrc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>revision</name></name> = <name><name>base</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>url</name></name> = <name><name>base</name>-&gt;<name>url</name></name> ?
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>vsn_url</name></name> = <name><name>base</name>-&gt;<name>vsn_url</name></name> ?
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>vsn_url</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>wr_url</name></name> = <name><name>base</name>-&gt;<name>wr_url</name></name> ?
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>wr_url</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>local_path</name></name> = <name><name>base</name>-&gt;<name>local_path</name></name> ?
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>local_path</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>rsrc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>delete_activity</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>commit_ctx_t</name> *</type><name>cc</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_ra_neon__simple_request</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr>"DELETE"</expr></argument>,
<argument><expr><name><name>cc</name>-&gt;<name>activity_url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>204</expr></argument> ,
<argument><expr>404</expr></argument> , <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>get_version_url</name><parameter_list>(<param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>version_rsrc_t</name> *</type><name>parent</name></decl></param>,
<param><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>propres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>url_str</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>force</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cc</name>-&gt;<name>get_func</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>vsn_url_value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>cc</name>-&gt;<name>get_func</name></name>)<argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>cb_baton</name></name></expr></argument>,
<argument><expr><name><name>rsrc</name>-&gt;<name>local_path</name></name></expr></argument>,
<argument><expr><name>SVN_RA_NEON__LP_VSN_URL</name></expr></argument>,
<argument><expr>&amp;<name>vsn_url_value</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>vsn_url_value</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>vsn_url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>vsn_url_value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>parent</name> &amp;&amp; <name><name>parent</name>-&gt;<name>vsn_url</name></name> &amp;&amp; <name><name>parent</name>-&gt;<name>revision</name></name> == <name><name>rsrc</name>-&gt;<name>revision</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>vsn_url</name></name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>vsn_url</name></name></expr></argument>,
<argument><expr><name><name>rsrc</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name><name>rsrc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>rsrc</name>-&gt;<name>revision</name></name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> = <name><name>rsrc</name>-&gt;<name>url</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_relative</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
<argument><expr><name><name>rsrc</name>-&gt;<name>url</name></name></expr></argument>,
<argument><expr><name><name>rsrc</name>-&gt;<name>revision</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr>&amp;<name>propres</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fetch_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url_str</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>propres</name>-&gt;<name>propset</name></name></expr></argument>,
<argument><expr><name>SVN_RA_NEON__PROP_CHECKED_IN</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>url_str</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Could not fetch the Version Resource URL "
"(needed during an import or when it is "
"missing from the local, cached props)"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>vsn_url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>url_str</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cc</name>-&gt;<name>push_func</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>cc</name>-&gt;<name>push_func</name></name>)<argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>cb_baton</name></name></expr></argument>,
<argument><expr><name><name>rsrc</name>-&gt;<name>local_path</name></name></expr></argument>,
<argument><expr><name>SVN_RA_NEON__LP_VSN_URL</name></expr></argument>,
<argument><expr><name>url_str</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>get_activity_collection</name><parameter_list>(<param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>collection</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>force</name> &amp;&amp; <name><name>cc</name>-&gt;<name>get_func</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>cc</name>-&gt;<name>get_func</name></name>)<argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>cb_baton</name></name></expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr><name>SVN_RA_NEON__LP_ACTIVITY_COLL</name></expr></argument>,
<argument><expr><name>collection</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>collection</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_activity_collection</name><argument_list>(<argument><expr><name>collection</name></expr></argument>,
<argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
<argument><expr><name><name>cc</name>-&gt;<name>ras</name>-&gt;<name>root</name>.<name>path</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cc</name>-&gt;<name>push_func</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>cc</name>-&gt;<name>push_func</name></name>)<argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>cb_baton</name></name></expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr><name>SVN_RA_NEON__LP_ACTIVITY_COLL</name></expr></argument>,
<argument><expr>*<name>collection</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>create_activity</name><parameter_list>(<param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type> <name>activity_collection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid_buf</name> <init>= <expr><call><name>svn_uuid_generate</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_activity_collection</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr>&amp;<name>activity_collection</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>activity_collection</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>uuid_buf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__simple_request</name><argument_list>(<argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
<argument><expr>"MKACTIVITY"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>201</expr></argument> ,
<argument><expr>404</expr></argument> , <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>code</name> == 404</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_activity_collection</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr>&amp;<name>activity_collection</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>activity_collection</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>uuid_buf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__simple_request</name><argument_list>(<argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
<argument><expr>"MKACTIVITY"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>201</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>cc</name>-&gt;<name>activity_url</name></name> = <name>url</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>add_child</name><parameter_list>(<param><decl><type><name>version_rsrc_t</name> **</type><name>child</name></decl></param>,
<param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>version_rsrc_t</name> *</type><name>parent</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>int</name></type> <name>created</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rsrc</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rsrc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>revision</name></name> = <name>revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>url</name></name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>local_path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>local_path</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>created</name> || (<name><name>parent</name>-&gt;<name>vsn_url</name></name> == <name>NULL</name>)</expr>)</condition><then>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>wr_url</name></name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>wr_url</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_version_url</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>child</name> = <name>rsrc</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>do_checkout</name><parameter_list>(<param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vsn_url</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>allow_404</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>code</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>locn</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__request_t</name> *</type><name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>request</name> =
<call><name>svn_ra_neon__request_create</name><argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr>"CHECKOUT"</expr></argument>, <argument><expr><name>vsn_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>body</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;"
"&lt;D:checkout xmlns:D=\"DAV:\"&gt;"
"&lt;D:activity-set&gt;"
"&lt;D:href&gt;%s&lt;/D:href&gt;"
"&lt;/D:activity-set&gt;&lt;/D:checkout&gt;"</expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>activity_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>token</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"If"</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"(&lt;%s&gt;)"</expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__request_dispatch</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>body</name></expr></argument>,
<argument><expr>201</expr></argument> ,
<argument><expr><name>allow_404</name> ? 404 : 0</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
<if>if <condition>(<expr><name>allow_404</name> &amp;&amp; *<name>code</name> == 404 &amp;&amp; <name><name>request</name>-&gt;<name>err</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>request</name>-&gt;<name>err</name></name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>locn</name> = <call><name>svn_ra_neon__request_get_location</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>svn_ra_neon__request_destroy</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>checkout_resource</name><parameter_list>(<param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
<param><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>allow_404</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>locn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ne_uri</name></type> <name>parse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>rsrc</name>-&gt;<name>wr_url</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>do_checkout</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>rsrc</name>-&gt;<name>vsn_url</name></name></expr></argument>, <argument><expr><name>allow_404</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr>&amp;<name>locn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>NULL</name> &amp;&amp; <name>allow_404</name> &amp;&amp; <name>code</name> == 404</expr>)</condition><then> <block>{
<expr_stmt><expr><name>locn</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_version_url</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>do_checkout</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name><name>rsrc</name>-&gt;<name>vsn_url</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr>&amp;<name>locn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_CONFLICT</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"File or directory '%s' is out of date; try updating"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>local_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>locn</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_REQUEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The CHECKOUT response did not contain a "
"'Location:' header"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>ne_uri_parse</name><argument_list>(<argument><expr><name>locn</name></expr></argument>, <argument><expr>&amp;<name>parse</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>parse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unable to parse URL '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>locn</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>wr_url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>parse</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>parse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>record_prop_change</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>resource_baton_t</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>name</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>prop_changes</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>r</name>-&gt;<name>prop_changes</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>prop_changes</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_dup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>prop_deletes</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>r</name>-&gt;<name>prop_deletes</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>prop_deletes</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>name</name></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>do_proppatch</name><parameter_list>(<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>version_rsrc_t</name> *</type><name>rsrc</name></decl></param>,
<param><decl><type><name>resource_baton_t</name> *</type><name>rb</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><name><name>rsrc</name>-&gt;<name>wr_url</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>rb</name>-&gt;<name>token</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token_header_val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>token_header_val</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"(&lt;%s&gt;)"</expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"If"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>token_header_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>svn_ra_neon__do_proppatch</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>prop_changes</name></name></expr></argument>,
<argument><expr><name><name>rb</name>-&gt;<name>prop_deletes</name></name></expr></argument>, <argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>add_valid_target</name><argument_list>(<argument><expr><name>commit_ctx_t</name> *<name>cc</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>path</name></expr></argument>,
<argument>enum <expr><name>svn_recurse_kind</name> <name>kind</name></expr></argument>)</argument_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name> <init>= <expr><name><name>cc</name>-&gt;<name>valid_targets</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>path_str</name> <init>= <expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>path_str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>path_str</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr>(<name>void</name>*)<name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></decl></decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>commit_ctx_t</name> *</type><name>cc</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rsrc</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rsrc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>pool</name></name> = <name>dir_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>revision</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>url</name></name> = <name><name>cc</name>-&gt;<name>ras</name>-&gt;<name>root</name>.<name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>local_path</name></name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_version_url</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>root</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>root</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>root</name>-&gt;<name>pool</name></name> = <name>dir_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>root</name>-&gt;<name>cc</name></name> = <name>cc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>root</name>-&gt;<name>rsrc</name></name> = <name>rsrc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>root</name>-&gt;<name>created</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>root_baton</name> = <name>root</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>get_child_tokens</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>tokens</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>lock_tokens</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tokens</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>parent</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>revstr</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>extra_headers</name></expr>)</condition><then>
<expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>SVN_DAV_VERSION_NAME_HEADER</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>revstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>checkout_resource</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>child</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>rsrc</name>-&gt;<name>wr_url</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name> <init>=
<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>token</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token_header_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token_uri</name></decl>;</decl_stmt>
<expr_stmt><expr><name>token_uri</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token_header_val</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;%s&gt; (&lt;%s&gt;)"</expr></argument>,
<argument><expr><name>token_uri</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"If"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>token_header_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>keep_locks</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name>extra_headers</name></expr>)</condition><then>
<expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>SVN_DAV_OPTIONS_HEADER</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>SVN_DAV_OPTION_KEEP_LOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>serr</name> = <call><name>svn_ra_neon__simple_request</name><argument_list>(<argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
<argument><expr>"DELETE"</expr></argument>, <argument><expr><name>child</name></expr></argument>,
<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>204</expr></argument> ,
<argument><expr>404</expr></argument> , <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> &amp;&amp; ((<name><name>serr</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_BAD_LOCK_TOKEN</name>)
|| (<name><name>serr</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NO_LOCK_TOKEN</name>)
|| (<name><name>serr</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_LOCK_OWNER_MISMATCH</name>)
|| (<name><name>serr</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_PATH_ALREADY_LOCKED</name>))</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>child_tokens</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__request_t</name> *</type><name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>locks_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr>)</condition><then>
<expr_stmt><expr><name>child_tokens</name> = <call><name>get_child_tokens</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(! <name>child_tokens</name>)
|| (<call><name>apr_hash_count</name><argument_list>(<argument><expr><name>child_tokens</name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
<return>return <expr><name>serr</name></expr>;</return></then>
<else>else
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>(<name>token</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>child_tokens</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>request</name> =
<call><name>svn_ra_neon__request_create</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr>"DELETE"</expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__assemble_locktoken_body</name><argument_list>(<argument><expr>&amp;<name>locks_list</name></expr></argument>,
<argument><expr><name>child_tokens</name></expr></argument>, <argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
<expr_stmt><expr><name>body</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; %s"</expr></argument>,
<argument><expr><name><name>locks_list</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__request_dispatch</name><argument_list>(<argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>body</name></expr></argument>,
<argument><expr>204</expr></argument> ,
<argument><expr>404</expr></argument> ,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>svn_ra_neon__request_destroy</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>serr</name></expr>)</condition><then>
<return>return <expr><name>serr</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><call><name>add_valid_target</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_nonrecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_add_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>parent</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>workpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>checkout_resource</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>child</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>child</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>pool</name></name> = <name>dir_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>cc</name></name> = <name><name>parent</name>-&gt;<name>cc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>created</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_child</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>rsrc</name></name> = <call><name>dup_resource</name><argument_list>(<argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>copyfrom_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__simple_request</name><argument_list>(<argument><expr>&amp;<name>code</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr>"MKCOL"</expr></argument>,
<argument><expr><name><name>child</name>-&gt;<name>rsrc</name>-&gt;<name>wr_url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>201</expr></argument> , <argument><expr>0</expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>, <decl><type ref="prev"/><name>bc_relative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_src</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
<argument><expr><name>copyfrom_path</name></expr></argument>,
<argument><expr><name>copyfrom_revision</name></expr></argument>,
<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copy_src</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>,
<argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>,
<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__copy</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
<argument><expr>1</expr></argument>,
<argument><expr><name>SVN_RA_NEON__DEPTH_INFINITE</name></expr></argument>,
<argument><expr><name>copy_src</name></expr></argument>,
<argument><expr><name><name>child</name>-&gt;<name>rsrc</name>-&gt;<name>wr_url</name></name></expr></argument>,
<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>copied</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>add_valid_target</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>copyfrom_path</name> ? <name>svn_recursive</name> : <name>svn_nonrecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_baton</name> = <name>child</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_open_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>parent</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>child</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>child</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>workpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>pool</name></name> = <name>dir_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>cc</name></name> = <name><name>parent</name>-&gt;<name>cc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>created</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_child</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>rsrc</name></name> = <call><name>dup_resource</name><argument_list>(<argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_baton</name> = <name>child</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>dir</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>record_prop_change</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>checkout_resource</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_valid_target</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>rsrc</name>-&gt;<name>local_path</name></name></expr></argument>, <argument><expr><name>svn_nonrecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_close_dir</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>dir</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_proppatch</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>parent</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>workpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>checkout_resource</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>pool</name></name> = <name>file_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>cc</name></name> = <name><name>parent</name>-&gt;<name>cc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>created</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_child</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>rsrc</name></name> = <call><name>dup_resource</name><argument_list>(<argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>file</name>-&gt;<name>token</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(! <name><name>parent</name>-&gt;<name>created</name></name>)
&amp;&amp; (! <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>cc</name>-&gt;<name>valid_targets</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_ra_neon__get_starting_props</name><argument_list>(<argument><expr>&amp;<name>res</name></expr></argument>,
<argument><expr><name><name>file</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
<argument><expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>wr_url</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_ALREADY_EXISTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"File '%s' already exists"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr>! <name>copyfrom_path</name></expr>)</condition><then> <block>{
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>, <decl><type ref="prev"/><name>bc_relative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_src</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
<argument><expr><name>copyfrom_path</name></expr></argument>,
<argument><expr><name>copyfrom_revision</name></expr></argument>,
<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copy_src</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>,
<argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>,
<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__copy</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
<argument><expr>1</expr></argument>,
<argument><expr><name>SVN_RA_NEON__DEPTH_ZERO</name></expr></argument>,
<argument><expr><name>copy_src</name></expr></argument>,
<argument><expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>wr_url</name></name></expr></argument>,
<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>copied</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>add_valid_target</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_nonrecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <name>file</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>parent</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>workpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>version_rsrc_t</name> *</type><name>rsrc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>file</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>pool</name></name> = <name>file_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>cc</name></name> = <name><name>parent</name>-&gt;<name>cc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>created</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_child</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>rsrc</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>rsrc</name></name> = <call><name>dup_resource</name><argument_list>(<argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>file</name>-&gt;<name>token</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>checkout_resource</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name><name>file</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>workpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <name>file</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_stream_write</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>put_baton_t</name> *</type><name>pb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>pb</name>-&gt;<name>ras</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ras</name>-&gt;<name>callbacks</name></name> &amp;&amp; <name><name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>ras</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Could not write svndiff to temp file"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>ras</name>-&gt;<name>progress_func</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>pb</name>-&gt;<name>progress</name></name> += *<name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ras</name>-&gt;<name>progress_func</name></name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>progress</name></name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name><name>ras</name>-&gt;<name>progress_baton</name></name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>commit_apply_txdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>file</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>put_baton_t</name> *</type><name>baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><name>baton</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>ras</name></name> = <name><name>file</name>-&gt;<name>cc</name>-&gt;<name>ras</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>pool</name></name> = <name><name>file</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>put_baton</name></name> = <name>baton</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>base_checksum</name></expr>)</condition><then>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>base_checksum</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>base_checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>baton</name>-&gt;<name>base_checksum</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>file</name>-&gt;<name>cc</name>-&gt;<name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>open_tmp_file</name></name>
<argument_list>(<argument><expr>&amp;<name><name>baton</name>-&gt;<name>tmpfile</name></name></expr></argument>,
<argument><expr><name><name>file</name>-&gt;<name>cc</name>-&gt;<name>ras</name>-&gt;<name>callback_baton</name></name></expr></argument>,
<argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>svn_stream_create</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>commit_stream_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_txdelta_to_svndiff</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_valid_target</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>local_path</name></name></expr></argument>, <argument><expr><name>svn_nonrecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>file</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>record_prop_change</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>checkout_resource</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_valid_target</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>cc</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>local_path</name></name></expr></argument>, <argument><expr><name>svn_nonrecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>resource_baton_t</name> *</type><name>file</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>commit_ctx_t</name> *</type><name>cc</name> <init>= <expr><name><name>file</name>-&gt;<name>cc</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(! <name><name>file</name>-&gt;<name>put_baton</name></name>) &amp;&amp; <name><name>file</name>-&gt;<name>created</name></name> &amp;&amp; (! <name><name>file</name>-&gt;<name>copied</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>file</name>-&gt;<name>put_baton</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*(<name><name>file</name>-&gt;<name>put_baton</name></name>)</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>file</name>-&gt;<name>put_baton</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>put_baton_t</name> *</type><name>pb</name> <init>= <expr><name><name>file</name>-&gt;<name>put_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>wr_url</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__request_t</name> *</type><name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>request</name> = <call><name>svn_ra_neon__request_create</name><argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr>"PUT"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>file</name>-&gt;<name>token</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_ra_neon__set_header</name>
<argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"If"</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;%s&gt; (&lt;%s&gt;)"</expr></argument>,
<argument><expr><call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>file</name>-&gt;<name>rsrc</name>-&gt;<name>url</name></name></expr></argument>,
<argument><expr><name><name>request</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>file</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>pb</name>-&gt;<name>base_checksum</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>,
<argument><expr><name>SVN_DAV_BASE_FULLTEXT_MD5_HEADER</name></expr></argument>,
<argument><expr><name><name>pb</name>-&gt;<name>base_checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>text_checksum</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>,
<argument><expr><name>SVN_DAV_RESULT_FULLTEXT_MD5_HEADER</name></expr></argument>,
<argument><expr><name>text_checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>pb</name>-&gt;<name>tmpfile</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_neon__set_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>,
<argument><expr><name>SVN_SVNDIFF_MIME_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__set_neon_body_provider</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ne_set_request_body_buffer</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>ne_req</name></name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__request_dispatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>201</expr></argument> ,
<argument><expr>204</expr></argument> ,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>svn_ra_neon__request_destroy</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pb</name>-&gt;<name>tmpfile</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>) <call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_proppatch</name><argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>commit_ctx_t</name> *</type><name>cc</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_commit_info_t</name> *</type><name>commit_info</name> <init>= <expr><call><name>svn_create_commit_info</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__merge_activity</name><argument_list>(<argument><expr>&amp;(<name><name>commit_info</name>-&gt;<name>revision</name></name>)</expr></argument>,
<argument><expr>&amp;(<name><name>commit_info</name>-&gt;<name>date</name></name>)</expr></argument>,
<argument><expr>&amp;(<name><name>commit_info</name>-&gt;<name>author</name></name>)</expr></argument>,
<argument><expr>&amp;(<name><name>commit_info</name>-&gt;<name>post_commit_err</name></name>)</expr></argument>,
<argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
<argument><expr><name><name>cc</name>-&gt;<name>ras</name>-&gt;<name>root</name>.<name>path</name></name></expr></argument>,
<argument><expr><name><name>cc</name>-&gt;<name>activity_url</name></name></expr></argument>,
<argument><expr><name><name>cc</name>-&gt;<name>valid_targets</name></name></expr></argument>,
<argument><expr><name><name>cc</name>-&gt;<name>tokens</name></name></expr></argument>,
<argument><expr><name><name>cc</name>-&gt;<name>keep_locks</name></name></expr></argument>,
<argument><expr><name><name>cc</name>-&gt;<name>disable_merge_response</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delete_activity</name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__maybe_store_auth_info</name><argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>commit_info</name>-&gt;<name>revision</name></name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>cc</name>-&gt;<name>callback</name></name><argument_list>(<argument><expr><name>commit_info</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>callback_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>commit_abort_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>delete_activity</name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>apply_revprops</name><parameter_list>(<param><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>baseline_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>version_rsrc_t</name></type> <name>baseline_rsrc</name> <init>= <expr><block>{ <expr><name>SVN_INVALID_REVNUM</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retry_count</name> <init>= <expr>5</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_vcc</name><argument_list>(<argument><expr>&amp;<name>vcc</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name>-&gt;<name>root</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_one_prop</name><argument_list>(<argument><expr>&amp;<name>baseline_url</name></expr></argument>, <argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>,
<argument><expr><name>vcc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>svn_ra_neon__checked_in_prop</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baseline_rsrc</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baseline_rsrc</name>.<name>vsn_url</name></name> = <name><name>baseline_url</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>checkout_resource</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr>&amp;<name>baseline_rsrc</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_APMOD_BAD_BASELINE</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
}</block> while <condition>(<expr><name>err</name> &amp;&amp; (--<name>retry_count</name> &gt; 0)</expr>)</condition>;</do>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<return>return <expr><call><name>svn_ra_neon__do_proppatch</name><argument_list>(<argument><expr><name><name>cc</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr><name><name>baseline_rsrc</name>.<name>wr_url</name></name></expr></argument>, <argument><expr><name>revprop_table</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__get_commit_editor</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
<param><decl><type><name>svn_commit_callback2_t</name></type> <name>callback</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>commit_editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>commit_ctx_t</name> *</type><name>cc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cc</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name>-&gt;<name>ras</name></name> = <name>ras</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name>-&gt;<name>valid_targets</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name>-&gt;<name>get_func</name></name> = <name><name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>get_wc_prop</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name>-&gt;<name>push_func</name></name> = <name><name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>push_wc_prop</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name>-&gt;<name>cb_baton</name></name> = <name><name>ras</name>-&gt;<name>callback_baton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name>-&gt;<name>callback</name></name> = <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name>-&gt;<name>callback_baton</name></name> = <name>callback_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name>-&gt;<name>tokens</name></name> = <name>lock_tokens</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cc</name>-&gt;<name>keep_locks</name></name> = <name>keep_locks</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>push_wc_prop</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cc</name>-&gt;<name>disable_merge_response</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_activity</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>apply_revprops</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>revprop_table</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>commit_abort_edit</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>commit_editor</name> = <call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>open_root</name></name> = <name>commit_open_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>delete_entry</name></name> = <name>commit_delete_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>add_directory</name></name> = <name>commit_add_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>open_directory</name></name> = <name>commit_open_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>commit_change_dir_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>close_directory</name></name> = <name>commit_close_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>add_file</name></name> = <name>commit_add_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>open_file</name></name> = <name>commit_open_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>commit_apply_txdelta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>change_file_prop</name></name> = <name>commit_change_file_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>close_file</name></name> = <name>commit_close_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>close_edit</name></name> = <name>commit_close_edit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commit_editor</name>-&gt;<name>abort_edit</name></name> = <name>commit_abort_edit</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>editor</name> = <name>commit_editor</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>edit_baton</name> = <name>cc</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
