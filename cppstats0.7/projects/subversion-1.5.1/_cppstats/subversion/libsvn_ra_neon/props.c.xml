<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_ra_neon/props.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_neon.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>const</specifier> <name>ne_propname</name></type> <name>svn_ra_neon__vcc_prop</name> <init>= <expr><block>{
<expr>"DAV:"</expr>, <expr>"version-controlled-configuration"</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ne_propname</name></type> <name>svn_ra_neon__checked_in_prop</name> <init>= <expr><block>{
<expr>"DAV:"</expr>, <expr>"checked-in"</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ne_propname</name></type> <name><name>starting_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"DAV:"</expr>, <expr>"version-controlled-configuration"</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"resourcetype"</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"baseline-relative-path"</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"repository-uuid"</expr>}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ne_propname</name></type> <name><name>baseline_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"DAV:"</expr>, <expr>"baseline-collection"</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr><name>SVN_DAV__VERSION_NAME</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_property</name></decl>;</decl_stmt>
}</block></struct></type> <name>elem_defn</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>elem_defn</name></type> <name><name>elem_definitions</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>ELEM_multistatus</name></expr>, <expr>"DAV:multistatus"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_response</name></expr>, <expr>"DAV:response"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_href</name></expr>, <expr>"DAV:href"</expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_propstat</name></expr>, <expr>"DAV:propstat"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_prop</name></expr>, <expr>"DAV:prop"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_status</name></expr>, <expr>"DAV:status"</expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_baseline</name></expr>, <expr>"DAV:baseline"</expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_collection</name></expr>, <expr>"DAV:collection"</expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_resourcetype</name></expr>, <expr>"DAV:resourcetype"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_baseline_coll</name></expr>, <expr><name>SVN_RA_NEON__PROP_BASELINE_COLLECTION</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_checked_in</name></expr>, <expr><name>SVN_RA_NEON__PROP_CHECKED_IN</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_vcc</name></expr>, <expr><name>SVN_RA_NEON__PROP_VCC</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_version_name</name></expr>, <expr><name>SVN_RA_NEON__PROP_VERSION_NAME</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_get_content_length</name></expr>, <expr><name>SVN_RA_NEON__PROP_GETCONTENTLENGTH</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_creationdate</name></expr>, <expr><name>SVN_RA_NEON__PROP_CREATIONDATE</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_creator_displayname</name></expr>, <expr><name>SVN_RA_NEON__PROP_CREATOR_DISPLAYNAME</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_baseline_relpath</name></expr>, <expr><name>SVN_RA_NEON__PROP_BASELINE_RELPATH</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_md5_checksum</name></expr>, <expr><name>SVN_RA_NEON__PROP_MD5_CHECKSUM</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_repository_uuid</name></expr>, <expr><name>SVN_RA_NEON__PROP_REPOSITORY_UUID</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr><name>ELEM_deadprop_count</name></expr>, <expr><name>SVN_RA_NEON__PROP_DEADPROP_COUNT</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name></type> <name><name>propfind_elements</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"DAV:"</expr>, <expr>"multistatus"</expr>, <expr><name>ELEM_multistatus</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"response"</expr>, <expr><name>ELEM_response</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"href"</expr>, <expr><name>ELEM_href</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"propstat"</expr>, <expr><name>ELEM_propstat</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"prop"</expr>, <expr><name>ELEM_prop</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"status"</expr>, <expr><name>ELEM_status</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"baseline"</expr>, <expr><name>ELEM_baseline</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"baseline-collection"</expr>, <expr><name>ELEM_baseline_coll</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"checked-in"</expr>, <expr><name>ELEM_checked_in</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"collection"</expr>, <expr><name>ELEM_collection</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"resourcetype"</expr>, <expr><name>ELEM_resourcetype</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"version-controlled-configuration"</expr>, <expr><name>ELEM_vcc</name></expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr><name>SVN_DAV__VERSION_NAME</name></expr>, <expr><name>ELEM_version_name</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{
<expr>"DAV:"</expr>, <expr>"getcontentlength"</expr>, <expr><name>ELEM_get_content_length</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr><name>SVN_DAV__CREATIONDATE</name></expr>, <expr><name>ELEM_creationdate</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
<expr><block>{
<expr>"DAV:"</expr>, <expr>"creator-displayname"</expr>, <expr><name>ELEM_creator_displayname</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"baseline-relative-path"</expr>, <expr><name>ELEM_baseline_relpath</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"md5-checksum"</expr>, <expr><name>ELEM_md5_checksum</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"repository-uuid"</expr>, <expr><name>ELEM_repository_uuid</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"deadprop-count"</expr>, <expr><name>ELEM_deadprop_count</name></expr>,
<expr><name>SVN_RA_NEON__XML_CDATA</name></expr>
}</block></expr>,
<expr><block>{ <expr>""</expr>, <expr>""</expr>, <expr><name>ELEM_unknown</name></expr>, <expr><name>SVN_RA_NEON__XML_COLLECT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <name>propfind_ctx_t</name> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>cdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>propbuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>last_open_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ne_xml_parser</name> *</type><name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>propfind_ctx_t</name>;</typedef>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>elem_defn</name> *</type><name>defn_from_id</name><parameter_list>(<param><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>elem_defn</name> *</type><name>defn</name></decl>;</decl_stmt>
<for>for (<init><expr><name>defn</name> = <name>elem_definitions</name></expr>;</init> <condition><expr><name><name>defn</name>-&gt;<name>name</name></name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>defn</name></expr></incr>) <block>{
<if>if <condition>(<expr><name>id</name> == <name><name>defn</name>-&gt;<name>id</name></name></expr>)</condition><then>
<return>return <expr><name>defn</name></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>assign_rsrc_url</name><parameter_list>(<param><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>url_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ne_uri</name></type> <name>parsed_url</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ne_uri_parse</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>parsed_url</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>parsed_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unable to parse URL '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>url_path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>parsed_url</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>parsed_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>url_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 1 &amp;&amp; <name><name>url_path</name><index>[<expr><name>len</name> - 1</expr>]</index></name> == '/'</expr>)</condition><then>
<expr_stmt><expr><name><name>url_path</name><index>[<expr><name>len</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>rsrc</name>-&gt;<name>url</name></name> = <name>url_path</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>validate_element</name><parameter_list>(<param><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>parent</name></decl></param>,
<param><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>child</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>parent</name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_root</name></expr>:
<if>if <condition>(<expr><name>child</name> == <name>ELEM_multistatus</name></expr>)</condition><then>
<return>return <expr><name>child</name></expr>;</return></then>
<else>else
<return>return <expr><name>SVN_RA_NEON__XML_INVALID</name></expr>;</return></else></if>
</case><case>case <expr><name>ELEM_multistatus</name></expr>:
<if>if <condition>(<expr><name>child</name> == <name>ELEM_response</name></expr>)</condition><then>
<return>return <expr><name>child</name></expr>;</return></then>
<else>else
<return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return></else></if>
</case><case>case <expr><name>ELEM_response</name></expr>:
<if>if <condition>(<expr>(<name>child</name> == <name>ELEM_href</name>) || (<name>child</name> == <name>ELEM_propstat</name>)</expr>)</condition><then>
<return>return <expr><name>child</name></expr>;</return></then>
<else>else
<return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return></else></if>
</case><case>case <expr><name>ELEM_propstat</name></expr>:
<if>if <condition>(<expr>(<name>child</name> == <name>ELEM_prop</name>) || (<name>child</name> == <name>ELEM_status</name>)</expr>)</condition><then>
<return>return <expr><name>child</name></expr>;</return></then>
<else>else
<return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return></else></if>
</case><case>case <expr><name>ELEM_prop</name></expr>:
<return>return <expr><name>child</name></expr>;</return>
</case><case>case <expr><name>ELEM_baseline_coll</name></expr>:
</case><case>case <expr><name>ELEM_checked_in</name></expr>:
</case><case>case <expr><name>ELEM_vcc</name></expr>:
<if>if <condition>(<expr><name>child</name> == <name>ELEM_href</name></expr>)</condition><then>
<return>return <expr><name>child</name></expr>;</return></then>
<else>else
<return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return></else></if>
</case><case>case <expr><name>ELEM_resourcetype</name></expr>:
<if>if <condition>(<expr>(<name>child</name> == <name>ELEM_collection</name>) || (<name>child</name> == <name>ELEM_baseline</name>)</expr>)</condition><then>
<return>return <expr><name>child</name></expr>;</return></then>
<else>else
<return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return></else></if>
</case><default>default:
<return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_element</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>elem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>parent</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>propfind_ctx_t</name> *</type><name>pc</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name>
<init>= <expr><call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>propfind_elements</name></expr></argument>, <argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>elem</name> = <name>elm</name> ? <call><name>validate_element</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>elm</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call> : <name>SVN_RA_NEON__XML_DECLINE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>elem</name> &lt; 1</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>cdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>elem</name> = <name>elm</name> ? <name><name>elm</name>-&gt;<name>id</name></name> : <name>ELEM_unknown</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr>*<name>elem</name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_response</name></expr>:
<if>if <condition>(<expr><name><name>pc</name>-&gt;<name>rsrc</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_XML_MALFORMED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>pc</name>-&gt;<name>rsrc</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*(<name><name>pc</name>-&gt;<name>rsrc</name></name>)</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name>-&gt;<name>rsrc</name>-&gt;<name>pool</name></name> = <name><name>pc</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name>-&gt;<name>rsrc</name>-&gt;<name>propset</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name>-&gt;<name>status</name></name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ELEM_propstat</name></expr>:
<expr_stmt><expr><name><name>pc</name>-&gt;<name>status</name></name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ELEM_href</name></expr>:
<expr_stmt><expr><name><name>pc</name>-&gt;<name>rsrc</name>-&gt;<name>href_parent</name></name> = <name><name>pc</name>-&gt;<name>last_open_id</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ELEM_collection</name></expr>:
<expr_stmt><expr><name><name>pc</name>-&gt;<name>rsrc</name>-&gt;<name>is_collection</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ELEM_unknown</name></expr>:
<expr_stmt><expr><name><name>pc</name>-&gt;<name>encoding</name></name> = <call><name>ne_xml_get_attr</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>parser</name></name></expr></argument>, <argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_DAV</name></expr></argument>,
<argument><expr>"encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pc</name>-&gt;<name>encoding</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>pc</name>-&gt;<name>encoding</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><name><name>pc</name>-&gt;<name>last_open_id</name></name> = *<name>elem</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>end_element</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>propfind_ctx_t</name> *</type><name>pc</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name> <init>= <expr><name><name>pc</name>-&gt;<name>rsrc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>elem_defn</name> *</type><name>parent_defn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>elem_defn</name> *</type><name>defn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ne_status</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cdata</name> <init>= <expr><name><name>pc</name>-&gt;<name>cdata</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
<case>case <expr><name>ELEM_response</name></expr>:
<if>if <condition>(<expr>!<name><name>pc</name>-&gt;<name>rsrc</name>-&gt;<name>url</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_XML_MALFORMED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>rsrc</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>rsrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name>-&gt;<name>rsrc</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>ELEM_propstat</name></expr>:
<if>if <condition>(<expr><name><name>pc</name>-&gt;<name>status</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name> <init>= <expr><call><name>apr_hash_first</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>propbuffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pc</name>-&gt;<name>status</name></name> == 200</expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>propset</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>propbuffer</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then> <else>else <if>if <condition>(<expr>! <name><name>pc</name>-&gt;<name>status</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_XML_MALFORMED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>ELEM_status</name></expr>:
<if>if <condition>(<expr><call><name>ne_parse_statusline</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_XML_MALFORMED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>status</name>.<name>reason_phrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name>-&gt;<name>status</name></name> = <name><name>status</name>.<name>code</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>ELEM_href</name></expr>:
<if>if <condition>(<expr><name><name>rsrc</name>-&gt;<name>href_parent</name></name> == <name>ELEM_response</name></expr>)</condition><then>
<return>return <expr><call><name>assign_rsrc_url</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>rsrc</name></name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>parent_defn</name> = <call><name>defn_from_id</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>href_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>parent_defn</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>name</name> = <name><name>parent_defn</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>svn_string_create</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<if>if <condition>(<expr><name>state</name> == <name>ELEM_unknown</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>defn</name> = <call><name>defn_from_id</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! (<name>defn</name> &amp;&amp; <name><name>defn</name>-&gt;<name>is_property</name></name>)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>name</name> = <name><name>defn</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>pc</name>-&gt;<name>encoding</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = <call><name>svn_string_create</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>encoding</name></name></expr></argument>, <argument><expr>"base64"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_XML_MALFORMED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<block>{
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>in</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>in</name>.<name>data</name></name> = <name>cdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>in</name>.<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>svn_base64_decode_string</name><argument_list>(<argument><expr>&amp;<name>in</name></expr></argument>, <argument><expr><name><name>pc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>pc</name>-&gt;<name>encoding</name></name> = <name>NULL</name></expr>;</expr_stmt>
</default>}</block></switch>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>pc</name>-&gt;<name>propbuffer</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_parser</name><parameter_list>(<param><decl><type><name>ne_xml_parser</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>propfind_ctx_t</name> *</type><name>pc</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pc</name>-&gt;<name>parser</name></name> = <name>parser</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__get_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>results</name></decl></param>,
<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>int</name></type> <name>depth</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>ne_propname</name> *</type><name>which_props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>propfind_ctx_t</name></type> <name>pc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_ra_neon__add_depth_header</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>label</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"Label"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>body</name> = <call><name>svn_stringbuf_create</name>
<argument_list>(<argument><expr>"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;" <name>DEBUG_CR</name>
"&lt;propfind xmlns=\"DAV:\"&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>which_props</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;prop&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name><name>which_props</name><index>[<expr><name>n</name></expr>]</index></name>.<name>name</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name>
<argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr>"&lt;"</expr></argument>, <argument><expr><name><name>which_props</name><index>[<expr><name>n</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr>" xmlns=\""</expr></argument>,
<argument><expr><name><name>which_props</name><index>[<expr><name>n</name></expr>]</index></name>.<name>nspace</name></expr></argument>, <argument><expr>"\"/&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;/prop&gt;&lt;/propfind&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;allprop/&gt;&lt;/propfind&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>pc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name>.<name>propbuffer</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name>.<name>props</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pc</name>.<name>cdata</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__parsed_request</name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr>"PROPFIND"</expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name><name>body</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>set_parser</name></expr></argument>,
<argument><expr><name>start_element</name></expr></argument>,
<argument><expr><name>svn_ra_neon__xml_collect_cdata</name></expr></argument>,
<argument><expr><name>end_element</name></expr></argument>,
<argument><expr>&amp;<name>pc</name></expr></argument>, <argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>results</name> = <name><name>pc</name>.<name>props</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__get_props_resource</name><parameter_list>(<param><decl><type><name>svn_ra_neon__resource_t</name> **</type><name>rsrc</name></decl></param>,
<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>ne_propname</name> *</type><name>which_props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type> <name>url_path</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 1 &amp;&amp; <name><name>url</name><index>[<expr><name>len</name> - 1</expr>]</index></name> == '/'</expr>)</condition><then>
<expr_stmt><expr><name><name>url_path</name><index>[<expr><name>len</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props</name><argument_list>(<argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>url_path</name></expr></argument>, <argument><expr><name>SVN_RA_NEON__DEPTH_ZERO</name></expr></argument>,
<argument><expr><name>label</name></expr></argument>, <argument><expr><name>which_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>1 || <name>label</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name> <init>= <expr><call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>hi</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ent</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>rsrc</name> = <name>ent</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>rsrc</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>rsrc</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>url_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>*<name>rsrc</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to find label '%s' for URL '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>label</name> ? <name>label</name> : "NULL"</expr></argument>, <argument><expr><name>url_path</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__get_one_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>propval</name></decl></param>,
<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>ne_propname</name> *</type><name>propname</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ne_propname</name></type> <name><name>props</name><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr>0</expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>props</name><index>[<expr>0</expr>]</index></name> = *<name>propname</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>props</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>propname</name>-&gt;<name>nspace</name></name></expr></argument>, <argument><expr><name><name>propname</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>propset</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_PROPS_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' was not present on the resource"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>propval</name> = <name>value</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__get_starting_props</name><parameter_list>(<param><decl><type><name>svn_ra_neon__resource_t</name> **</type><name>rsrc</name></decl></param>,
<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,
<argument><expr><name>starting_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>sess</name>-&gt;<name>vcc</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>(*<name>rsrc</name>)-&gt;<name>propset</name></name></expr></argument>,
<argument><expr><name>SVN_RA_NEON__PROP_VCC</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propval</name></expr>)</condition><then>
<expr_stmt><expr><name><name>sess</name>-&gt;<name>vcc</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr>! <name><name>sess</name>-&gt;<name>uuid</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>(*<name>rsrc</name>)-&gt;<name>propset</name></name></expr></argument>,
<argument><expr><name>SVN_RA_NEON__PROP_REPOSITORY_UUID</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propval</name></expr>)</condition><then>
<expr_stmt><expr><name><name>sess</name>-&gt;<name>uuid</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__search_for_starting_props</name><parameter_list>(<param><decl><type><name>svn_ra_neon__resource_t</name> **</type><name>rsrc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>missing_path</name></decl></param>,
<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>path_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ne_uri</name></type> <name>parsed_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>lopped_path</name> <init>=
<expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ne_uri_parse</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>parsed_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>parsed_url</name>.<name>path</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>parsed_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Neon was unable to parse URL '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name>lopped_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path_s</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name><name>parsed_url</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ne_uri_free</name><argument_list>(<argument><expr>&amp;<name>parsed_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>! <call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name><name>path_s</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__get_starting_props</name><argument_list>(<argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name><name>path_s</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name>lopped_path</name></expr></argument>,
<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name><name>path_s</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>lopped_path</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name><name>path_s</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_path_remove_component</name><argument_list>(<argument><expr><name>path_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>path_s</name>-&gt;<name>len</name></name> == <name>len</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_quick_wrap</name>
<argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The path was not part of a repository"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name><name>path_s</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"No part of path '%s' was found in "
"repository HEAD"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>parsed_url</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>tmp</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmp</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>(*<name>rsrc</name>)-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name>-&gt;<name>is_collection</name></name> = <name>(*<name>rsrc</name>)-&gt;<name>is_collection</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name>-&gt;<name>propset</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr><name>(*<name>rsrc</name>)-&gt;<name>propset</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>tmp</name>-&gt;<name>propset</name></name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_dup</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>rsrc</name> = <name>tmp</name></expr>;</expr_stmt>
}</block>
<expr_stmt><expr>*<name>missing_path</name> = <name><name>lopped_path</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_ra_neon__get_vcc</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vcc</name></decl></param>,
<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lopped_path</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>sess</name>-&gt;<name>vcc</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>vcc</name> = <name><name>sess</name>-&gt;<name>vcc</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__search_for_starting_props</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr>&amp;<name>lopped_path</name></expr></argument>,
<argument><expr><name>sess</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>sess</name>-&gt;<name>vcc</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The VCC property was not found on the "
"resource"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>vcc</name> = <name><name>sess</name>-&gt;<name>vcc</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_ra_neon__get_baseline_props</name><parameter_list>(<param><decl><type><name>svn_string_t</name> *</type><name>bc_relative</name></decl></param>,
<param><decl><type><name>svn_ra_neon__resource_t</name> **</type><name>bln_rsrc</name></decl></param>,
<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>ne_propname</name> *</type><name>which_props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>relative_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>my_bc_relative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lopped_path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__search_for_starting_props</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr>&amp;<name>lopped_path</name></expr></argument>,
<argument><expr><name>sess</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_vcc</name><argument_list>(<argument><expr>&amp;<name>vcc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>vcc</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The VCC property was not found on the "
"resource"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>relative_path</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>propset</name></name></expr></argument>,
<argument><expr><name>SVN_RA_NEON__PROP_BASELINE_RELPATH</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>relative_path</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The relative-path property was not "
"found on the resource"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>my_bc_relative</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>relative_path</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>lopped_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bc_relative</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>bc_relative</name>-&gt;<name>data</name></name> = <name>my_bc_relative</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bc_relative</name>-&gt;<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>my_bc_relative</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>revision</name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>baseline</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_one_prop</name><argument_list>(<argument><expr>&amp;<name>baseline</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>vcc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>svn_ra_neon__checked_in_prop</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>,
<argument><expr><name><name>baseline</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>which_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>label</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>vcc</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,
<argument><expr><name>which_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>bln_rsrc</name> = <name>rsrc</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_ra_neon__get_baseline_info</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>is_dir</name></decl></param>,
<param><decl><type><name>svn_string_t</name> *</type><name>bc_url</name></decl></param>,
<param><decl><type><name>svn_string_t</name> *</type><name>bc_relative</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>latest_rev</name></decl></param>,
<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>baseline_rsrc</name></decl>, *<decl><type ref="prev"/><name>rsrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>my_bc_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>my_bc_rel</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_props</name><argument_list>(<argument><expr>&amp;<name>my_bc_rel</name></expr></argument>,
<argument><expr>&amp;<name>baseline_rsrc</name></expr></argument>,
<argument><expr><name>sess</name></expr></argument>,
<argument><expr><name>url</name></expr></argument>,
<argument><expr><name>revision</name></expr></argument>,
<argument><expr><name>baseline_props</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>my_bc_url</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>baseline_rsrc</name>-&gt;<name>propset</name></name></expr></argument>,
<argument><expr><name>SVN_RA_NEON__PROP_BASELINE_COLLECTION</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>my_bc_url</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'DAV:baseline-collection' was not present "
"on the baseline resource"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>bc_url</name></expr>)</condition><then>
<expr_stmt><expr>*<name>bc_url</name> = *<name>my_bc_url</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>latest_rev</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>vsn_name</name><init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>baseline_rsrc</name>-&gt;<name>propset</name></name></expr></argument>,
<argument><expr><name>SVN_RA_NEON__PROP_VERSION_NAME</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>vsn_name</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' was not present on the baseline "
"resource"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"DAV:" <name>SVN_DAV__VERSION_NAME</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>latest_rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>vsn_name</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>is_dir</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_bc_url</name> <init>= <expr><call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>my_bc_url</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>my_bc_rel</name>.<name>data</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_starting_props</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>full_bc_url</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>is_dir</name> = <name><name>rsrc</name>-&gt;<name>is_collection</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>bc_relative</name></expr>)</condition><then>
<expr_stmt><expr>*<name>bc_relative</name> = <name>my_bc_rel</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_setprop</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>body</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>xml_safe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>xml_tag_name</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSLEN</name></cpp:macro> <cpp:value>(sizeof(SVN_PROP_PREFIX) - 1)</cpp:value></cpp:define>
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_PREFIX</name></expr></argument>, <argument><expr><name>NSLEN</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>xml_tag_name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"S:"</expr></argument>, <argument><expr><name>name</name> + <name>NSLEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NSLEN</name></cpp:undef>
<else>else <block>{
<expr_stmt><expr><name>xml_tag_name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"C:"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>! <name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;%s /&gt;"</expr></argument>, <argument><expr><name>xml_tag_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>svn_xml_is_xml_safe</name><argument_list>(<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>xml_esc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_xml_escape_cdata_string</name><argument_list>(<argument><expr>&amp;<name>xml_esc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xml_safe</name> = <name><name>xml_esc</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>base64ed</name> <init>= <expr><call><name>svn_base64_encode_string</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>encoding</name> = " V:encoding=\"base64\""</expr>;</expr_stmt>
<expr_stmt><expr><name>xml_safe</name> = <name><name>base64ed</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,<argument><expr>"&lt;%s %s&gt;%s&lt;/%s&gt;"</expr></argument>,
<argument><expr><name>xml_tag_name</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>,
<argument><expr><name>xml_safe</name></expr></argument>, <argument><expr><name>xml_tag_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__do_proppatch</name><parameter_list>(<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>prop_changes</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>prop_deletes</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>extra_headers</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>prop_changes</name> == <name>NULL</name> || (! <call><name>apr_hash_count</name><argument_list>(<argument><expr><name>prop_changes</name></expr></argument>)</argument_list></call>))
&amp;&amp; (<name>prop_deletes</name> == <name>NULL</name> || <name><name>prop_deletes</name>-&gt;<name>nelts</name></name> == 0)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>body</name> = <call><name>svn_stringbuf_create</name>
<argument_list>(<argument><expr>"&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;" <name>DEBUG_CR</name>
"&lt;D:propertyupdate xmlns:D=\"DAV:\" xmlns:V=\""
<name>SVN_DAV_PROP_NS_DAV</name> "\" xmlns:C=\""
<name>SVN_DAV_PROP_NS_CUSTOM</name> "\" xmlns:S=\""
<name>SVN_DAV_PROP_NS_SVN</name> "\"&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prop_changes</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;D:set&gt;&lt;D:prop&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>prop_changes</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_setprop</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;/D:prop&gt;&lt;/D:set&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>prop_deletes</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;D:remove&gt;&lt;D:prop&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name><name>prop_deletes</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>prop_deletes</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>append_setprop</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;/D:prop&gt;&lt;/D:remove&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"&lt;/D:propertyupdate&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>extra_headers</name></expr>)</condition><then>
<expr_stmt><expr><name>extra_headers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr>"text/xml; charset=UTF-8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__simple_request</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>, <argument><expr>"PROPPATCH"</expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name>extra_headers</name></expr></argument>, <argument><expr><name><name>body</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr>200</expr></argument>, <argument><expr>207</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_PROPPATCH_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"At least one property change failed; repository is unchanged"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__do_check_path</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name> *</type><name>kind</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_dir</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>path</name></expr>)</condition><then>
<expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr>&amp;<name>is_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ras</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>SVN_NO_ERROR</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>is_dir</name></expr>)</condition><then>
<expr_stmt><expr>*<name>kind</name> = <name>svn_node_dir</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>kind</name> = <name>svn_node_file</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>kind</name> = <name>svn_node_none</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_neon__do_stat</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>svn_dirent_t</name> **</type><name>dirent</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>final_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>resources</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>path</name></expr>)</condition><then>
<expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>final_url</name> = <name>url</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>, <decl><type ref="prev"/><name>bc_relative</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dirent</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else
<return>return <expr><name>err</name></expr>;</return></else></if>
}</block></then></if>
<expr_stmt><expr><name>final_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__get_props</name><argument_list>(<argument><expr>&amp;<name>resources</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>, <argument><expr><name>final_url</name></expr></argument>,
<argument><expr><name>SVN_RA_NEON__DEPTH_ZERO</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dirent</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else
<return>return <expr><name>err</name></expr>;</return></else></if>
}</block></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>resources</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>resource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resource</name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name><name>resource</name>-&gt;<name>is_collection</name></name> ? <name>svn_node_dir</name> : <name>svn_node_file</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>,
<argument><expr><name>SVN_RA_NEON__PROP_GETCONTENTLENGTH</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propval</name></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>size</name></name> = <call><name>svn__atoui64</name><argument_list>(<argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<for>for (<init><expr><name>h</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>h</name></expr>;</condition> <incr><expr><name>h</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>kkey</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr>&amp;<name>kkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>(const <name>char</name> *)<name>kkey</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_CUSTOM</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_DAV_PROP_NS_CUSTOM</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>has_props</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>(const <name>char</name> *)<name>kkey</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_SVN</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_DAV_PROP_NS_SVN</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>has_props</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if></else></if>
}</block></for>
<expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>,
<argument><expr><name>SVN_RA_NEON__PROP_VERSION_NAME</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propval</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>created_rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>,
<argument><expr><name>SVN_RA_NEON__PROP_CREATIONDATE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propval</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;(<name><name>entry</name>-&gt;<name>time</name></name>)</expr></argument>,
<argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>,
<argument><expr><name>SVN_RA_NEON__PROP_CREATOR_DISPLAYNAME</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propval</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>last_author</name></name> = <name><name>propval</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>dirent</name> = <name>entry</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
