<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_client/mergeinfo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_sorts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_mergeinfo_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_ra_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__parse_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>mergeinfo</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>pristine</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_prop_from_wc</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SVN_PROP_MERGEINFO</name></expr></argument>,
<argument><expr><name>wcpath</name></expr></argument>, <argument><expr><name>pristine</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>svn_depth_empty</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>wcpath</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propval</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_parse</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>mergeinfo</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__record_wc_mergeinfo</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>mergeinfo_str</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>mergeinfo</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_to_string</name><argument_list>(<argument><expr>&amp;<name>mergeinfo_str</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>mergeinfo_str</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><call><name>svn_wc_prop_set2</name><argument_list>(<argument><expr><name>SVN_PROP_MERGEINFO</name></expr></argument>, <argument><expr><name>mergeinfo_str</name></expr></argument>, <argument><expr><name>wcpath</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument> , <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>void</name></type>
<name>adjust_mergeinfo_source_paths</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>walk_path</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>wc_mergeinfo</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>merge_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>rangelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wc_mergeinfo</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>merge_source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>rangelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr>(const <name>char</name> *) <name>merge_source</name></expr></argument>, <argument><expr><name>walk_path</name></expr></argument>,
<argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>rangelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__get_wc_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>mergeinfo</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>inherited</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>pristine</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>limit_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>walked_path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>walk_path</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>wc_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>switched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name> <init>= <expr><name><name>entry</name>-&gt;<name>revision</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>limit_path</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_get_absolute</name><argument_list>(<argument><expr>&amp;<name>limit_path</name></expr></argument>, <argument><expr><name>limit_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<while>while <condition>(<expr><name>TRUE</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>inherit</name> == <name>svn_mergeinfo_nearest_ancestor</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>wc_mergeinfo</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inherit</name> = <name>svn_mergeinfo_inherited</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__parse_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>wc_mergeinfo</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>wcpath</name></expr></argument>,
<argument><expr><name>pristine</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__path_switched</name><argument_list>(<argument><expr><name>wcpath</name></expr></argument>, <argument><expr>&amp;<name>switched</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>switched</name></expr>)</condition><then>
<break>break;</break></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>wcpath</name></expr></argument>)</argument_list></call> == 0
|| ((<call><name>strlen</name><argument_list>(<argument><expr><name>wcpath</name></expr></argument>)</argument_list></call> &gt; 0 &amp;&amp; <name><name>wcpath</name><index>[<expr>0</expr>]</index></name> != '/')
&amp;&amp; !(<call><name>strlen</name><argument_list>(<argument><expr><name>wcpath</name></expr></argument>)</argument_list></call> &gt; 2
&amp;&amp; <name><name>wcpath</name><index>[<expr>1</expr>]</index></name> == ':'
&amp;&amp; <name><name>wcpath</name><index>[<expr>2</expr>]</index></name> == '/'
&amp;&amp; ((<name><name>wcpath</name><index>[<expr>0</expr>]</index></name> &gt;= 'A' &amp;&amp; <name><name>wcpath</name><index>[<expr>0</expr>]</index></name> &lt;= 'Z')
|| (<name><name>wcpath</name><index>[<expr>0</expr>]</index></name> &gt;= 'a' &amp;&amp; <name><name>wcpath</name><index>[<expr>0</expr>]</index></name> &lt;= 'z'))))</expr>)</condition><then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr>!(<call><name>strlen</name><argument_list>(<argument><expr><name>wcpath</name></expr></argument>)</argument_list></call> &gt; 0 &amp;&amp; <name><name>wcpath</name><index>[<expr>0</expr>]</index></name> == '/')</expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_get_absolute</name><argument_list>(<argument><expr>&amp;<name>wcpath</name></expr></argument>, <argument><expr><name>wcpath</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></then></if>
<if>if <condition>(<expr><name>wc_mergeinfo</name> == <name>NULL</name> &amp;&amp;
<name>inherit</name> != <name>svn_mergeinfo_explicit</name> &amp;&amp;
!<call><name>svn_dirent_is_root</name><argument_list>(<argument><expr><name>wcpath</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>wcpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>limit_path</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>limit_path</name></expr></argument>, <argument><expr><name>wcpath</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>walk_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>wcpath</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>walk_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wcpath</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>wcpath</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wcpath</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_DIRECTORY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>inherited</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>mergeinfo</name> = <name>wc_mergeinfo</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>wcpath</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>base_revision</name> &lt; <name><name>entry</name>-&gt;<name>cmt_rev</name></name>
|| <name><name>entry</name>-&gt;<name>revision</name></name> &lt; <name>base_revision</name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name>entry</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
}</block></then></if>
<break>break;</break>
}</block></while>
<if>if <condition>(<expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>walk_path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>inherited</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>mergeinfo</name> = <name>wc_mergeinfo</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>wc_mergeinfo</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>inherited</name> = (<name>wc_mergeinfo</name> != <name>NULL</name>)</expr>;</expr_stmt>
<expr_stmt><expr>*<name>mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>adjust_mergeinfo_source_paths</name><argument_list>(<argument><expr>*<name>mergeinfo</name></expr></argument>, <argument><expr><name>walk_path</name></expr></argument>, <argument><expr><name>wc_mergeinfo</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>inherited</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>mergeinfo</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<if>if <condition>(<expr><name>walked_path</name></expr>)</condition><then>
<expr_stmt><expr>*<name>walked_path</name> = <name>walk_path</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>inherited</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_inheritable</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr>*<name>mergeinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_mergeinfo__remove_empty_rangelists</name><argument_list>(<argument><expr>*<name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__get_repos_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>target_mergeinfo</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>squelch_incapable</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>repos_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_session_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rel_paths</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rel_path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>rel_paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>rel_path</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ensure_ra_session_url</name><argument_list>(<argument><expr>&amp;<name>old_session_url</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_get_mergeinfo</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>repos_mergeinfo</name></expr></argument>, <argument><expr><name>rel_paths</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>squelch_incapable</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>repos_mergeinfo</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><name>err</name></expr>;</return></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>old_session_url</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>old_session_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>repos_mergeinfo</name></expr>)</condition><then>
<expr_stmt><expr>*<name>target_mergeinfo</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>repos_mergeinfo</name></expr></argument>, <argument><expr><name>rel_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>target_mergeinfo</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__get_wc_or_repos_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>target_mergeinfo</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>indirect</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>repos_only</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>target_rev</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__entry_location</name><argument_list>(<argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr>&amp;<name>target_rev</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>svn_opt_revision_working</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>repos_only</name></expr>)</condition><then>
<expr_stmt><expr>*<name>target_mergeinfo</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_wc_mergeinfo</name><argument_list>(<argument><expr><name>target_mergeinfo</name></expr></argument>, <argument><expr><name>indirect</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>inherit</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>*<name>target_mergeinfo</name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>repos_mergeinfo</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_add</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_prop_from_wc</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SVN_PROP_MERGEINFO</name></expr></argument>,
<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>svn_depth_empty</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_rel_path</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ra_session</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__path_relative_to_root</name><argument_list>(<argument><expr>&amp;<name>repos_rel_path</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_repos_mergeinfo</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>,
<argument><expr>&amp;<name>repos_mergeinfo</name></expr></argument>,
<argument><expr><name>repos_rel_path</name></expr></argument>,
<argument><expr><name>target_rev</name></expr></argument>,
<argument><expr><name>inherit</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>repos_mergeinfo</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>target_mergeinfo</name> = <name>repos_mergeinfo</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>indirect</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__mergeinfo_from_segments</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>mergeinfo_p</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>segments</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>segments</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_location_segment_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>path_ranges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_path</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name><name>segment</name>-&gt;<name>path</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>source_path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name><name>segment</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path_ranges</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>source_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>path_ranges</name></expr>)</condition><then>
<expr_stmt><expr><name>path_ranges</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>range</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name></name> = <call><name>MAX</name><argument_list>(<argument><expr><name><name>segment</name>-&gt;<name>range_start</name></name> - 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name></name> = <name><name>segment</name>-&gt;<name>range_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>inheritable</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>path_ranges</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>source_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>path_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>mergeinfo_p</name> = <name>mergeinfo</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__get_history_as_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>mergeinfo_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>range_youngest</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>range_oldest</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>segments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>peg_revnum</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>sesspool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>session</name> <init>= <expr><name>ra_session</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__derive_location</name><argument_list>(<argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr>&amp;<name>peg_revnum</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>session</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sesspool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>session</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>range_youngest</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>range_youngest</name> = <name>peg_revnum</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>range_oldest</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>range_oldest</name> = 0</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__repos_location_segments</name><argument_list>(<argument><expr>&amp;<name>segments</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr>""</expr></argument>,
<argument><expr><name>peg_revnum</name></expr></argument>, <argument><expr><name>range_youngest</name></expr></argument>,
<argument><expr><name>range_oldest</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__mergeinfo_from_segments</name><argument_list>(<argument><expr><name>mergeinfo_p</name></expr></argument>, <argument><expr><name>segments</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sesspool</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>should_elide_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>elides</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>parent_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>child_mergeinfo</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_suffix</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>child_mergeinfo</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>elides</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>child_mergeinfo</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>parent_mergeinfo</name> || <call><name>apr_hash_count</name><argument_list>(<argument><expr><name>parent_mergeinfo</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr>*<name>elides</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>elides</name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<name>parent_mergeinfo</name> || <call><name>apr_hash_count</name><argument_list>(<argument><expr><name>parent_mergeinfo</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>elides</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>path_tweaked_parent_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>path_tweaked_parent_mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>path_suffix</name></expr>)</condition><then>
<expr_stmt><expr><call><name>adjust_mergeinfo_source_paths</name><argument_list>(<argument><expr><name>path_tweaked_parent_mergeinfo</name></expr></argument>,
<argument><expr><name>path_suffix</name></expr></argument>, <argument><expr><name>parent_mergeinfo</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>path_tweaked_parent_mergeinfo</name> = <name>parent_mergeinfo</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo__equals</name><argument_list>(<argument><expr><name>elides</name></expr></argument>,
<argument><expr><name>path_tweaked_parent_mergeinfo</name></expr></argument>,
<argument><expr><name>child_mergeinfo</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>elide_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name></type> <name>parent_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>child_mergeinfo</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_suffix</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>elides</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>should_elide_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>elides</name></expr></argument>,
<argument><expr><name>parent_mergeinfo</name></expr></argument>, <argument><expr><name>child_mergeinfo</name></expr></argument>,
<argument><expr><name>path_suffix</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>elides</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_set2</name><argument_list>(<argument><expr><name>SVN_PROP_MERGEINFO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__elide_children</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>children_with_mergeinfo</name> &amp;&amp; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>last_immediate_child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>target_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__parse_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>target_mergeinfo</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>child_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>switched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>child_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>child</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>absent</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name>i</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>last_immediate_child</name> = <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>last_immediate_child</name> = <name><name>child</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>last_immediate_child</name>
&amp;&amp; <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name>last_immediate_child</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>last_immediate_child</name> = <name><name>child</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>child_entry</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__path_switched</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>&amp;<name>switched</name></expr></argument>, <argument><expr><name>child_entry</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>switched</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_prefix</name> <init>= <expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_suffix</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__parse_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>child_mergeinfo</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path_prefix</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>)</argument_list></call> != 0</expr>)</condition> <block>{
<expr_stmt><expr><name>path_suffix</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path_prefix</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_suffix</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path_prefix</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path_prefix</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>elide_mergeinfo</name><argument_list>(<argument><expr><name>target_mergeinfo</name></expr></argument>, <argument><expr><name>child_mergeinfo</name></expr></argument>,
<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>path_suffix</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__elide_mergeinfo</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc_elision_limit_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>wc_elision_limit_path</name>
|| <call><name>strcmp</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>wc_elision_limit_path</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>target_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>inherited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>walk_path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_wc_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>target_mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>inherited</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>,
<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>wc_elision_limit_path</name>
? <name>wc_elision_limit_path</name>
: <name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>walk_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>inherited</name> || <name>target_mergeinfo</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_wc_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>inherited</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>svn_mergeinfo_nearest_ancestor</name></expr></argument>,
<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>wc_elision_limit_path</name>
? <name>wc_elision_limit_path</name>
: <name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>walk_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>mergeinfo</name> &amp;&amp; !<name>wc_elision_limit_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_wc_or_repos_mergeinfo</name>
<argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr>&amp;<name>inherited</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>svn_mergeinfo_nearest_ancestor</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>mergeinfo</name> &amp;&amp; <name>wc_elision_limit_path</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>elide_mergeinfo</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>target_mergeinfo</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__elide_mergeinfo_for_tree</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>sorted_children</name> <init>=
<expr><call><name>svn_sort__hash</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>svn_sort_compare_items_as_paths</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = <name><name>sorted_children</name>-&gt;<name>nelts</name></name> -1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>child_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_wcpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_sort__item_t</name> *</type><name>item</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>sorted_children</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_sort__item_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>child_wcpath</name> = <name><name>item</name>-&gt;<name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>child_entry</name></expr></argument>, <argument><expr><name>child_wcpath</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__elide_mergeinfo</name><argument_list>(<argument><expr><name>child_wcpath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>child_entry</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>mergeinfo</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>repos_root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path_or_url</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_rel_path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__path_relative_to_root</name><argument_list>(<argument><expr>&amp;<name>repos_rel_path</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr>*<name>repos_root</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_repos_mergeinfo</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>,
<argument><expr><name>repos_rel_path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>indirect</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__entry_location</name><argument_list>(<argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>svn_opt_revision_working</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra__assert_mergeinfo_capable_server</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_repos_root</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_wc_or_repos_mergeinfo</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr>&amp;<name>indirect</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>elide_mergeinfo_catalog_dir_baton</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>inherited_mergeinfo_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo_catalog</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>elide_mergeinfo_catalog_open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>eb</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>elide_mergeinfo_catalog_dir_baton</name> *</type><name>b</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>mergeinfo_catalog</name></name> = <name>eb</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>root_baton</name> = <name>b</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>elide_mergeinfo_catalog_open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>elide_mergeinfo_catalog_dir_baton</name> *</type><name>b</name></decl>, *<decl><type ref="prev"/><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>mergeinfo_catalog</name></name> = <name><name>pb</name>-&gt;<name>mergeinfo_catalog</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>mergeinfo_catalog</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>b</name>-&gt;<name>inherited_mergeinfo_path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>b</name>-&gt;<name>inherited_mergeinfo_path</name></name> = <name><name>pb</name>-&gt;<name>inherited_mergeinfo_path</name></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>child_baton</name> = <name>b</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>elide_mergeinfo_catalog_cb_baton</name> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>elidable_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo_catalog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>result_pool</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>elide_mergeinfo_catalog_cb</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>dir_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>elide_mergeinfo_catalog_cb_baton</name> *</type><name>cb</name> <init>= <expr><name>callback_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>elide_mergeinfo_catalog_dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_suffix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>elides</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pb</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dir_baton</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>pb</name>-&gt;<name>inherited_mergeinfo_path</name></name>
|| <call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>path_suffix</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>inherited_mergeinfo_path</name></name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>path_suffix</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>should_elide_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>elides</name></expr></argument>,
<argument><expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>mergeinfo_catalog</name></name></expr></argument>,
<argument><expr><name><name>pb</name>-&gt;<name>inherited_mergeinfo_path</name></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>mergeinfo_catalog</name></name></expr></argument>,
<argument><expr><name>path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_suffix</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>elides</name></expr>)</condition><then>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>elidable_paths</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>result_pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__elide_mergeinfo_catalog</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo_catalog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>elidable_paths</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>editor</name> <init>= <expr><call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>elide_mergeinfo_catalog_cb_baton</name></type> <name>cb</name> <init>= <expr><block>{<expr><name>elidable_paths</name></expr>,
<expr><name>mergeinfo_catalog</name></expr>,
<expr><name>pool</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>editor</name>-&gt;<name>open_root</name></name> = <name>elide_mergeinfo_catalog_open_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>editor</name>-&gt;<name>open_directory</name></name> = <name>elide_mergeinfo_catalog_open_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_hash_keys</name><argument_list>(<argument><expr>&amp;<name>paths</name></expr></argument>, <argument><expr><name>mergeinfo_catalog</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_delta_path_driver</name><argument_list>(<argument><expr><name>editor</name></expr></argument>,
<argument><expr><name>mergeinfo_catalog</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>paths</name></expr></argument>,
<argument><expr><name>elide_mergeinfo_catalog_cb</name></expr></argument>,
<argument><expr>&amp;<name>cb</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>elidable_paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>elidable_paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>mergeinfo_catalog</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>filter_log_entry_baton_t</name> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_log_entry_receiver_t</name></type> <name>log_receiver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>log_receiver_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>filter_log_entry_with_rangelist</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>filter_log_entry_baton_t</name> *</type><name>fleb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>intersection</name></decl>, *<decl><type ref="prev"/><name>this_rangelist</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>fleb</name>-&gt;<name>ctx</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>fleb</name>-&gt;<name>ctx</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>fleb</name>-&gt;<name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>this_rangelist</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name></name> = <name><name>log_entry</name>-&gt;<name>revision</name></name> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name></name> = <name><name>log_entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>inheritable</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>this_rangelist</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_intersect</name><argument_list>(<argument><expr>&amp;<name>intersection</name></expr></argument>, <argument><expr><name><name>fleb</name>-&gt;<name>rangelist</name></name></expr></argument>,
<argument><expr><name>this_rangelist</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! (<name>intersection</name> &amp;&amp; <name><name>intersection</name>-&gt;<name>nelts</name></name>)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name><name>intersection</name>-&gt;<name>nelts</name></name> == 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>fleb</name>-&gt;<name>log_receiver</name></name><argument_list>(<argument><expr><name><name>fleb</name>-&gt;<name>log_receiver_baton</name></name></expr></argument>, <argument><expr><name>log_entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>logs_for_mergeinfo_rangelist</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_url</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
<param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>log_receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>log_receiver_baton</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>oldest_range</name></decl>, *<decl><type ref="prev"/><name>youngest_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>oldest_rev</name></decl>, <decl><type ref="prev"/><name>youngest_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>filter_log_entry_baton_t</name></type> <name>fleb</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name><name>rangelist</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>rangelist</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>rangelist</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><name><name>rangelist</name>-&gt;<name>elt_size</name></name></expr></argument>, <argument><expr><name>svn_sort_compare_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>source_url</name></expr>;</expr_stmt>
<expr_stmt><expr><name>youngest_range</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist</name></expr></argument>, <argument><expr><name><name>rangelist</name>-&gt;<name>nelts</name></name> - 1</expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>youngest_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>youngest_rev</name>.<name>value</name>.<name>number</name></name> = <name><name>youngest_range</name>-&gt;<name>end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>oldest_range</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oldest_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oldest_rev</name>.<name>value</name>.<name>number</name></name> = <name><name>oldest_range</name>-&gt;<name>start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fleb</name>.<name>rangelist</name></name> = <name>rangelist</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fleb</name>.<name>log_receiver</name></name> = <name>log_receiver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fleb</name>.<name>log_receiver_baton</name></name> = <name>log_receiver_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fleb</name>.<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_log4</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr>&amp;<name>oldest_rev</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>,
<argument><expr><name>filter_log_entry_with_rangelist</name></expr></argument>, <argument><expr>&amp;<name>fleb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>location_from_path_and_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>url</name></decl></param>,
<param><decl><type><name>svn_opt_revision_t</name> **</type><name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path_or_url</name></expr></argument>)</argument_list></call>
&amp;&amp; (<name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_committed</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>adm_lock_level</name> <init>= <expr><call><name>SVN_WC__LEVELS_TO_LOCK_FROM_DEPTH</name><argument_list>(<argument><expr><name>svn_depth_empty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>adm_lock_level</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ra_session_from_path</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>url</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>revision</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>revision</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>revision</name>)-&gt;<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>revision</name>)-&gt;<name><name>value</name>.<name>number</name></name></name> = <name>rev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>adm_access</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_mergeinfo_log_merged</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merge_source_path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>src_peg_revision</name></decl></param>,
<param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>log_receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>log_receiver_baton</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl>, *<decl><type ref="prev"/><name>log_target</name> <init>= <expr><name>NULL</name></expr></init>, *<name>merge_source_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>tgt_mergeinfo</name></decl>, <decl><type ref="prev"/><name>source_history</name></decl>, <decl><type ref="prev"/><name>mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name> *</type><name>real_src_peg_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>location_from_path_and_rev</name><argument_list>(<argument><expr>&amp;<name>merge_source_url</name></expr></argument>, <argument><expr>&amp;<name>real_src_peg_revision</name></expr></argument>,
<argument><expr><name>merge_source_path_or_url</name></expr></argument>,
<argument><expr><name>src_peg_revision</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>tgt_mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>repos_root</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>tgt_mergeinfo</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_history_as_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>source_history</name></expr></argument>,
<argument><expr><name>merge_source_url</name></expr></argument>,
<argument><expr><name>real_src_peg_revision</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_intersect</name><argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr><name>tgt_mergeinfo</name></expr></argument>,
<argument><expr><name>source_history</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rangelist</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>64</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>list</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name>-&gt;<name>nelts</name></name> - 1</expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>youngest_rev</name></expr></argument>)</argument_list></call>)
|| (<name><name>range</name>-&gt;<name>end</name></name> &gt; <name>youngest_rev</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>youngest_rev</name> = <name><name>range</name>-&gt;<name>end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>log_target</name> = <name>key</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_merge</name><argument_list>(<argument><expr>&amp;<name>rangelist</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>! <name><name>rangelist</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>log_target</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>log_target</name> + 1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>logs_for_mergeinfo_rangelist</name><argument_list>(<argument><expr><name>log_target</name></expr></argument>, <argument><expr><name>rangelist</name></expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>,
<argument><expr><name>log_receiver</name></expr></argument>, <argument><expr><name>log_receiver_baton</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_mergeinfo_get_merged</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>mergeinfo_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>full_path_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>repos_root</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>mergeinfo_p</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mergeinfo</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<expr_stmt><expr><name>full_path_mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_url</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>source_url</name> = <call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>source_url</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>source_url</name> + 1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>full_path_mergeinfo</name></expr></argument>, <argument><expr><name>source_url</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>mergeinfo_p</name> = <name>full_path_mergeinfo</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_mergeinfo_log_eligible</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merge_source_path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>src_peg_revision</name></decl></param>,
<param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>log_receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>log_receiver_baton</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl>, <decl><type ref="prev"/><name>history</name></decl>, <decl><type ref="prev"/><name>source_history</name></decl>, <decl><type ref="prev"/><name>available</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name> *</type><name>real_src_peg_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl>, *<decl><type ref="prev"/><name>merge_source_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>sesspool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>location_from_path_and_rev</name><argument_list>(<argument><expr>&amp;<name>merge_source_url</name></expr></argument>, <argument><expr>&amp;<name>real_src_peg_revision</name></expr></argument>,
<argument><expr><name>merge_source_path_or_url</name></expr></argument>,
<argument><expr><name>src_peg_revision</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>repos_root</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_history_as_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>,
<argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>mergeinfo</name></expr>)</condition><then>
<expr_stmt><expr><name>mergeinfo</name> = <name>history</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>history</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>sesspool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>merge_source_url</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_history_as_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>source_history</name></expr></argument>,
<argument><expr><name>merge_source_url</name></expr></argument>,
<argument><expr><name>real_src_peg_revision</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_remove</name><argument_list>(<argument><expr>&amp;<name>available</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>source_history</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rangelist</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>64</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>available</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>list</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>list</name>-&gt;<name>nelts</name></name> - 1</expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>youngest_rev</name></expr></argument>)</argument_list></call>)
|| (<name><name>range</name>-&gt;<name>end</name></name> &gt; <name>youngest_rev</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>youngest_rev</name> = <name><name>range</name>-&gt;<name>end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>log_target</name> = <name>key</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_merge</name><argument_list>(<argument><expr>&amp;<name>rangelist</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>! <name><name>rangelist</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>log_target</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>log_target</name> + 1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>logs_for_mergeinfo_rangelist</name><argument_list>(<argument><expr><name>log_target</name></expr></argument>, <argument><expr><name>rangelist</name></expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>,
<argument><expr><name>log_receiver</name></expr></argument>, <argument><expr><name>log_receiver_baton</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_suggest_merge_sources</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>suggestions</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<expr_stmt><expr><name>list</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>repos_root</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_copy_source</name><argument_list>(<argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr>&amp;<name>copyfrom_path</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_rev</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copyfrom_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> =
<call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>copyfrom_path</name> + 1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>mergeinfo</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rel_path</name> = <name>key</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copyfrom_path</name> == <name>NULL</name> || <call><name>strcmp</name><argument_list>(<argument><expr><name>rel_path</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = \
<call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>rel_path</name> + 1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr>*<name>suggestions</name> = <name>list</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
