<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_client/util.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>apr_hash_t</name> *</type>
<name>string_hash_dup</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>new_hash</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>new_hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>new_hash</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_commit_item_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_client_commit_item3_t</name> **</type><name>item</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>item</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_client_commit_item3_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_client_commit_item3_t</name> *</type>
<name>svn_client_commit_item3_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_client_commit_item3_t</name> *</type><name>item</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_client_commit_item3_t</name> *</type><name>new_item</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>new_item</name> = *<name>item</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new_item</name>-&gt;<name>path</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_item</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_item</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>new_item</name>-&gt;<name>url</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_item</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_item</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>new_item</name>-&gt;<name>copyfrom_url</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_item</name>-&gt;<name>copyfrom_url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_item</name>-&gt;<name>copyfrom_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>new_item</name>-&gt;<name>incoming_prop_changes</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_item</name>-&gt;<name>incoming_prop_changes</name></name> =
<call><name>svn_prop_array_dup</name><argument_list>(<argument><expr><name><name>new_item</name>-&gt;<name>incoming_prop_changes</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>new_item</name>-&gt;<name>outgoing_prop_changes</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_item</name>-&gt;<name>outgoing_prop_changes</name></name> =
<call><name>svn_prop_array_dup</name><argument_list>(<argument><expr><name><name>new_item</name>-&gt;<name>outgoing_prop_changes</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>new_item</name></expr>;</return>
}</block></function>
<function><type><name>svn_client_commit_item2_t</name> *</type>
<name>svn_client_commit_item2_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_client_commit_item2_t</name> *</type><name>item</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_client_commit_item2_t</name> *</type><name>new_item</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>new_item</name> = *<name>item</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new_item</name>-&gt;<name>path</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_item</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_item</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>new_item</name>-&gt;<name>url</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_item</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_item</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>new_item</name>-&gt;<name>copyfrom_url</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_item</name>-&gt;<name>copyfrom_url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_item</name>-&gt;<name>copyfrom_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>new_item</name>-&gt;<name>wcprop_changes</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_item</name>-&gt;<name>wcprop_changes</name></name> = <call><name>svn_prop_array_dup</name><argument_list>(<argument><expr><name><name>new_item</name>-&gt;<name>wcprop_changes</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>new_item</name></expr>;</return>
}</block></function>
<function><type><name>svn_client_proplist_item_t</name> *</type>
<name>svn_client_proplist_item_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_client_proplist_item_t</name> *</type><name>item</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type> <name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_client_proplist_item_t</name> *</type><name>new_item</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>item</name>-&gt;<name>node_name</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_item</name>-&gt;<name>node_name</name></name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>node_name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>item</name>-&gt;<name>prop_hash</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_item</name>-&gt;<name>prop_hash</name></name> = <call><name>string_hash_dup</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>prop_hash</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>new_item</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_path_to_repos_urls</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>url</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>repos_root</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>need_wc_cleanup</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc_path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! *<name>adm_access</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wc_path</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>need_wc_cleanup</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>wc_path</name></expr></argument>, <argument><expr>*<name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__entry_location</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wc_path</name></expr></argument>,
<argument><expr><name>svn_opt_revision_unspecified</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>repos_root</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>repos_root</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__path_relative_to_root</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>rel_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>include_leading_slash</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>need_wc_cleanup</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>repos_root</name> != <name>NULL</name> || <name>ra_session</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path_or_url</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>wc_path_to_repos_urls</name><argument_list>(<argument><expr>&amp;<name>path_or_url</name></expr></argument>, <argument><expr>&amp;<name>repos_root</name></expr></argument>, <argument><expr>&amp;<name>need_wc_cleanup</name></expr></argument>,
<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>repos_root</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>rel_path</name> = <name>include_leading_slash</name> ? "/" : ""</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_url</name> <init>= <expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>rel_url</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_UNRELATED_RESOURCES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"URL '%s' is not a child of repository "
"root URL '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>rel_url</name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>rel_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>rel_path</name> = <name>include_leading_slash</name>
? <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>rel_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> : <name>rel_url</name></expr>;</expr_stmt>
}</block></else></if>
<label><name>cleanup</name>:</label>
<if>if <condition>(<expr><name>need_wc_cleanup</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err2</name> <init>= <expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <name>err2</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__get_repos_root</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>repos_root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>need_wc_cleanup</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>sesspool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path_or_url</name></expr></argument>)</argument_list></call>
&amp;&amp; (<name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>repos_root</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>wc_path_to_repos_urls</name><argument_list>(<argument><expr>&amp;<name>path_or_url</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>, <argument><expr>&amp;<name>need_wc_cleanup</name></expr></argument>,
<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>repos_root</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>*<name>repos_root</name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sesspool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_client__ra_session_from_path</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>,
<argument><expr>&amp;<name>rev</name></expr></argument>,
<argument><expr>&amp;<name>target_url</name></expr></argument>,
<argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>sesspool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
}</block></then></if>
<label><name>cleanup</name>:</label>
<if>if <condition>(<expr><name>sesspool</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>need_wc_cleanup</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err2</name> <init>= <expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <name>err2</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__default_walker_error_handler</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
</unit>
