<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_client/log.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_sorts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>revnum_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*((<name>svn_revnum_t</name> *) <name>baton</name>) = <name><name>log_entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__oldest_rev_at_path</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>oldest_rev</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rel_paths</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rel_path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>revprops</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>oldest_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>rel_paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>rel_path</name></expr>;</expr_stmt>
<return>return <expr><call><name>svn_ra_get_log2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>rel_paths</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>revnum_receiver</name></expr></argument>, <argument><expr><name>oldest_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>copyfrom_info_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>copyfrom_info_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>copyfrom_info_t</name> *</type><name>copyfrom_info</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>copyfrom_info</name>-&gt;<name>path</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>changed_paths</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_log_changed_path_t</name> *</type><name>changed_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>sorted_changed_paths</name> <init>=
<expr><call><name>svn_sort__hash</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>changed_paths</name></name></expr></argument>,
<argument><expr><name>svn_sort_compare_items_as_paths</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = (<name><name>sorted_changed_paths</name>-&gt;<name>nelts</name></name> -1)</expr> ;</init> <condition><expr><name>i</name> &gt;= 0</expr> ;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_sort__item_t</name> *</type><name>item</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>sorted_changed_paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_sort__item_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>path</name> = <name><name>item</name>-&gt;<name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>changed_path</name> = <name><name>item</name>-&gt;<name>value</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>changed_path</name>-&gt;<name>copyfrom_path</name></name> &amp;&amp;
<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>changed_path</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call> &amp;&amp;
<call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>copyfrom_info</name>-&gt;<name>target_path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>copyfrom_info</name>-&gt;<name>target_path</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>copyfrom_info</name>-&gt;<name>path</name></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>copyfrom_info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>changed_path</name>-&gt;<name>copyfrom_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>copyfrom_info</name>-&gt;<name>path</name></name> =
<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>copyfrom_info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>changed_path</name>-&gt;<name>copyfrom_path</name></name></expr></argument>,
<argument><expr><name><name>copyfrom_info</name>-&gt;<name>target_path</name></name> +
<call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>copyfrom_info</name>-&gt;<name>rev</name></name> = <name><name>changed_path</name>-&gt;<name>copyfrom_rev</name></name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__get_copy_source</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>copyfrom_rev</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>copyfrom_info_t</name></type> <name>copyfrom_info</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>SVN_INVALID_REVNUM</name></expr>, <expr><name>pool</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path_or_url</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>sesspool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>at_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>at_url</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ra_session_from_path</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>at_rev</name></expr></argument>, <argument><expr>&amp;<name>at_url</name></expr></argument>,
<argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>revision</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__path_relative_to_root</name><argument_list>(<argument><expr>&amp;<name><name>copyfrom_info</name>.<name>target_path</name></name></expr></argument>,
<argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_get_log2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>, <argument><expr><name>at_rev</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>copyfrom_info_receiver</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name> ||
<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_REQUEST_FAILED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>copyfrom_path</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>copyfrom_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>copyfrom_path</name> = <name><name>copyfrom_info</name>.<name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>copyfrom_rev</name> = <name><name>copyfrom_info</name>.<name>rev</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
}</block></struct></type> <name>pre_15_receiver_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>pre_15_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>pre_15_receiver_baton_t</name> *</type><name>rb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>revision</name></name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
<return>return <expr><call><name><name>rb</name>-&gt;<name>receiver</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>log_entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>rb</name>-&gt;<name>revprops</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>want_author</name></decl>, <decl><type ref="prev"/><name>want_date</name></decl>, <decl><type ref="prev"/><name>want_log</name></decl>;</decl_stmt>
<expr_stmt><expr><name>want_author</name> = <name>want_date</name> = <name>want_log</name> = <name>FALSE</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>rb</name>-&gt;<name>revprops</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>want_author</name> = <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>want_date</name> = <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>want_log</name> = <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_prop</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>ra_session</name></name></expr></argument>, <argument><expr><name><name>log_entry</name>-&gt;<name>revision</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>revprops</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr>(const <name>void</name> *)<name>name</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>(const <name>void</name> *)<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>want_author</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>want_date</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>want_log</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_proplist</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>ra_session</name></name></expr></argument>, <argument><expr><name><name>log_entry</name>-&gt;<name>revision</name></name></expr></argument>,
<argument><expr>&amp;<name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><call><name><name>rb</name>-&gt;<name>receiver</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>log_entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_log4</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end</name></decl></param>,
<param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
<param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>real_receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>real_receiver_baton</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url_or_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>actual_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>condensed_targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>ignored_revnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>session_opt_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ra_target</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>start</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)
|| (<name><name>end</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CLIENT_BAD_REVISION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing required revision specification"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>url_or_path</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>url_or_path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_committed</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_previous</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CLIENT_BAD_REVISION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Revision type requires a working copy path, not a URL"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>condensed_targets</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &gt; 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>condensed_targets</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> =
<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>condensed_targets</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = ""</expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>target_urls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>real_targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &gt; 1</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"When specifying working copy paths, only "
"one target may be given"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>target_urls</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>real_targets</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry '%s' has no URL"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>URL</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>target_urls</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>URL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>real_targets</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>target</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>target_urls</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_condense_targets</name><argument_list>(<argument><expr>&amp;<name>url_or_path</name></expr></argument>, <argument><expr>&amp;<name>condensed_targets</name></expr></argument>,
<argument><expr><name>target_urls</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>condensed_targets</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>condensed_targets</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = ""</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>targets</name> = <name>real_targets</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>start</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_number</name> &amp;&amp;
<name><name>end</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_number</name></expr>)</condition><then>
<expr_stmt><expr><name>session_opt_rev</name> = (<name><name>start</name>-&gt;<name>value</name>.<name>number</name></name> &gt; <name><name>end</name>-&gt;<name>value</name>.<name>number</name></name> ?
*<name>start</name> : *<name>end</name>)</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>start</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_date</name> &amp;&amp;
<name><name>end</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_date</name></expr>)</condition><then>
<expr_stmt><expr><name>session_opt_rev</name> = (<name><name>start</name>-&gt;<name>value</name>.<name>date</name></name> &gt; <name><name>end</name>-&gt;<name>value</name>.<name>date</name></name> ? *<name>start</name> : *<name>end</name>)</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>session_opt_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt></else></if></else></if>
<block>{
<if>if <condition>(<expr><name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_committed</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_previous</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_condense_targets</name><argument_list>(<argument><expr>&amp;<name>ra_target</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>ra_target</name> = <name>url_or_path</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ra_session_from_path</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>ignored_revnum</name></expr></argument>,
<argument><expr>&amp;<name>actual_url</name></expr></argument>, <argument><expr><name>ra_target</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>, <argument><expr>&amp;<name>session_opt_rev</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>start_revnum</name></decl>, <decl><type ref="prev"/><name>end_revnum</name></decl>, <decl><type ref="prev"/><name>youngest_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_log_revprops</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
<argument_list>(<argument><expr>&amp;<name>start_revnum</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
<argument_list>(<argument><expr>&amp;<name>end_revnum</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_has_capability</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>has_log_revprops</name></expr></argument>,
<argument><expr><name>SVN_RA_CAPABILITY_LOG_REVPROPS</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>has_log_revprops</name></expr>)</condition><then>
<return>return <expr><call><name>svn_ra_get_log2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>condensed_targets</name></expr></argument>,
<argument><expr><name>start_revnum</name></expr></argument>,
<argument><expr><name>end_revnum</name></expr></argument>,
<argument><expr><name>limit</name></expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>,
<argument><expr><name>strict_node_history</name></expr></argument>,
<argument><expr><name>include_merged_revisions</name></expr></argument>,
<argument><expr><name>revprops</name></expr></argument>,
<argument><expr><name>real_receiver</name></expr></argument>,
<argument><expr><name>real_receiver_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<decl_stmt><decl><type><name>pre_15_receiver_baton_t</name></type> <name>rb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_open_ra_session</name><argument_list>(<argument><expr>&amp;<name><name>rb</name>.<name>ra_session</name></name></expr></argument>, <argument><expr><name>actual_url</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>revprops</name></name> = <name>revprops</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>receiver</name></name> = <name>real_receiver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>.<name>baton</name></name> = <name>real_receiver_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ra_session_from_path</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>,
<argument><expr>&amp;<name>ignored_revnum</name></expr></argument>,
<argument><expr>&amp;<name>actual_url</name></expr></argument>, <argument><expr><name>ra_target</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr>&amp;<name>session_opt_rev</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_ra_get_log2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>condensed_targets</name></expr></argument>,
<argument><expr><name>start_revnum</name></expr></argument>,
<argument><expr><name>end_revnum</name></expr></argument>,
<argument><expr><name>limit</name></expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>,
<argument><expr><name>strict_node_history</name></expr></argument>,
<argument><expr><name>include_merged_revisions</name></expr></argument>,
<argument><expr><call><name>svn_compat_log_revprops_in</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pre_15_receiver</name></expr></argument>,
<argument><expr>&amp;<name>rb</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_log3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end</name></decl></param>,
<param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>receiver2_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_compat_wrap_log_receiver</name><argument_list>(<argument><expr>&amp;<name>receiver2</name></expr></argument>, <argument><expr>&amp;<name>receiver2_baton</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_client_log4</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>strict_node_history</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><call><name>svn_compat_log_revprops_in</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>receiver2</name></expr></argument>, <argument><expr><name>receiver2_baton</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_log2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end</name></decl></param>,
<param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_revision</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>peg_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>
<return>return <expr><call><name>svn_client_log3</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>&amp;<name>peg_revision</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>strict_node_history</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_log</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_client_log2</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>discover_changed_paths</name></expr></argument>,
<argument><expr><name>strict_node_history</name></expr></argument>, <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NO_SUCH_REVISION</name>)
&amp;&amp; (<name><name>start</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_head</name>)
&amp;&amp; ((<name><name>end</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_number</name>)
&amp;&amp; (<name><name>end</name>-&gt;<name>value</name>.<name>number</name></name> == 1))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>receiver</name><argument_list>(<argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"No commits in repository"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
</unit>
