<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_client/prop_commands.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>is_revision_prop_name</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>revision_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_PROP_REVISION_ALL_PROPS</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>revision_props</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name><name>revision_props</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>revision_props</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>error_if_wcprop_name</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>svn_property_kind</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> == <name>svn_prop_wc_kind</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_CLIENT_PROPERTY_NAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is a wcprop, thus not accessible to clients"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>propset_walk_baton</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>base_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changelist_hash</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>propset_walk_cb</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>propset_walk_baton</name> *</type><name>wb</name> <init>= <expr><name>walk_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr>! <call><name>SVN_WC__CL_MATCH</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>changelist_hash</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>base_access</name></name></expr></argument>,
<argument><expr>(<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name> ? <name>path</name>
: <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_prop_set2</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>propname</name></name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>propval</name></name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>force</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_ILLEGAL_TARGET</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>getter_baton</name> <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>base_revision_for_url</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_file_for_validation</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>mime_type</name></decl></param>,
<param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>getter_baton</name> *</type><name>gb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name> <init>= <expr><name><name>gb</name>-&gt;<name>ra_session</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_file</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>gb</name>-&gt;<name>base_revision_for_url</name></name></expr></argument>,
<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>(<name>mime_type</name> ? &amp;<name>props</name> : <name>NULL</name>)</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mime_type</name></expr>)</condition><then>
<expr_stmt><expr>*<name>mime_type</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SVN_PROP_MIME_TYPE</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier>
<name>svn_error_t</name> *</type>
<name>do_url_propset</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_revnum_t</name></type> <name>base_revision_for_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>root_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>open_root</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>base_revision_for_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr>&amp;<name>root_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>file_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>open_file</name></name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>root_baton</name></expr></argument>, <argument><expr><name>base_revision_for_url</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>file_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>close_file</name></name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>change_dir_prop</name></name><argument_list>(<argument><expr><name>root_baton</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>close_directory</name></name><argument_list>(<argument><expr><name>root_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>propset_on_url</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>skip_checks</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision_for_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<enum>enum <name>svn_prop_kind</name> <name>prop_kind</name> <expr_stmt><expr>= <call><name>svn_property_kind</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></enum>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>node_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>commit_baton</name></decl>, *<decl><type ref="prev"/><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>commit_revprops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>prop_kind</name> != <name>svn_prop_regular_kind</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_BAD_PROP_KIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Property '%s' is not a regular property"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>base_revision_for_url</name></expr></argument>,
<argument><expr>&amp;<name>node_kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>node_kind</name> == <name>svn_node_none</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' does not exist in revision %ld"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>target</name></expr></argument>, <argument><expr><name>base_revision_for_url</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>propval</name> &amp;&amp; <call><name>svn_prop_is_svn_prop</name><argument_list>(<argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>new_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>getter_baton</name></type> <name>gb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>gb</name>.<name>ra_session</name></name> = <name>ra_session</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gb</name>.<name>base_revision_for_url</name></name> = <name>base_revision_for_url</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_canonicalize_svn_prop</name><argument_list>(<argument><expr>&amp;<name>new_value</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>,
<argument><expr><name>target</name></expr></argument>, <argument><expr><name>node_kind</name></expr></argument>, <argument><expr><name>skip_checks</name></expr></argument>,
<argument><expr><name>get_file_for_validation</name></expr></argument>, <argument><expr>&amp;<name>gb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>propval</name> = <name>new_value</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>SVN_CLIENT__HAS_LOG_MSG_FUNC</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_client_commit_item3_t</name> *</type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>commit_items</name>
<init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_commit_item_create</name>
<argument_list>(<argument><expr>(const <name>svn_client_commit_item3_t</name> **) &amp;<name>item</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name>-&gt;<name>url</name></name> = <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name>-&gt;<name>state_flags</name></name> = <name>SVN_CLIENT_COMMIT_ITEM_PROP_MODS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>commit_items</name></expr></argument>, <argument><expr><name>svn_client_commit_item3_t</name> *</expr></argument>)</argument_list></call> = <name>item</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_log_msg</name><argument_list>(<argument><expr>&amp;<name>message</name></expr></argument>, <argument><expr>&amp;<name>tmp_file</name></expr></argument>, <argument><expr><name>commit_items</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>message</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
}</block></then> <else>else
<expr_stmt><expr><name>message</name> = ""</expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ensure_revprop_table</name><argument_list>(<argument><expr>&amp;<name>commit_revprops</name></expr></argument>, <argument><expr><name>revprop_table</name></expr></argument>,
<argument><expr><name>message</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__commit_get_baton</name><argument_list>(<argument><expr>&amp;<name>commit_baton</name></expr></argument>, <argument><expr><name>commit_info_p</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_commit_editor3</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>,
<argument><expr><name>commit_revprops</name></expr></argument>,
<argument><expr><name>svn_client__commit_callback</name></expr></argument>,
<argument><expr><name>commit_baton</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>do_url_propset</name><argument_list>(<argument><expr><name>propname</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>, <argument><expr><name>node_kind</name></expr></argument>, <argument><expr><name>base_revision_for_url</name></expr></argument>,
<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>abort_edit</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>close_edit</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_propset3</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>skip_checks</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision_for_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>is_revision_prop_name</name><argument_list>(<argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_PROPERTY_NAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Revision property '%s' not allowed "
"in this context"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>error_if_wcprop_name</name><argument_list>(<argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propval</name> &amp;&amp; ! <call><name>svn_prop_name_is_valid</name><argument_list>(<argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_PROPERTY_NAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Bad property name: '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>base_revision_for_url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_BAD_REVISION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Setting property on non-local target '%s' "
"needs a base revision"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>depth</name> &gt; <name>svn_depth_empty</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Setting property recursively on non-local "
"target '%s' is not supported"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>propname</name></expr></argument>, <argument><expr><name>SVN_PROP_EOL_STYLE</name></expr></argument>)</argument_list></call> == 0) ||
(<call><name>strcmp</name><argument_list>(<argument><expr><name>propname</name></expr></argument>, <argument><expr><name>SVN_PROP_KEYWORDS</name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Setting property '%s' on non-local target "
"'%s' is not supported"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>propset_on_url</name><argument_list>(<argument><expr><name>commit_info_p</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><name>skip_checks</name></expr></argument>, <argument><expr><name>base_revision_for_url</name></expr></argument>, <argument><expr><name>revprop_table</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>adm_lock_level</name> <init>= <expr><call><name>SVN_WC__LEVELS_TO_LOCK_FROM_DEPTH</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changelist_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>changelists</name> &amp;&amp; <name><name>changelists</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_hash_from_cstring_keys</name><argument_list>(<argument><expr>&amp;<name>changelist_hash</name></expr></argument>,
<argument><expr><name>changelists</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>adm_lock_level</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>depth</name> &gt;= <name>svn_depth_files</name> &amp;&amp; <name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_wc_entry_callbacks2_t</name></type> <name>walk_callbacks</name>
<init>= <expr><block>{ <expr><name>propset_walk_cb</name></expr>, <expr><name>svn_client__default_walker_error_handler</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>propset_walk_baton</name></type> <name>wb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>base_access</name></name> = <name>adm_access</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>propname</name></name> = <name>propname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>propval</name></name> = <name>propval</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>force</name></name> = <name>skip_checks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>changelist_hash</name></name> = <name>changelist_hash</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_walk_entries3</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>walk_callbacks</name></expr></argument>,
<argument><expr>&amp;<name>wb</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>SVN_WC__CL_MATCH</name><argument_list>(<argument><expr><name>changelist_hash</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_set2</name><argument_list>(<argument><expr><name>propname</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>skip_checks</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_propset2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>skip_checks</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_client_propset3</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><call><name>SVN_DEPTH_INFINITY_OR_EMPTY</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>skip_checks</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_propset</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_create_context</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_client_propset2</name><argument_list>(<argument><expr><name>propname</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_revprop_set</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>set_rev</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>propname</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>)</argument_list></call> == 0)
&amp;&amp; <name>propval</name>
&amp;&amp; <call><name>strchr</name><argument_list>(<argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call> != <name>NULL</name>
&amp;&amp; (! <name>force</name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_REVISION_AUTHOR_CONTAINS_NEWLINE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Value will not be set unless forced"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>propval</name> &amp;&amp; ! <call><name>svn_prop_name_is_valid</name><argument_list>(<argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_PROPERTY_NAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Bad property name: '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
<argument_list>(<argument><expr><name>set_rev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_change_rev_prop</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>*<name>set_rev</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>pristine_or_working_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>pristine</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>pristine</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_prop_diffs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_list</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>pristine_or_working_propval</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>propval</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>pristine</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>pristine</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>pristine_props</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_prop_diffs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>pristine_props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>pristine_props</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr><name>propval</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>propget_walk_baton</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>pristine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>base_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changelist_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>propget_walk_cb</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>propget_walk_baton</name> *</type><name>wb</name> <init>= <expr><name>walk_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name>
== (<name><name>wb</name>-&gt;<name>pristine</name></name> ? <name>svn_wc_schedule_add</name> : <name>svn_wc_schedule_delete</name>)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr>! <call><name>SVN_WC__CL_MATCH</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>changelist_hash</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>pristine_or_working_propval</name><argument_list>(<argument><expr>&amp;<name>propval</name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>propname</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name><name>wb</name>-&gt;<name>base_access</name></name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>pristine</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propval</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>props</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>propval</name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>propval</name></expr></argument>, <argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>props</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>remote_propget</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_prefix</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_relative</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>perm_pool</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>work_pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>dirents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_dir2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>,
<argument><expr>(<name>depth</name> &gt;= <name>svn_depth_files</name> ? &amp;<name>dirents</name> : <name>NULL</name>)</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>prop_hash</name></expr></argument>, <argument><expr><name>target_relative</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>,
<argument><expr><name>SVN_DIRENT_KIND</name></expr></argument>, <argument><expr><name>work_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_file</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>target_relative</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>prop_hash</name></expr></argument>, <argument><expr><name>work_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_ENTRY_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' does not exist in revision %ld"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>target_prefix</name></expr></argument>, <argument><expr><name>target_relative</name></expr></argument>, <argument><expr><name>work_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>revnum</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_NODE_UNKNOWN_KIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unknown node kind for '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>target_prefix</name></expr></argument>, <argument><expr><name>target_relative</name></expr></argument>, <argument><expr><name>work_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
<block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>val</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>prop_hash</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>val</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>props</name></expr></argument>,
<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>target_prefix</name></expr></argument>, <argument><expr><name>target_relative</name></expr></argument>, <argument><expr><name>perm_pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><call><name>svn_string_dup</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>perm_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<if>if <condition>(<expr><name>depth</name> &gt;= <name>svn_depth_files</name>
&amp;&amp; <name>kind</name> == <name>svn_node_dir</name>
&amp;&amp; <call><name>apr_hash_count</name><argument_list>(<argument><expr><name>dirents</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>work_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>work_pool</name></expr></argument>, <argument><expr><name>dirents</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>this_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>this_ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_target_relative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth_below_here</name> <init>= <expr><name>depth</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>this_name</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>this_ent</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_files</name> &amp;&amp; <name><name>this_ent</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_files</name> || <name>depth</name> == <name>svn_depth_immediates</name></expr>)</condition><then>
<expr_stmt><expr><name>depth_below_here</name> = <name>svn_depth_empty</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>new_target_relative</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>target_relative</name></expr></argument>,
<argument><expr><name>this_name</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remote_propget</name><argument_list>(<argument><expr><name>props</name></expr></argument>,
<argument><expr><name>propname</name></expr></argument>,
<argument><expr><name>target_prefix</name></expr></argument>,
<argument><expr><name>new_target_relative</name></expr></argument>,
<argument><expr><name><name>this_ent</name>-&gt;<name>kind</name></name></expr></argument>,
<argument><expr><name>revnum</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>depth_below_here</name></expr></argument>,
<argument><expr><name>perm_pool</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_walker_error_handler</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>root_err</name> <init>= <expr><call><name>svn_error_root_cause</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>root_err</name> == <name>SVN_NO_ERROR</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>root_err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_PATH_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__get_prop_from_wc</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>pristine</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changelist_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_wc_entry_callbacks2_t</name></type> <name>walk_callbacks</name> <init>=
<expr><block>{ <expr><name>propget_walk_cb</name></expr>, <expr><name>wc_walker_error_handler</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>propget_walk_baton</name></type> <name>wb</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>changelists</name> &amp;&amp; <name><name>changelists</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_hash_from_cstring_keys</name><argument_list>(<argument><expr>&amp;<name>changelist_hash</name></expr></argument>, <argument><expr><name>changelists</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_unknown</name></expr>)</condition><then>
<expr_stmt><expr><name>depth</name> = <name>svn_depth_infinity</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>wb</name>.<name>propname</name></name> = <name>propname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>pristine</name></name> = <name>pristine</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>base_access</name></name> = <name>adm_access</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>changelist_hash</name></name> = <name>changelist_hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>props</name></name> = <name>props</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>depth</name> &gt;= <name>svn_depth_files</name> &amp;&amp; <name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_walk_entries3</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr>&amp;<name>walk_callbacks</name></expr></argument>, <argument><expr>&amp;<name>wb</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>SVN_WC__CL_MATCH</name><argument_list>(<argument><expr><name>changelist_hash</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>propget_walk_cb</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr>&amp;<name>wb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_propget3</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>actual_revnum</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>error_if_wcprop_name</name><argument_list>(<argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path_or_url</name></expr></argument>)</argument_list></call>
&amp;&amp; (<name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_committed</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)
&amp;&amp; (<name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>
|| <name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name>
|| <name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_committed</name>
|| <name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>pristine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>adm_lock_level</name> <init>= <expr><call><name>SVN_WC__LEVELS_TO_LOCK_FROM_DEPTH</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>adm_lock_level</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>node</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
<argument_list>(<argument><expr>&amp;<name>revnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pristine</name> = (<name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_committed</name>
|| <name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_prop_from_wc</name><argument_list>(<argument><expr>*<name>props</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>pristine</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>changelists</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ra_session_from_path</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>revnum</name></expr></argument>,
<argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>revision</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>revnum</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remote_propget</name><argument_list>(<argument><expr>*<name>props</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>""</expr></argument>,
<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>actual_revnum</name></expr>)</condition><then>
<expr_stmt><expr>*<name>actual_revnum</name> = <name>revnum</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_propget2</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_client_propget3</name><argument_list>(<argument><expr><name>props</name></expr></argument>,
<argument><expr><name>propname</name></expr></argument>,
<argument><expr><name>target</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>revision</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>SVN_DEPTH_INFINITY_OR_EMPTY</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_propget</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_client_propget2</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
<argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_revprop_get</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><name>svn_string_t</name> **</type><name>propval</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>set_rev</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
<argument_list>(<argument><expr><name>set_rev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_prop</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>*<name>set_rev</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name>*</type>
<name>call_receiver</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl></param>,
<param><decl><type><name>svn_proplist_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>prop_hash</name> &amp;&amp; <call><name>apr_hash_count</name><argument_list>(<argument><expr><name>prop_hash</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>receiver</name><argument_list>(<argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>prop_hash</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>remote_proplist</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_prefix</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_relative</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_proplist_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>scratchpool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>dirents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl>, *<decl><type ref="prev"/><name>final_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_dir2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>,
<argument><expr>(<name>depth</name> &gt; <name>svn_depth_empty</name>) ? &amp;<name>dirents</name> : <name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>prop_hash</name></expr></argument>, <argument><expr><name>target_relative</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>,
<argument><expr><name>SVN_DIRENT_KIND</name></expr></argument>, <argument><expr><name>scratchpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_file</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>target_relative</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>prop_hash</name></expr></argument>, <argument><expr><name>scratchpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_NODE_UNKNOWN_KIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unknown node kind for '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>target_prefix</name></expr></argument>, <argument><expr><name>target_relative</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><name>final_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>scratchpool</name></expr></argument>, <argument><expr><name>prop_hash</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_prop_kind_t</name></type> <name>prop_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prop_kind</name> = <call><name>svn_property_kind</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>(const <name>char</name> *) <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prop_kind</name> == <name>svn_prop_regular_kind</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>name</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>(const <name>char</name> *) <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr>(<name>svn_string_t</name> *) <name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>final_hash</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>call_receiver</name><argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>target_prefix</name></expr></argument>, <argument><expr><name>target_relative</name></expr></argument>,
<argument><expr><name>scratchpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>final_hash</name></expr></argument>, <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>depth</name> &gt; <name>svn_depth_empty</name>
&amp;&amp; (<name>kind</name> == <name>svn_node_dir</name>) &amp;&amp; (<call><name>apr_hash_count</name><argument_list>(<argument><expr><name>dirents</name></expr></argument>)</argument_list></call> &gt; 0)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>scratchpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>scratchpool</name></expr></argument>, <argument><expr><name>dirents</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>this_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>this_ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_target_relative</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>this_name</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>this_ent</name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_target_relative</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>target_relative</name></expr></argument>,
<argument><expr><name>this_name</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>this_ent</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>
|| <name>depth</name> &gt; <name>svn_depth_files</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth_below_here</name> <init>= <expr><name>depth</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_immediates</name></expr>)</condition><then>
<expr_stmt><expr><name>depth_below_here</name> = <name>svn_depth_empty</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remote_proplist</name><argument_list>(<argument><expr><name>target_prefix</name></expr></argument>,
<argument><expr><name>new_target_relative</name></expr></argument>,
<argument><expr><name><name>this_ent</name>-&gt;<name>kind</name></name></expr></argument>,
<argument><expr><name>revnum</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>depth_below_here</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>,
<argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>proplist_walk_baton</name> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>pristine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>base_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changelist_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_proplist_receiver_t</name></type> <name>receiver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>receiver_baton</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>proplist_walk_cb</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>proplist_walk_baton</name> *</type><name>wb</name> <init>= <expr><name>walk_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name>
== (<name><name>wb</name>-&gt;<name>pristine</name></name> ? <name>svn_wc_schedule_add</name> : <name>svn_wc_schedule_delete</name>)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr>! <call><name>SVN_WC__CL_MATCH</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>changelist_hash</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>pristine_or_working_props</name><argument_list>(<argument><expr>&amp;<name>hash</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>base_access</name></name></expr></argument>,
<argument><expr><name><name>wb</name>-&gt;<name>pristine</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>call_receiver</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>receiver</name></name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>receiver_baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_proplist3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
<param><decl><type><name>svn_proplist_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_unknown</name></expr>)</condition><then>
<expr_stmt><expr><name>depth</name> = <name>svn_depth_empty</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path_or_url</name></expr></argument>)</argument_list></call>
&amp;&amp; (<name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_committed</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)
&amp;&amp; (<name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>
|| <name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name>
|| <name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_committed</name>
|| <name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>pristine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>levels_to_lock</name> <init>= <expr><call><name>SVN_WC__LEVELS_TO_LOCK_FROM_DEPTH</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changelist_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>levels_to_lock</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_committed</name>)
|| (<name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>pristine</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>pristine</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>changelists</name> &amp;&amp; <name><name>changelists</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_hash_from_cstring_keys</name><argument_list>(<argument><expr>&amp;<name>changelist_hash</name></expr></argument>,
<argument><expr><name>changelists</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>depth</name> &gt;= <name>svn_depth_files</name> &amp;&amp; (<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_wc_entry_callbacks2_t</name></type> <name>walk_callbacks</name>
<init>= <expr><block>{ <expr><name>proplist_walk_cb</name></expr>, <expr><name>svn_client__default_walker_error_handler</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>proplist_walk_baton</name></type> <name>wb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>base_access</name></name> = <name>adm_access</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>pristine</name></name> = <name>pristine</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>changelist_hash</name></name> = <name>changelist_hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>receiver</name></name> = <name>receiver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>.<name>receiver_baton</name></name> = <name>receiver_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_walk_entries3</name><argument_list>(<argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr>&amp;<name>walk_callbacks</name></expr></argument>, <argument><expr>&amp;<name>wb</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>SVN_WC__CL_MATCH</name><argument_list>(<argument><expr><name>changelist_hash</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>pristine_or_working_props</name><argument_list>(<argument><expr>&amp;<name>hash</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>pristine</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>call_receiver</name><argument_list>(<argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ra_session_from_path</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>revnum</name></expr></argument>,
<argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>revision</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>revnum</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remote_proplist</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>proplist_receiver_baton</name> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>proplist_receiver_cb</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>proplist_receiver_baton</name> *</type><name>pl_baton</name> <init>=
<expr>(struct <name>proplist_receiver_baton</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_proplist_item_t</name> *</type><name>tmp_item</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>tmp_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_proplist_item_t</name> *</type><name>item</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmp_item</name>-&gt;<name>node_name</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pl_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_item</name>-&gt;<name>prop_hash</name></name> = <name>prop_hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> = <call><name>svn_client_proplist_item_dup</name><argument_list>(<argument><expr><name>tmp_item</name></expr></argument>, <argument><expr><name><name>pl_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>pl_baton</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr>const <name>svn_client_proplist_item_t</name> *</expr></argument>)</argument_list></call> = <name>item</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_proplist2</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>proplist_receiver_baton</name></type> <name>pl_baton</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>props</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_client_proplist_item_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pl_baton</name>.<name>props</name></name> = *<name>props</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pl_baton</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_proplist3</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
<argument><expr><call><name>SVN_DEPTH_INFINITY_OR_EMPTY</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>proplist_receiver_cb</name></expr></argument>, <argument><expr>&amp;<name>pl_baton</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_proplist</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_client_proplist2</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
<argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_revprop_list</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>set_rev</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
<argument_list>(<argument><expr><name>set_rev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_proplist</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>*<name>set_rev</name></expr></argument>, <argument><expr>&amp;<name>proplist</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>props</name> = <name>proplist</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
