<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_client/info.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>build_info_from_dirent</name><parameter_list>(<param><decl><type><name>svn_info_t</name> **</type><name>info</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_dirent_t</name> *</type><name>dirent</name></decl></param>,
<param><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_UUID</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_info_t</name> *</type><name>tmpinfo</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>tmpinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>URL</name></name> = <name>URL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>rev</name></name> = <name>revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>kind</name></name> = <name><name>dirent</name>-&gt;<name>kind</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>repos_UUID</name></name> = <name>repos_UUID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>repos_root_URL</name></name> = <name>repos_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>last_changed_rev</name></name> = <name><name>dirent</name>-&gt;<name>created_rev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>last_changed_date</name></name> = <name><name>dirent</name>-&gt;<name>time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>last_changed_author</name></name> = <name><name>dirent</name>-&gt;<name>last_author</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>lock</name></name> = <name>lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>depth</name></name> = <name>svn_depth_unknown</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>working_size</name></name> = <name>SVN_INFO_SIZE_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>size</name></name> = <name><name>dirent</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>info</name> = <name>tmpinfo</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>build_info_from_entry</name><parameter_list>(<param><decl><type><name>svn_info_t</name> **</type><name>info</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_info_t</name> *</type><name>tmpinfo</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>tmpinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>URL</name></name> = <name><name>entry</name>-&gt;<name>url</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>rev</name></name> = <name><name>entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>kind</name></name> = <name><name>entry</name>-&gt;<name>kind</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>repos_UUID</name></name> = <name><name>entry</name>-&gt;<name>uuid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>repos_root_URL</name></name> = <name><name>entry</name>-&gt;<name>repos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>last_changed_rev</name></name> = <name><name>entry</name>-&gt;<name>cmt_rev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>last_changed_date</name></name> = <name><name>entry</name>-&gt;<name>cmt_date</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>last_changed_author</name></name> = <name><name>entry</name>-&gt;<name>cmt_author</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>has_wc_info</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>schedule</name></name> = <name><name>entry</name>-&gt;<name>schedule</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>depth</name></name> = <name><name>entry</name>-&gt;<name>depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>copyfrom_url</name></name> = <name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>copyfrom_rev</name></name> = <name><name>entry</name>-&gt;<name>copyfrom_rev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>text_time</name></name> = <name><name>entry</name>-&gt;<name>text_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>prop_time</name></name> = <name><name>entry</name>-&gt;<name>prop_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>checksum</name></name> = <name><name>entry</name>-&gt;<name>checksum</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>conflict_old</name></name> = <name><name>entry</name>-&gt;<name>conflict_old</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>conflict_new</name></name> = <name><name>entry</name>-&gt;<name>conflict_new</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>conflict_wrk</name></name> = <name><name>entry</name>-&gt;<name>conflict_wrk</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>prejfile</name></name> = <name><name>entry</name>-&gt;<name>prejfile</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>changelist</name></name> = <name><name>entry</name>-&gt;<name>changelist</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>working_size</name></name> = <name><name>entry</name>-&gt;<name>working_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>size</name></name> = <name>SVN_INFO_SIZE_UNKNOWN</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>lock</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*(<name><name>tmpinfo</name>-&gt;<name>lock</name></name>)</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>lock</name>-&gt;<name>token</name></name> = <name><name>entry</name>-&gt;<name>lock_token</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>lock</name>-&gt;<name>owner</name></name> = <name><name>entry</name>-&gt;<name>lock_owner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>lock</name>-&gt;<name>comment</name></name> = <name><name>entry</name>-&gt;<name>lock_comment</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmpinfo</name>-&gt;<name>lock</name>-&gt;<name>creation_date</name></name> = <name><name>entry</name>-&gt;<name>lock_creation_date</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>info</name> = <name>tmpinfo</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIRENT_FIELDS</name></cpp:macro> <cpp:value>(SVN_DIRENT_KIND | SVN_DIRENT_CREATED_REV | SVN_DIRENT_TIME | SVN_DIRENT_LAST_AUTHOR)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>push_dir_info</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>session_URL</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_UUID</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl></param>,
<param><decl><type><name>svn_info_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>locks</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>tmpdirents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>the_ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_dir2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>tmpdirents</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>DIRENT_FIELDS</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>tmpdirents</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>, *<decl><type ref="prev"/><name>URL</name></decl>, *<decl><type ref="prev"/><name>fs_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>the_ent</name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>URL</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>session_URL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs_path</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs_path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs_path</name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lock</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>locks</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>build_info_from_dirent</name><argument_list>(<argument><expr>&amp;<name>info</name></expr></argument>, <argument><expr><name>the_ent</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name>repos_UUID</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>depth</name> &gt;= <name>svn_depth_immediates</name>
|| (<name>depth</name> == <name>svn_depth_files</name> &amp;&amp; <name><name>the_ent</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>receiver</name><argument_list>(<argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_infinity</name> &amp;&amp; <name><name>the_ent</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>push_dir_info</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>repos_UUID</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>locks</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>found_entry_baton</name> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changelist_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_info_receiver_t</name></type> <name>receiver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>receiver_baton</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>info_found_entry_callback</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>found_entry_baton</name> *</type><name>fe_baton</name> <init>= <expr><name>walk_baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>SVN_WC__CL_MATCH</name><argument_list>(<argument><expr><name><name>fe_baton</name>-&gt;<name>changelist_hash</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>build_info_from_entry</name><argument_list>(<argument><expr>&amp;<name>info</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>fe_baton</name>-&gt;<name>receiver</name></name><argument_list>(<argument><expr><name><name>fe_baton</name>-&gt;<name>receiver_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_wc_entry_callbacks2_t</name></type>
<name>entry_walk_callbacks</name> <init>= <expr><block>{
<expr><name>info_found_entry_callback</name></expr>,
<expr><name>svn_client__default_walker_error_handler</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>crawl_entries</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name></decl></param>,
<param><decl><type><name>svn_info_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>changelist_hash</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>adm_lock_level</name> <init>= <expr><call><name>SVN_WC__LEVELS_TO_LOCK_FROM_DEPTH</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wcpath</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>adm_lock_level</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>wcpath</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>SVN_WC__CL_MATCH</name><argument_list>(<argument><expr><name>changelist_hash</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>build_info_from_entry</name><argument_list>(<argument><expr>&amp;<name>info</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>receiver</name><argument_list>(<argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>wcpath</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type>struct <name>found_entry_baton</name></type> <name>fe_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fe_baton</name>.<name>changelist_hash</name></name> = <name>changelist_hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe_baton</name>.<name>receiver</name></name> = <name>receiver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fe_baton</name>.<name>receiver_baton</name></name> = <name>receiver_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_walk_entries3</name><argument_list>(<argument><expr><name>wcpath</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr>&amp;<name>entry_walk_callbacks</name></expr></argument>, <argument><expr>&amp;<name>fe_baton</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>same_resource_in_head</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>same_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>start_rev</name></decl>, <decl><type ref="prev"/><name>end_rev</name></decl>, <decl><type ref="prev"/><name>peg_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name> *</type><name>ignored_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>head_url</name></decl>, *<decl><type ref="prev"/><name>ignored_url</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>start_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>peg_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>peg_rev</name>.<name>value</name>.<name>number</name></name> = <name>rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>end_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_client__repos_locations</name><argument_list>(<argument><expr>&amp;<name>head_url</name></expr></argument>, <argument><expr>&amp;<name>ignored_rev</name></expr></argument>,
<argument><expr>&amp;<name>ignored_url</name></expr></argument>, <argument><expr>&amp;<name>ignored_rev</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>peg_rev</name></expr></argument>,
<argument><expr>&amp;<name>start_rev</name></expr></argument>, <argument><expr>&amp;<name>end_rev</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp;
((<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CLIENT_UNRELATED_RESOURCES</name>) ||
(<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>same_p</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then>
<else>else <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>head_url</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr>*<name>same_p</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>same_p</name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
}</block></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_info2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_info_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>, *<decl><type ref="prev"/><name>parent_ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>url_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root_URL</name></decl>, *<decl><type ref="prev"/><name>repos_UUID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>related</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>parent_ents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_url</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>the_ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>revision</name> == <name>NULL</name>
|| <name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)
&amp;&amp; (<name>peg_revision</name> == <name>NULL</name>
|| <name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changelist_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>changelists</name> &amp;&amp; <name><name>changelists</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_hash_from_cstring_keys</name><argument_list>(<argument><expr>&amp;<name>changelist_hash</name></expr></argument>,
<argument><expr><name>changelists</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>crawl_entries</name><argument_list>(<argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>changelist_hash</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ra_session_from_path</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>,
<argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>revision</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>repos_root_URL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_uuid2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>repos_UUID</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>parent_url</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base_name</name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_stat</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>&amp;<name>the_ent</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>repos_root_URL</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>depth</name> &gt; <name>svn_depth_empty</name></expr>)</condition><then>
<goto>goto <name>pre_1_2_recurse</name>;</goto></then></if>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Server does not support retrieving "
"information about the repository root"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>&amp;<name>url_kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>url_kind</name> == <name>svn_node_none</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"URL '%s' non-existent in revision %ld"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>parent_ra_session</name></expr></argument>,
<argument><expr><name>parent_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_dir2</name><argument_list>(<argument><expr><name>parent_ra_session</name></expr></argument>, <argument><expr>&amp;<name>parent_ents</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>""</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>DIRENT_FIELDS</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>the_ent</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parent_ents</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>the_ent</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"URL '%s' non-existent in revision %ld"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if></else></if>
<if>if <condition>(<expr>! <name>the_ent</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"URL '%s' non-existent in revision %ld"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>same_resource_in_head</name><argument_list>(<argument><expr>&amp;<name>related</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>related</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_get_lock</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>lock</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lock</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if></else></if>
}</block></then> <else>else
<expr_stmt><expr><name>lock</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>build_info_from_dirent</name><argument_list>(<argument><expr>&amp;<name>info</name></expr></argument>, <argument><expr><name>the_ent</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name>repos_UUID</name></expr></argument>, <argument><expr><name>repos_root_URL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>receiver</name><argument_list>(<argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>depth</name> &gt; <name>svn_depth_empty</name> &amp;&amp; (<name><name>the_ent</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>locks</name></decl>;</decl_stmt>
<label><name>pre_1_2_recurse</name>:</label>
<if>if <condition>(<expr><name><name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_head</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_get_locks</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>locks</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp;
(<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_NOT_IMPLEMENTED</name>
|| <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_UNSUPPORTED_FEATURE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>locks</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if></else></if>
}</block></then> <else>else
<expr_stmt><expr><name>locks</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>push_dir_info</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name>repos_UUID</name></expr></argument>, <argument><expr><name>repos_root_URL</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>locks</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_info</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_info_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_client_info2</name><argument_list>(<argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
<argument><expr><call><name>SVN_DEPTH_INFINITY_OR_EMPTY</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_info_t</name> *</type>
<name>svn_info_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_info_t</name> *</type><name>info</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_info_t</name> *</type><name>dupinfo</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dupinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>dupinfo</name> = *<name>info</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>URL</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupinfo</name>-&gt;<name>URL</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>URL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>repos_root_URL</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupinfo</name>-&gt;<name>repos_root_URL</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>repos_root_URL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>repos_UUID</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupinfo</name>-&gt;<name>repos_UUID</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>repos_UUID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>last_changed_author</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupinfo</name>-&gt;<name>last_changed_author</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>last_changed_author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>lock</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupinfo</name>-&gt;<name>lock</name></name> = <call><name>svn_lock_dup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lock</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>copyfrom_url</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupinfo</name>-&gt;<name>copyfrom_url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>copyfrom_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>checksum</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupinfo</name>-&gt;<name>checksum</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>conflict_old</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupinfo</name>-&gt;<name>conflict_old</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>conflict_old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>conflict_new</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupinfo</name>-&gt;<name>conflict_new</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>conflict_new</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>conflict_wrk</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupinfo</name>-&gt;<name>conflict_wrk</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>conflict_wrk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>prejfile</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupinfo</name>-&gt;<name>prejfile</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>prejfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>dupinfo</name></expr>;</return>
}</block></function>
</unit>
