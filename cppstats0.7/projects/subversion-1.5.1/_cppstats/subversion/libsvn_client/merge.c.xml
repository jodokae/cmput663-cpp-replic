<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_client/merge.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_sorts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_mergeinfo_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENSURE_VALID_REVISION_KINDS</name><parameter_list>(<param><type><name>rev1_kind</name></type></param>, <param><type><name>rev2_kind</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_scheme_match</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><call><name>svn_wc_adm_access_pool</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>idx1</name></decl>, *<decl><type ref="prev"/><name>idx2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>ent</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx1</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx2</name> = <call><name>strchr</name><argument_list>(<argument><expr><name><name>ent</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>idx1</name> == <name>NULL</name>) &amp;&amp; (<name>idx2</name> == <name>NULL</name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_BAD_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"URLs have no scheme ('%s' and '%s')"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>ent</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>idx1</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_BAD_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"URL has no scheme: '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>idx2</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_BAD_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"URL has no scheme: '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ent</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>((<name>idx1</name> - <name>url</name>) != (<name>idx2</name> - <name><name>ent</name>-&gt;<name>url</name></name>))
|| (<call><name>strncmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>ent</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>idx1</name> - <name>url</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Access scheme mixtures not yet supported ('%s' and '%s')"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>ent</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>working_mergeinfo_propval</name></decl>;</decl_stmt>
}</block></struct></type> <name>working_mergeinfo_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>merge_cmd_baton_t</name> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>record_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>sources_ancestral</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>same_repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>mergeinfo_capable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>target_missing_child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>added_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>add_necessitated_merge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>dry_run_deletions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>conflicted_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>merge_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>target_has_dummy_merge_range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>merge_cmd_baton_t</name>;</typedef>
<function><type><name>apr_hash_t</name> *</type>
<name>svn_client__dry_run_deletions</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>merge_cmd_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name> <init>= <expr><name>merge_cmd_baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>merge_b</name>-&gt;<name>dry_run_deletions</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>svn_boolean_t</name></type>
<name>dry_run_deleted_p</name><parameter_list>(<param><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name><name>merge_b</name>-&gt;<name>dry_run</name></name> &amp;&amp;
<call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>dry_run_deletions</name></name></expr></argument>, <argument><expr><name>wcpath</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> != <name>NULL</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>svn_boolean_t</name></type>
<name>is_path_conflicted_by_merge</name><parameter_list>(<param><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name><name>merge_b</name>-&gt;<name>conflicted_paths</name></name> &amp;&amp;
<call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>conflicted_paths</name></name></expr></argument>)</argument_list></call> &gt; 0)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>void</name></type>
<name>mergeinfo_behavior</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>honor_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>record_mergeinfo</name></decl></param>,
<param><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>honor_mergeinfo</name></expr>)</condition><then>
<expr_stmt><expr>*<name>honor_mergeinfo</name> = (<name><name>merge_b</name>-&gt;<name>mergeinfo_capable</name></name>
&amp;&amp; <name><name>merge_b</name>-&gt;<name>sources_ancestral</name></name>
&amp;&amp; <name><name>merge_b</name>-&gt;<name>same_repos</name></name>
&amp;&amp; (! <name><name>merge_b</name>-&gt;<name>ignore_ancestry</name></name>))</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>record_mergeinfo</name></expr>)</condition><then>
<expr_stmt><expr>*<name>record_mergeinfo</name> = (<name><name>merge_b</name>-&gt;<name>mergeinfo_capable</name></name>
&amp;&amp; <name><name>merge_b</name>-&gt;<name>sources_ancestral</name></name>
&amp;&amp; <name><name>merge_b</name>-&gt;<name>same_repos</name></name>
&amp;&amp; (! <name><name>merge_b</name>-&gt;<name>ignore_ancestry</name></name>)
&amp;&amp; (! <name><name>merge_b</name>-&gt;<name>dry_run</name></name>))</expr>;</expr_stmt></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name>*</type>
<name>filter_self_referential_mergeinfo</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>honor_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>adjusted_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mergeinfo_behavior</name><argument_list>(<argument><expr>&amp;<name>honor_mergeinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>merge_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>honor_mergeinfo</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>adjusted_props</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>(*<name>props</name>)-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>(*<name>props</name>)-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>prop</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr>(*<name>props</name>)</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_PROP_MERGEINFO</name></expr></argument>)</argument_list></call> != 0)
|| (! <name><name>prop</name>-&gt;<name>value</name></name>)
|| (! <name><name>prop</name>-&gt;<name>value</name>-&gt;<name>len</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>adjusted_props</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call> = *<name>prop</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl>, <decl><type ref="prev"/><name>filtered_mergeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_url</name></decl>, *<decl><type ref="prev"/><name>merge_source_root_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>target_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session2</name></name></expr></argument>,
<argument><expr>&amp;<name>merge_source_root_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>target_entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_url_from_path</name><argument_list>(<argument><expr>&amp;<name>target_url</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ensure_ra_session_url</name><argument_list>(<argument><expr>&amp;<name>old_url</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session2</name></name></expr></argument>,
<argument><expr><name>target_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_parse</name><argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merge_source_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>adjusted_rangelist</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>source_path</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rangelist</name> = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>merge_source_url</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>merge_source_root_url</name></expr></argument>,
<argument><expr><name>source_path</name> + 1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>rangelist</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name> *</type><name>start_revision</name></decl>, *<decl><type ref="prev"/><name>end_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start_url</name></decl>, *<decl><type ref="prev"/><name>end_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_rev</name></decl>, <decl><type ref="prev"/><name>rev1_opt</name></decl>, <decl><type ref="prev"/><name>rev2_opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>peg_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>peg_rev</name>.<name>value</name>.<name>number</name></name> = <name><name>target_entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rev1_opt</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rev1_opt</name>.<name>value</name>.<name>number</name></name> = <name><name>range</name>-&gt;<name>start</name></name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>rev2_opt</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_client__repos_locations</name><argument_list>(<argument><expr>&amp;<name>start_url</name></expr></argument>,
<argument><expr>&amp;<name>start_revision</name></expr></argument>,
<argument><expr>&amp;<name>end_url</name></expr></argument>,
<argument><expr>&amp;<name>end_revision</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session2</name></name></expr></argument>,
<argument><expr><name>target_url</name></expr></argument>,
<argument><expr>&amp;<name>peg_rev</name></expr></argument>,
<argument><expr>&amp;<name>rev1_opt</name></expr></argument>,
<argument><expr>&amp;<name>rev2_opt</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CLIENT_UNRELATED_RESOURCES</name>
|| <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name>
|| <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>adjusted_rangelist</name></expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>start_url</name></expr></argument>, <argument><expr><name>merge_source_url</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>adjusted_rangelist</name></expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></for>
<if>if <condition>(<expr><name><name>adjusted_rangelist</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>filtered_mergeinfo</name></expr>)</condition><then>
<expr_stmt><expr><name>filtered_mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>filtered_mergeinfo</name></expr></argument>, <argument><expr><name>source_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>adjusted_rangelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>filtered_mergeinfo</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>filtered_mergeinfo_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>adjusted_prop</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>adjusted_prop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_to_string</name><argument_list>(<argument><expr>&amp;<name>filtered_mergeinfo_str</name></expr></argument>,
<argument><expr><name>filtered_mergeinfo</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adjusted_prop</name>-&gt;<name>name</name></name> = <name>SVN_PROP_MERGEINFO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>adjusted_prop</name>-&gt;<name>value</name></name> = <name>filtered_mergeinfo_str</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>adjusted_props</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call> = *<name>adjusted_prop</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>old_url</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session2</name></name></expr></argument>, <argument><expr><name>old_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
}</block></for>
<expr_stmt><expr>*<name>props</name> = <name>adjusted_props</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>merge_props_changed</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>original_props</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name> <init>= <expr><name><name>merge_b</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_categorize_props</name><argument_list>(<argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>props</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>svn_path_compare_paths</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_try3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>filter_self_referential_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>merge_b</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_merge_props2</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>original_props</name></expr></argument>, <argument><expr><name>props</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>dry_run</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>conflict_func</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>conflict_baton</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_ENTRY_NOT_FOUND</name>
|| <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_UNVERSIONED_RESOURCE</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_wc_conflict_resolver_func_t</name></type> <name>wrapped_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>wrapped_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> **</type><name>conflicted_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>conflict_resolver_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>conflict_resolver</name><parameter_list>(<param><decl><type><name>svn_wc_conflict_result_t</name> **</type><name>result</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_conflict_description_t</name> *</type><name>description</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conflict_resolver_baton_t</name> *</type><name>conflict_b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conflict_b</name>-&gt;<name>wrapped_func</name></name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call>(*<name><name>conflict_b</name>-&gt;<name>wrapped_func</name></name>)<argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>description</name></expr></argument>,
<argument><expr><name><name>conflict_b</name>-&gt;<name>wrapped_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr>*<name>result</name> = <call><name>svn_wc_create_conflict_result</name><argument_list>(<argument><expr><name>svn_wc_conflict_choose_postpone</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>(! <name><name>conflict_b</name>-&gt;<name>wrapped_func</name></name>)
|| (*<name>result</name> &amp;&amp; (<name>(*<name>result</name>)-&gt;<name>choice</name></name> == <name>svn_wc_conflict_choose_postpone</name>))</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>conflicted_path</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>conflict_b</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>description</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name><name>conflict_b</name>-&gt;<name>conflicted_paths</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name><name>conflict_b</name>-&gt;<name>conflicted_paths</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>conflict_b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name><name>conflict_b</name>-&gt;<name>conflicted_paths</name></name></expr></argument>, <argument><expr><name>conflicted_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>conflicted_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>merge_file_changed</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>content_state</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>prop_state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mine</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>older</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>yours</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>older_rev</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>yours_rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>prop_changes</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>original_props</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>merge_required</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<enum>enum <name>svn_wc_merge_outcome_t</name> <name>merge_outcome</name>;</enum>
<if>if <condition>(<expr><name>adm_access</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>content_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>prop_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>prop_state</name> = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>mine</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>mine</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name>entry</name>) || (<name>kind</name> != <name>svn_node_file</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>content_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>prop_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>prop_state</name> = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block>
<if>if <condition>(<expr><name><name>prop_changes</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>merge_props_changed</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>prop_state</name></expr></argument>, <argument><expr><name>mine</name></expr></argument>, <argument><expr><name>prop_changes</name></expr></argument>,
<argument><expr><name>original_props</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>prop_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>prop_state</name> = <name>svn_wc_notify_state_unchanged</name></expr>;</expr_stmt></then></if></else></if>
<if>if <condition>(<expr><name>older</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_local_mods</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_text_modified_p</name><argument_list>(<argument><expr>&amp;<name>has_local_mods</name></expr></argument>, <argument><expr><name>mine</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>mimetype1</name> &amp;&amp; <call><name>svn_mime_type_is_binary</name><argument_list>(<argument><expr><name>mimetype1</name></expr></argument>)</argument_list></call>)
|| (<name>mimetype2</name> &amp;&amp; <call><name>svn_mime_type_is_binary</name><argument_list>(<argument><expr><name>mimetype2</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>older_revision_exists</name> <init>=
<expr>!<name><name>merge_b</name>-&gt;<name>add_necessitated_merge</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>same_contents</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_files_contents_same_p</name><argument_list>(<argument><expr>&amp;<name>same_contents</name></expr></argument>,
<argument><expr>(<name>older_revision_exists</name> ?
<name>older</name> : <name>yours</name>)</expr></argument>,
<argument><expr><name>mine</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>same_contents</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>older_revision_exists</name> &amp;&amp; !<name><name>merge_b</name>-&gt;<name>dry_run</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_rename</name><argument_list>(<argument><expr><name>yours</name></expr></argument>, <argument><expr><name>mine</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>merge_outcome</name> = <name>svn_wc_merge_merged</name></expr>;</expr_stmt>
<expr_stmt><expr><name>merge_required</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>merge_required</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_label</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr>".working"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>left_label</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>".merge-left.r%ld"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>older_rev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>right_label</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>".merge-right.r%ld"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>yours_rev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conflict_resolver_baton_t</name></type> <name>conflict_baton</name> <init>= <expr><block>{
<expr><name><name>merge_b</name>-&gt;<name>ctx</name>-&gt;<name>conflict_func</name></name></expr>, <expr><name><name>merge_b</name>-&gt;<name>ctx</name>-&gt;<name>conflict_baton</name></name></expr>,
<expr>&amp;<name><name>merge_b</name>-&gt;<name>conflicted_paths</name></name></expr>, <expr><name><name>merge_b</name>-&gt;<name>pool</name></name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_merge3</name><argument_list>(<argument><expr>&amp;<name>merge_outcome</name></expr></argument>,
<argument><expr><name>older</name></expr></argument>, <argument><expr><name>yours</name></expr></argument>, <argument><expr><name>mine</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>left_label</name></expr></argument>, <argument><expr><name>right_label</name></expr></argument>, <argument><expr><name>target_label</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>dry_run</name></name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>diff3_cmd</name></name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>merge_options</name></name></expr></argument>, <argument><expr><name>prop_changes</name></expr></argument>,
<argument><expr><name>conflict_resolver</name></expr></argument>, <argument><expr>&amp;<name>conflict_baton</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>content_state</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>merge_outcome</name> == <name>svn_wc_merge_conflict</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_conflicted</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>has_local_mods</name>
&amp;&amp; <name>merge_outcome</name> != <name>svn_wc_merge_unchanged</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_merged</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>merge_outcome</name> == <name>svn_wc_merge_merged</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>merge_outcome</name> == <name>svn_wc_merge_no_merge</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_unchanged</name></expr>;</expr_stmt></else></if></else></if></else></if></else></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>merge_file_added</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>content_state</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>prop_state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mine</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>older</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>yours</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>prop_changes</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>original_props</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>new_props</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>prop_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>prop_state</name> = <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>new_props</name> = <call><name>apr_hash_copy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>original_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>prop_changes</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>prop</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>prop_changes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_property_kind</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call> == <name>svn_prop_wc_kind</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>new_props</name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>! <name>adm_access</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>merge_b</name>-&gt;<name>dry_run</name></name> &amp;&amp; <name><name>merge_b</name>-&gt;<name>added_path</name></name>
&amp;&amp; <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>added_path</name></name></expr></argument>, <argument><expr><name>mine</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>content_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>prop_state</name> &amp;&amp; <call><name>apr_hash_count</name><argument_list>(<argument><expr><name>new_props</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*<name>prop_state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>mine</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{
<case>case <expr><name>svn_node_none</name></expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>mine</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entry</name> &amp;&amp; <name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_delete</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>content_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_obstructed</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>! <name><name>merge_b</name>-&gt;<name>dry_run</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>merge_b</name>-&gt;<name>same_repos</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child</name> <init>= <expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>target</name></name></expr></argument>,
<argument><expr><name>mine</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>child</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>copyfrom_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>url</name></name></expr></argument>,
<argument><expr><name>child</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>copyfrom_url</name> = <name><name>merge_b</name>-&gt;<name>url</name></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>copyfrom_rev</name> = <name>rev2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_scheme_match</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>copyfrom_url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_add_repos_file2</name><argument_list>(<argument><expr><name>mine</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>yours</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>new_props</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>copyfrom_url</name></expr></argument>,
<argument><expr><name>copyfrom_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>content_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>prop_state</name> &amp;&amp; <call><name>apr_hash_count</name><argument_list>(<argument><expr><name>new_props</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*<name>prop_state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt></then></if>
}</block>
<break>break;</break>
</case><case>case <expr><name>svn_node_dir</name></expr>:
<if>if <condition>(<expr><name>content_state</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>mine</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entry</name> &amp;&amp; <call><name>dry_run_deleted_p</name><argument_list>(<argument><expr><name>merge_b</name></expr></argument>, <argument><expr><name>mine</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_obstructed</name></expr>;</expr_stmt></else></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_node_file</name></expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>mine</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>entry</name> || <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>content_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_obstructed</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>dry_run_deleted_p</name><argument_list>(<argument><expr><name>merge_b</name></expr></argument>, <argument><expr><name>mine</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>content_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>merge_b</name>-&gt;<name>add_necessitated_merge</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>merge_file_changed</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>content_state</name></expr></argument>,
<argument><expr><name>prop_state</name></expr></argument>, <argument><expr><name>mine</name></expr></argument>, <argument><expr><name>older</name></expr></argument>, <argument><expr><name>yours</name></expr></argument>,
<argument><expr><name>rev1</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>,
<argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>,
<argument><expr><name>prop_changes</name></expr></argument>, <argument><expr><name>original_props</name></expr></argument>,
<argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_b</name>-&gt;<name>add_necessitated_merge</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<break>break;</break>
}</block>
</case><default>default:
<if>if <condition>(<expr><name>content_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>merge_file_deleted</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mine</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>older</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>yours</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>original_props</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>adm_access</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>mine</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{
<case>case <expr><name>svn_node_file</name></expr>:
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>mine</name></expr></argument>, <argument><expr>&amp;<name>parent_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>parent_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_client__wc_delete</name><argument_list>(<argument><expr><name>mine</name></expr></argument>, <argument><expr><name>parent_access</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>force</name></name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>dry_run</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name>state</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_obstructed</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<break>break;</break>
</case><case>case <expr><name>svn_node_dir</name></expr>:
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_obstructed</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_node_none</name></expr>:
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><default>default:
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>merge_dir_added</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_url</name> <init>= <expr><name>NULL</name></expr></init>, *<name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>adm_access</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>state</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>merge_b</name>-&gt;<name>dry_run</name></name> &amp;&amp; <name><name>merge_b</name>-&gt;<name>added_path</name></name>
&amp;&amp; <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>added_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>child</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>child</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>merge_b</name>-&gt;<name>same_repos</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>copyfrom_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copyfrom_rev</name> = <name>rev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_scheme_match</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>copyfrom_url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{
<case>case <expr><name>svn_node_none</name></expr>:
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entry</name> &amp;&amp; <name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_delete</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_obstructed</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>merge_b</name>-&gt;<name>dry_run</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>merge_b</name>-&gt;<name>added_path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_make_dir_recursively</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_add2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>copyfrom_url</name></expr></argument>, <argument><expr><name>copyfrom_rev</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_node_dir</name></expr>:
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>entry</name> || <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>merge_b</name>-&gt;<name>dry_run</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_add2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>copyfrom_url</name></expr></argument>, <argument><expr><name>copyfrom_rev</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>merge_b</name>-&gt;<name>added_path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>dry_run_deleted_p</name><argument_list>(<argument><expr><name>merge_b</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_obstructed</name></expr>;</expr_stmt></else></if>
}</block></then></if></else></if>
<break>break;</break>
</case><case>case <expr><name>svn_node_file</name></expr>:
<if>if <condition>(<expr><name><name>merge_b</name>-&gt;<name>dry_run</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>merge_b</name>-&gt;<name>added_path</name></name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>state</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entry</name> &amp;&amp; <call><name>dry_run_deleted_p</name><argument_list>(<argument><expr><name>merge_b</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_obstructed</name></expr>;</expr_stmt></else></if>
}</block></then></if>
<break>break;</break>
</case><default>default:
<if>if <condition>(<expr><name><name>merge_b</name>-&gt;<name>dry_run</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>merge_b</name>-&gt;<name>added_path</name></name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>merge_dir_deleted</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>adm_access</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{
<case>case <expr><name>svn_node_dir</name></expr>: <block>{
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>parent_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>parent_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_client__wc_delete</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_access</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>force</name></name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>dry_run</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name>state</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_obstructed</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block>
<break>break;</break>
</case><case>case <expr><name>svn_node_file</name></expr>:
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_obstructed</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_node_none</name></expr>:
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><default>default:
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name></type>
<name>merge_callbacks</name> <init>= <expr><block>{
<expr><name>merge_file_changed</name></expr>,
<expr><name>merge_file_added</name></expr>,
<expr><name>merge_file_deleted</name></expr>,
<expr><name>merge_dir_added</name></expr>,
<expr><name>merge_dir_deleted</name></expr>,
<expr><name>merge_props_changed</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_wc_notify_func2_t</name></type> <name>wrapped_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>wrapped_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>nbr_notifications</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>nbr_operative_notifications</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>merged_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>skipped_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>added_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_single_file_merge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_ancestor_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>notification_receiver_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>find_nearest_ancestor</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>path_is_own_ancestor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ancestor_index</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>children_with_mergeinfo</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call>
&amp;&amp; (<call><name>svn_path_compare_paths</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> != 0
|| <name>path_is_own_ancestor</name>)</expr>)</condition><then>
<expr_stmt><expr><name>ancestor_index</name> = <name>i</name></expr>;</expr_stmt></then></if>
}</block></for>
<return>return <expr><name>ancestor_index</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_OPERATIVE_NOTIFICATION</name><parameter_list>(<param><type><name>notify</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(notify-&gt;content_state == svn_wc_notify_state_conflicted || notify-&gt;content_state == svn_wc_notify_state_merged || notify-&gt;content_state == svn_wc_notify_state_changed || notify-&gt;prop_state == svn_wc_notify_state_conflicted || notify-&gt;prop_state == svn_wc_notify_state_merged || notify-&gt;prop_state == svn_wc_notify_state_changed || notify-&gt;action == svn_wc_notify_update_add)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>notification_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>svn_wc_notify_t</name> *</type><name>notify</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>notification_receiver_baton_t</name> *</type><name>notify_b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_operative_notification</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>IS_OPERATIVE_NOTIFICATION</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>notify_b</name>-&gt;<name>nbr_operative_notifications</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>is_operative_notification</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>notify_b</name>-&gt;<name>merge_b</name>-&gt;<name>sources_ancestral</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>notify_b</name>-&gt;<name>nbr_notifications</name></name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name><name>notify_b</name>-&gt;<name>is_single_file_merge</name></name>) &amp;&amp; <name>is_operative_notification</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>new_nearest_ancestor_index</name> <init>=
<expr><call><name>find_nearest_ancestor</name><argument_list>(
<argument><expr><name><name>notify_b</name>-&gt;<name>children_with_mergeinfo</name></name></expr></argument>,
<argument><expr><name><name>notify</name>-&gt;<name>action</name></name> == <name>svn_wc_notify_update_delete</name> ? <name>FALSE</name> : <name>TRUE</name></expr></argument>,
<argument><expr><name><name>notify</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>new_nearest_ancestor_index</name> != <name><name>notify_b</name>-&gt;<name>cur_ancestor_index</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>children_with_mergeinfo</name></name></expr></argument>,
<argument><expr><name>new_nearest_ancestor_index</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>notify_b</name>-&gt;<name>cur_ancestor_index</name></name> = <name>new_nearest_ancestor_index</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>child</name>-&gt;<name>absent</name></name> &amp;&amp; <name><name>child</name>-&gt;<name>remaining_ranges</name>-&gt;<name>nelts</name></name> &gt; 0
&amp;&amp; !(<name>new_nearest_ancestor_index</name> == 0
&amp;&amp; <name><name>notify_b</name>-&gt;<name>merge_b</name>-&gt;<name>target_has_dummy_merge_range</name></name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify_merge_begin</name></decl>;</decl_stmt>
<expr_stmt><expr><name>notify_merge_begin</name> =
<call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>notify_b</name>-&gt;<name>merge_b</name>-&gt;<name>same_repos</name></name>
? <name>svn_wc_notify_merge_begin</name>
: <name>svn_wc_notify_foreign_merge_begin</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_merge_begin</name>-&gt;<name>merge_range</name></name> =
<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>notify_b</name>-&gt;<name>wrapped_func</name></name></expr>)</condition><then>
<expr_stmt><expr><call>(*<name><name>notify_b</name>-&gt;<name>wrapped_func</name></name>)<argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>wrapped_baton</name></name></expr></argument>,
<argument><expr><name>notify_merge_begin</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>notify</name>-&gt;<name>content_state</name></name> == <name>svn_wc_notify_state_merged</name>
|| <name><name>notify</name>-&gt;<name>content_state</name></name> == <name>svn_wc_notify_state_changed</name>
|| <name><name>notify</name>-&gt;<name>prop_state</name></name> == <name>svn_wc_notify_state_merged</name>
|| <name><name>notify</name>-&gt;<name>prop_state</name></name> == <name>svn_wc_notify_state_changed</name>
|| <name><name>notify</name>-&gt;<name>action</name></name> == <name>svn_wc_notify_update_add</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_path</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>notify</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>notify_b</name>-&gt;<name>merged_paths</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>notify_b</name>-&gt;<name>merged_paths</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>merged_paths</name></name></expr></argument>, <argument><expr><name>merged_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>merged_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>notify</name>-&gt;<name>action</name></name> == <name>svn_wc_notify_skip</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>skipped_path</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>notify</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>notify_b</name>-&gt;<name>skipped_paths</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>notify_b</name>-&gt;<name>skipped_paths</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>skipped_paths</name></name></expr></argument>, <argument><expr><name>skipped_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>skipped_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>notify</name>-&gt;<name>action</name></name> == <name>svn_wc_notify_update_add</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_root_of_added_subtree</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>added_path</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>notify</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>added_path_parent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>notify_b</name>-&gt;<name>added_paths</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>notify_b</name>-&gt;<name>added_paths</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_root_of_added_subtree</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>added_path_parent</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>added_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>added_paths</name></name></expr></argument>, <argument><expr><name>added_path_parent</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>is_root_of_added_subtree</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>is_root_of_added_subtree</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>added_paths</name></name></expr></argument>, <argument><expr><name>added_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>added_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></then>
<else>else <if>if <condition>(<expr>!(<name><name>notify_b</name>-&gt;<name>is_single_file_merge</name></name>)
&amp;&amp; <name><name>notify_b</name>-&gt;<name>nbr_operative_notifications</name></name> == 1
&amp;&amp; <name>is_operative_notification</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify_merge_begin</name></decl>;</decl_stmt>
<expr_stmt><expr><name>notify_merge_begin</name> =
<call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>merge_b</name>-&gt;<name>target</name></name></expr></argument>,
<argument><expr><name><name>notify_b</name>-&gt;<name>merge_b</name>-&gt;<name>same_repos</name></name>
? <name>svn_wc_notify_merge_begin</name>
: <name>svn_wc_notify_foreign_merge_begin</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>notify_b</name>-&gt;<name>wrapped_func</name></name></expr>)</condition><then>
<expr_stmt><expr><call>(*<name><name>notify_b</name>-&gt;<name>wrapped_func</name></name>)<argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>wrapped_baton</name></name></expr></argument>, <argument><expr><name>notify_merge_begin</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>notify_b</name>-&gt;<name>wrapped_func</name></name></expr>)</condition><then>
<expr_stmt><expr><call>(*<name><name>notify_b</name>-&gt;<name>wrapped_func</name></name>)<argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>wrapped_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_array_header_t</name> *</type>
<name>init_rangelist</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>inheritable</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name></name> = <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name></name> = <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>inheritable</name></name> = <name>inheritable</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>rangelist</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
<return>return <expr><name>rangelist</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>push_range</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>inheritable</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name></name> = <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name></name> = <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>inheritable</name></name> = <name>inheritable</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>rangelist</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>prepare_subtree_ranges</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>requested_rangelist</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>child_deleted_or_nonexistant</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mergeinfo_path</name></decl></param>,
<param><decl><type><name>svn_client__merge_path_t</name> *</type><name>parent</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision1</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>primary_url</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_rollback</name> <init>= <expr><name>revision2</name> &lt; <name>revision1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>peg_rev</name> <init>= <expr><name>is_rollback</name> ? <name>revision1</name> : <name>revision2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name> <init>= <expr><name>is_rollback</name> ? <name>revision1</name> : <name>revision2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name> <init>= <expr><name>is_rollback</name> ? <name>revision2</name> : <name>revision1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>segments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_source_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>session_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_session_url</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>session_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__path_relative_to_root</name><argument_list>(<argument><expr>&amp;<name>rel_source_path</name></expr></argument>,
<argument><expr><name>primary_url</name></expr></argument>,
<argument><expr><name>session_url</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_client__repos_location_segments</name><argument_list>(<argument><expr>&amp;<name>segments</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>rel_source_path</name></expr></argument>, <argument><expr><name>peg_rev</name></expr></argument>,
<argument><expr><name>start_rev</name></expr></argument>, <argument><expr><name>end_rev</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name>
|| <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_REQUEST_FAILED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_rollback</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>dirent</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_stat</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>rel_source_path</name></expr></argument>,
<argument><expr><name>revision2</name></expr></argument>, <argument><expr>&amp;<name>dirent</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dirent</name></expr>)</condition><then>
<expr_stmt><expr>*<name>child_deleted_or_nonexistant</name> = <name>FALSE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>child_deleted_or_nonexistant</name> = <name>TRUE</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>child_deleted_or_nonexistant</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>requested_rangelist</name> = <call><name>init_rangelist</name><argument_list>(<argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><name>err</name></expr>;</return></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>segments</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr>(<name><name>segments</name>-&gt;<name>nelts</name></name> - 1)</expr></argument>,
<argument><expr><name>svn_location_segment_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>is_rollback</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>segment</name>-&gt;<name>range_start</name></name> == <name>revision2</name>
&amp;&amp; <name><name>segment</name>-&gt;<name>range_end</name></name> == <name>revision1</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>requested_rangelist</name> = <call><name>init_rangelist</name><argument_list>(<argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_deleted_or_nonexistant</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>requested_rangelist</name> = <call><name>init_rangelist</name><argument_list>(<argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_deleted_or_nonexistant</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>segment</name>-&gt;<name>range_start</name></name> == <name>revision1</name>
&amp;&amp; <name><name>segment</name>-&gt;<name>range_end</name></name> == <name>revision2</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>requested_rangelist</name> = <call><name>init_rangelist</name><argument_list>(<argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_deleted_or_nonexistant</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>predate_intersection_rangelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>different_name_rangelist</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>predate_rangelist</name> <init>=
<expr><call><name>init_rangelist</name><argument_list>(<argument><expr><name>revision1</name></expr></argument>,
<argument><expr><name><name>segment</name>-&gt;<name>range_start</name></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_intersect</name><argument_list>(
<argument><expr>&amp;<name>predate_intersection_rangelist</name></expr></argument>,
<argument><expr><name>predate_rangelist</name></expr></argument>,
<argument><expr><name><name>parent</name>-&gt;<name>remaining_ranges</name></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>requested_rangelist</name> =
<call><name>init_rangelist</name><argument_list>(<argument><expr><name><name>segment</name>-&gt;<name>range_start</name></name></expr></argument>,
<argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_merge</name><argument_list>(
<argument><expr><name>requested_rangelist</name></expr></argument>, <argument><expr><name>predate_intersection_rangelist</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>segments</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>segment</name> =
<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_location_segment_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>segment</name>-&gt;<name>path</name></name>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>segment</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>mergeinfo_path</name> + 1</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>push_range</name><argument_list>(<argument><expr><name>different_name_rangelist</name></expr></argument>,
<argument><expr><name><name>segment</name>-&gt;<name>range_start</name></name></expr></argument>,
<argument><expr><name><name>segment</name>-&gt;<name>range_end</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>different_name_rangelist</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_remove</name><argument_list>(<argument><expr><name>requested_rangelist</name></expr></argument>,
<argument><expr><name>different_name_rangelist</name></expr></argument>,
<argument><expr>*<name>requested_rangelist</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>child_deleted_or_nonexistant</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
}</block></then></if>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>filter_merged_revisions</name><parameter_list>(<param><decl><type><name>svn_client__merge_path_t</name> *</type><name>parent</name></decl></param>,
<param><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mergeinfo_path</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>target_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>implicit_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision1</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>primary_url</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_subtree</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>target_rangelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name> <init>= <expr><name>implicit_mergeinfo</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>requested_merge</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>is_subtree</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>child_deleted_or_nonexistant</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>prepare_subtree_ranges</name><argument_list>(<argument><expr>&amp;<name>requested_merge</name></expr></argument>,
<argument><expr>&amp;<name>child_deleted_or_nonexistant</name></expr></argument>,
<argument><expr><name>mergeinfo_path</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>,
<argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name>primary_url</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>child_deleted_or_nonexistant</name> &amp;&amp; <name>parent</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name> =
<call><name>svn_rangelist_dup</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>remaining_ranges</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>requested_merge</name> = <call><name>init_rangelist</name><argument_list>(<argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>revision1</name> &gt; <name>revision2</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>target_mergeinfo</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mergeinfo</name> = <call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>implicit_mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>target_mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>target_rangelist</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>,
<argument><expr><name>mergeinfo_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>target_rangelist</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_reverse</name><argument_list>(<argument><expr><name>requested_merge</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_intersect</name><argument_list>(<argument><expr>&amp;(<name><name>child</name>-&gt;<name>remaining_ranges</name></name>)</expr></argument>,
<argument><expr><name>target_rangelist</name></expr></argument>,
<argument><expr><name>requested_merge</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_reverse</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name> =
<call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name> = <name>requested_merge</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_MERGE__ALLOW_ALL_FORWARD_MERGES_FROM_SELF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>target_mergeinfo</name></expr>)</condition><then>
<expr_stmt><expr><name>target_rangelist</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>target_mergeinfo</name></expr></argument>,
<argument><expr><name>mergeinfo_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name>target_mergeinfo</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mergeinfo</name> = <call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>implicit_mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>target_mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>target_rangelist</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>,
<argument><expr><name>mergeinfo_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>target_rangelist</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_remove</name><argument_list>(<argument><expr>&amp;(<name><name>child</name>-&gt;<name>remaining_ranges</name></name>)</expr></argument>,
<argument><expr><name>target_rangelist</name></expr></argument>,
<argument><expr><name>requested_merge</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>calculate_remaining_ranges</name><parameter_list>(<param><decl><type><name>svn_client__merge_path_t</name> *</type><name>parent</name></decl></param>,
<param><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_root_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url1</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url2</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision2</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>target_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>implicit_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_subtree</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mergeinfo_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>primary_url</name> <init>= <expr>(<name>revision1</name> &lt; <name>revision2</name>) ? <name>url2</name> : <name>url1</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__path_relative_to_root</name><argument_list>(<argument><expr>&amp;<name>mergeinfo_path</name></expr></argument>, <argument><expr><name>primary_url</name></expr></argument>,
<argument><expr><name>source_root_url</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>filter_merged_revisions</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>mergeinfo_path</name></expr></argument>,
<argument><expr><name>target_mergeinfo</name></expr></argument>, <argument><expr><name>implicit_mergeinfo</name></expr></argument>,
<argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>, <argument><expr><name>primary_url</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>is_subtree</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>(<name><name>child</name>-&gt;<name>remaining_ranges</name></name>)-&gt;<name>nelts</name></name> == 0)
&amp;&amp; (<name>revision2</name> &lt; <name>revision1</name>)
&amp;&amp; (<name><name>entry</name>-&gt;<name>revision</name></name> &lt;= <name>revision2</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>requested</name></decl>, <decl><type ref="prev"/><name>unspec</name></decl>, <decl><type ref="prev"/><name>pegrev</name></decl>, *<decl><type ref="prev"/><name>start_revision</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>unspec</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requested</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requested</name>.<name>value</name>.<name>number</name></name> = <name><name>entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pegrev</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pegrev</name>.<name>value</name>.<name>number</name></name> = <name>revision1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_client__repos_locations</name><argument_list>(<argument><expr>&amp;<name>start_url</name></expr></argument>, <argument><expr>&amp;<name>start_revision</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>url1</name></expr></argument>,
<argument><expr>&amp;<name>pegrev</name></expr></argument>, <argument><expr>&amp;<name>requested</name></expr></argument>,
<argument><expr>&amp;<name>unspec</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name>
|| <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name>
|| <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CLIENT_UNRELATED_RESOURCES</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<return>return <expr><name>err</name></expr>;</return></else></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>start_url</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_NOT_READY_TO_MERGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot reverse-merge a range from a "
"path's own future history; try "
"updating first"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_full_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>recorded_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>implicit_mergeinfo</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>indirect</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>session_url</name> <init>= <expr><name>NULL</name></expr></init>, *<name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>target_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>sesspool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call>
&amp;&amp; (<name>start</name> &gt; <name>end</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_wc_or_repos_mergeinfo</name><argument_list>(<argument><expr><name>recorded_mergeinfo</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><name>indirect</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>inherit</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>peg_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_working</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__derive_location</name><argument_list>(<argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr>&amp;<name>target_rev</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr>&amp;<name>peg_revision</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>target_rev</name> &lt;= <name>end</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>implicit_mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>ra_session</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ensure_ra_session_url</name><argument_list>(<argument><expr>&amp;<name>session_url</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>sesspool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>target_rev</name> &lt; <name>start</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>requested</name></decl>, <decl><type ref="prev"/><name>unspec</name></decl>, <decl><type ref="prev"/><name>pegrev</name></decl>, *<decl><type ref="prev"/><name>start_revision</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>unspec</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requested</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requested</name>.<name>value</name>.<name>number</name></name> = <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pegrev</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pegrev</name>.<name>value</name>.<name>number</name></name> = <name>target_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__repos_locations</name><argument_list>(<argument><expr>&amp;<name>start_url</name></expr></argument>, <argument><expr>&amp;<name>start_revision</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr>&amp;<name>pegrev</name></expr></argument>, <argument><expr>&amp;<name>requested</name></expr></argument>,
<argument><expr>&amp;<name>unspec</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target_rev</name> = <name>start</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>peg_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>peg_revision</name>.<name>value</name>.<name>number</name></name> = <name>target_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_history_as_mergeinfo</name><argument_list>(<argument><expr><name>implicit_mergeinfo</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr>&amp;<name>peg_revision</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sesspool</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>session_url</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>session_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>populate_remaining_ranges</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_root_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url1</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url2</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision2</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>inheritable</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>honor_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_merge_src_canon_path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>, *<decl><type ref="prev"/><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>merge_target_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pool</name> = <name><name>children_with_mergeinfo</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>honor_mergeinfo</name> || <name><name>merge_b</name>-&gt;<name>record_only</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name></name> = <name>revision1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name></name> = <name>revision2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>inheritable</name></name> = <name>inheritable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name> =
<call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_repos_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>child_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_url1</name></decl>, *<decl><type ref="prev"/><name>child_url2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>parent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>child</name> || <name><name>child</name>-&gt;<name>absent</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call> == <name>merge_target_len</name></expr>)</condition><then>
<expr_stmt><expr><name>child_repos_path</name> = ""</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>child_repos_path</name> = <name><name>child</name>-&gt;<name>path</name></name> +
(<name>merge_target_len</name> ? <name>merge_target_len</name> + 1 : 0)</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>child_url1</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>child_repos_path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>child_url2</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>url2</name></expr></argument>, <argument><expr><name>child_repos_path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>child_entry</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_full_mergeinfo</name><argument_list>(<argument><expr>&amp;(<name><name>child</name>-&gt;<name>pre_merge_mergeinfo</name></name>)</expr></argument>,
<argument><expr>&amp;(<name><name>child</name>-&gt;<name>implicit_mergeinfo</name></name>)</expr></argument>, <argument><expr><name>child_entry</name></expr></argument>,
<argument><expr>&amp;(<name><name>child</name>-&gt;<name>indirect_mergeinfo</name></name>)</expr></argument>,
<argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>parent_index</name> <init>= <expr><call><name>find_nearest_ancestor</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>parent</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>parent_index</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>parent</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>calculate_remaining_ranges</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>,
<argument><expr><name>source_root_url</name></expr></argument>,
<argument><expr><name>child_url1</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>,
<argument><expr><name>child_url2</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name><name>child</name>-&gt;<name>pre_merge_mergeinfo</name></name></expr></argument>,
<argument><expr><name><name>child</name>-&gt;<name>implicit_mergeinfo</name></name></expr></argument>,
<argument><expr><name>i</name> &gt; 0 ? <name>TRUE</name> : <name>FALSE</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>child_entry</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name> &gt; 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>remaining_ranges</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>dummy_range</name> <init>=
<expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dummy_range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dummy_range</name>-&gt;<name>start</name></name> = <name>revision2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy_range</name>-&gt;<name>end</name></name> = <name>revision2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy_range</name>-&gt;<name>inheritable</name></name> = <name>inheritable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dummy_range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> =
<name>dummy_range</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_b</name>-&gt;<name>target_has_dummy_merge_range</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>determine_merges_performed</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>merges</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>notification_receiver_baton_t</name> *</type><name>notify_b</name></decl></param>,
<param><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nbr_skips</name> <init>= <expr>(<name><name>notify_b</name>-&gt;<name>skipped_paths</name></name> != <name>NULL</name> ?
<call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>skipped_paths</name></name></expr></argument>)</argument_list></call> : 0)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>merges</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>merges</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>rangelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nbr_skips</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>notify_b</name>-&gt;<name>skipped_paths</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>skipped_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>skipped_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_status2</name><argument_list>(<argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr>(const <name>char</name> *) <name>skipped_path</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>text_status</name></name> == <name>svn_wc_status_none</name>
|| <name><name>status</name>-&gt;<name>text_status</name></name> == <name>svn_wc_status_unversioned</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>merges</name></expr></argument>, <argument><expr>(const <name>char</name> *) <name>skipped_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nbr_skips</name> &lt; <name><name>notify_b</name>-&gt;<name>nbr_notifications</name></name></expr>)</condition><then>
<empty_stmt>;</empty_stmt></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr>(<name>depth</name> != <name>svn_depth_infinity</name>) &amp;&amp; <name><name>notify_b</name>-&gt;<name>merged_paths</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>merged_path</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>notify_b</name>-&gt;<name>merged_paths</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>child_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist_of_child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>merged_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>child_entry</name></expr></argument>,
<argument><expr><name>merged_path</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>((<name><name>child_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>merged_path</name></expr></argument>)</argument_list></call> == 0)
&amp;&amp; (<name>depth</name> == <name>svn_depth_immediates</name>))
|| ((<name><name>child_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>)
&amp;&amp; (<name>depth</name> == <name>svn_depth_files</name>))</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rangelist_of_child</name> = <call><name>svn_rangelist_dup</name><argument_list>(<argument><expr><name>rangelist</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>rangelist_of_child</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>rng</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist_of_child</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rng</name>-&gt;<name>inheritable</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name>rangelist_of_child</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>merges</name></expr></argument>, <argument><expr>(const <name>char</name> *)<name>merged_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>rangelist_of_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>update_wc_mergeinfo</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_rel_path</name></decl></param>, <param><decl><type><name>apr_hash_t</name> *</type><name>merges</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_rollback</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>merges</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ranges</name></decl>, *<decl><type ref="prev"/><name>rangelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ranges</name> = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_client__parse_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_LOCKED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>mergeinfo</name> == <name>NULL</name> &amp;&amp; <name><name>ranges</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>inherited</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_wc_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>inherited</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>svn_mergeinfo_nearest_ancestor</name></expr></argument>,
<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>mergeinfo</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &lt; <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_relative_to_target</name> <init>= <expr><name>len</name>?(<name>path</name> + <name>len</name> + 1):(<name>path</name>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rel_path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>repos_rel_path</name></expr></argument>, <argument><expr>"/"</expr></argument>,
<argument><expr><name>path_relative_to_target</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>rel_path</name> = <name>repos_rel_path</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>rangelist</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>rel_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rangelist</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>rangelist</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>is_rollback</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ranges</name> = <call><name>svn_rangelist_dup</name><argument_list>(<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_reverse</name><argument_list>(<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_remove</name><argument_list>(<argument><expr>&amp;<name>rangelist</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>rangelist</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_merge</name><argument_list>(<argument><expr>&amp;<name>rangelist</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>rel_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>rangelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_rollback</name> &amp;&amp; <call><name>apr_hash_count</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>mergeinfo</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_mergeinfo__remove_empty_rangelists</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_client__record_wc_mergeinfo</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_ENTRY_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>svn_error_t</name> *</type>
<name>make_merge_conflict_error</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_merge_range_t</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_FOUND_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"One or more conflicts were produced while merging r%ld:%ld into\n"
"'%s' --\n"
"resolve all conflicts and rerun the merge to apply the remaining\n"
"unmerged revisions"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>end</name></name></expr></argument>, <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_absent_children</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><name>notification_receiver_baton_t</name> *</type><name>notify_b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>child</name>
&amp;&amp; (<name><name>child</name>-&gt;<name>absent</name></name> || <name><name>child</name>-&gt;<name>scheduled_for_deletion</name></name>)
&amp;&amp; <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>notify_b</name>-&gt;<name>skipped_paths</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>notify_b</name>-&gt;<name>skipped_paths</name></name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>drive_merge_report_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url1</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url2</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision2</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_rollback</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>notification_receiver_baton_t</name> *</type><name>notify_b</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
<param><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>diff_editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>diff_edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>report_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>default_start</name></decl>, <decl><type ref="prev"/><name>target_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>honor_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_sess2_url</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mergeinfo_behavior</name><argument_list>(<argument><expr>&amp;<name>honor_mergeinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>merge_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>default_start</name> = <name>target_start</name> = <name>revision1</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>honor_mergeinfo</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>merge_b</name>-&gt;<name>target_has_dummy_merge_range</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>target_start</name> = <name>revision2</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>children_with_mergeinfo</name> &amp;&amp; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>remaining_ranges</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>target_start</name> = <name><name>range</name>-&gt;<name>start</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ensure_ra_session_url</name><argument_list>(<argument><expr>&amp;<name>old_sess2_url</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session2</name></name></expr></argument>,
<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_diff_editor</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>,
<argument><expr><name>merge_b</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>dry_run</name></name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session2</name></name></expr></argument>, <argument><expr><name>default_start</name></expr></argument>,
<argument><expr><name>notification_receiver</name></expr></argument>, <argument><expr><name>notify_b</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr>&amp;<name>diff_editor</name></expr></argument>, <argument><expr>&amp;<name>diff_edit_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_do_diff3</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session1</name></name></expr></argument>,
<argument><expr>&amp;<name>reporter</name></expr></argument>, <argument><expr>&amp;<name>report_baton</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr>""</expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>ignore_ancestry</name></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>url2</name></expr></argument>, <argument><expr><name>diff_editor</name></expr></argument>, <argument><expr><name>diff_edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>target_start</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>honor_mergeinfo</name> &amp;&amp; <name>children_with_mergeinfo</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>target_wcpath_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_repos_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parent_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>nearest_parent_is_target</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>child</name> || <name><name>child</name>-&gt;<name>absent</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>parent_index</name> = <call><name>find_nearest_ancestor</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>parent_index</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nearest_parent_is_target</name> =
(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>)</argument_list></call> == 0) ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>remaining_ranges</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>range</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>parent</name>-&gt;<name>remaining_ranges</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>parent_range</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>remaining_ranges</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>child_range</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>parent_range</name>-&gt;<name>start</name></name> == <name><name>child_range</name>-&gt;<name>start</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>parent</name>-&gt;<name>remaining_ranges</name>-&gt;<name>nelts</name></name> == 0
|| (<name>nearest_parent_is_target</name>
&amp;&amp; <name><name>merge_b</name>-&gt;<name>target_has_dummy_merge_range</name></name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
}</block></else></if>
<expr_stmt><expr><name>child_repos_path</name> = <name><name>child</name>-&gt;<name>path</name></name> +
(<name>target_wcpath_len</name> ? <name>target_wcpath_len</name> + 1 : 0)</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>child</name>-&gt;<name>remaining_ranges</name>-&gt;<name>nelts</name></name> == 0)
|| (<name>is_rollback</name> &amp;&amp; (<name><name>range</name>-&gt;<name>start</name></name> &lt; <name>revision2</name>))
|| (!<name>is_rollback</name> &amp;&amp; (<name><name>range</name>-&gt;<name>start</name></name> &gt; <name>revision2</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>child_repos_path</name></expr></argument>,
<argument><expr><name>revision2</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>child_repos_path</name></expr></argument>,
<argument><expr><name><name>range</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>finish_report</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>old_sess2_url</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session2</name></name></expr></argument>, <argument><expr><name>old_sess2_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_sleep_for_timestamps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_revnum_t</name></type>
<name>get_most_inclusive_start_rev</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_rollback</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(! <name>child</name>) || <name><name>child</name>-&gt;<name>absent</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr>! <name><name>child</name>-&gt;<name>remaining_ranges</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>range</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>i</name> == 0) &amp;&amp; (<name><name>range</name>-&gt;<name>start</name></name> == <name><name>range</name>-&gt;<name>end</name></name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr>(<name>start_rev</name> == <name>SVN_INVALID_REVNUM</name>)
|| (<name>is_rollback</name> &amp;&amp; (<name><name>range</name>-&gt;<name>start</name></name> &gt; <name>start_rev</name>))
|| ((! <name>is_rollback</name>) &amp;&amp; (<name><name>range</name>-&gt;<name>start</name></name> &lt; <name>start_rev</name>))</expr>)</condition><then>
<expr_stmt><expr><name>start_rev</name> = <name><name>range</name>-&gt;<name>start</name></name></expr>;</expr_stmt></then></if>
}</block></for>
<return>return <expr><name>start_rev</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_revnum_t</name></type>
<name>get_youngest_end_rev</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_rollback</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>child</name> || <name><name>child</name>-&gt;<name>absent</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>remaining_ranges</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>end_rev</name> == <name>SVN_INVALID_REVNUM</name>)
|| (<name>is_rollback</name> &amp;&amp; (<name><name>range</name>-&gt;<name>end</name></name> &gt; <name>end_rev</name>))
|| ((! <name>is_rollback</name>) &amp;&amp; (<name><name>range</name>-&gt;<name>end</name></name> &lt; <name>end_rev</name>))</expr>)</condition><then>
<expr_stmt><expr><name>end_rev</name> = <name><name>range</name>-&gt;<name>end</name></name></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></for>
<return>return <expr><name>end_rev</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>slice_remaining_ranges</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_rollback</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>child</name> || <name><name>child</name>-&gt;<name>absent</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>remaining_ranges</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>is_rollback</name> &amp;&amp; (<name><name>range</name>-&gt;<name>start</name></name> &gt; <name>end_rev</name>)
&amp;&amp; (<name><name>range</name>-&gt;<name>end</name></name> &lt; <name>end_rev</name>))
|| (!<name>is_rollback</name> &amp;&amp; (<name><name>range</name>-&gt;<name>start</name></name> &lt; <name>end_rev</name>)
&amp;&amp; (<name><name>range</name>-&gt;<name>end</name></name> &gt; <name>end_rev</name>))</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>split_range1</name></decl>, *<decl><type ref="prev"/><name>split_range2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>orig_remaining_ranges</name> <init>=
<expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>split_range1</name> = <call><name>svn_merge_range_dup</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>split_range2</name> = <call><name>svn_merge_range_dup</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>split_range1</name>-&gt;<name>end</name></name> = <name>end_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>split_range2</name>-&gt;<name>start</name></name> = <name>end_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name> =
<call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>(<name><name>child</name>-&gt;<name>remaining_ranges</name>-&gt;<name>nelts</name></name> + 1)</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>split_range1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>split_range2</name></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 1</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>orig_remaining_ranges</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>orig_range</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>orig_remaining_ranges</name></expr></argument>, <argument><expr><name>j</name></expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>orig_range</name></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
}</block></then></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_first_range_from_remaining_ranges</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name>
*</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>child</name> || <name><name>child</name>-&gt;<name>absent</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>remaining_ranges</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>first_range</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>first_range</name>-&gt;<name>end</name></name> == <name>end_rev</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>orig_remaining_ranges</name> <init>=
<expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name> =
<call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>(<name><name>child</name>-&gt;<name>remaining_ranges</name>-&gt;<name>nelts</name></name> - 1)</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 1</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>orig_remaining_ranges</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>orig_remaining_ranges</name></expr></argument>,
<argument><expr><name>j</name></expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>remaining_ranges</name></name></expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
}</block></then></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>mark_mergeinfo_as_inheritable_for_a_range</name><parameter_list>(
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>target_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>same_urls</name></decl></param>,
<param><decl><type><name>svn_merge_range_t</name> *</type><name>range</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><name>int</name></type> <name>target_index</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>target_mergeinfo</name> &amp;&amp; <name>same_urls</name>
&amp;&amp; !<name><name>merge_b</name>-&gt;<name>dry_run</name></name>
&amp;&amp; <name><name>merge_b</name>-&gt;<name>same_repos</name></name>
&amp;&amp; <name>target_index</name> &gt;= 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>merge_path</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name>target_index</name></expr></argument>, <argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>merge_path</name>
&amp;&amp; <name><name>merge_path</name>-&gt;<name>has_noninheritable</name></name> &amp;&amp; !<name><name>merge_path</name>-&gt;<name>missing_child</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_equal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>merges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>inheritable_merges</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>inheritable_ranges</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>inheritable_ranges</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>inheritable_merges</name></expr></argument>, <argument><expr><name>rel_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>inheritable_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_inheritable</name><argument_list>(<argument><expr>&amp;<name>merges</name></expr></argument>, <argument><expr><name>target_mergeinfo</name></expr></argument>,
<argument><expr><name>rel_path</name></expr></argument>, <argument><expr><name><name>range</name>-&gt;<name>start</name></name></expr></argument>,
<argument><expr><name><name>range</name>-&gt;<name>end</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo__equals</name><argument_list>(<argument><expr>&amp;<name>is_equal</name></expr></argument>, <argument><expr><name>merges</name></expr></argument>, <argument><expr><name>target_mergeinfo</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>is_equal</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr><name>merges</name></expr></argument>, <argument><expr><name>inheritable_merges</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__record_wc_mergeinfo</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>merges</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>record_mergeinfo_on_merged_children</name><parameter_list>(<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>notification_receiver_baton_t</name> *</type><name>notify_b</name></decl></param>,
<param><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(<name>depth</name> != <name>svn_depth_infinity</name>) &amp;&amp; <name><name>notify_b</name>-&gt;<name>merged_paths</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>indirect_child_mergeinfo</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>child_target_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>merged_path</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>notify_b</name>-&gt;<name>merged_paths</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>child_entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>merged_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>child_entry</name></expr></argument>, <argument><expr><name>merged_path</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>((<name><name>child_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>merged_path</name></expr></argument>)</argument_list></call> == 0)
&amp;&amp; (<name>depth</name> == <name>svn_depth_immediates</name>))
|| ((<name><name>child_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>)
&amp;&amp; (<name>depth</name> == <name>svn_depth_files</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_wc_or_repos_mergeinfo</name>
<argument_list>(<argument><expr>&amp;<name>child_target_mergeinfo</name></expr></argument>, <argument><expr><name>child_entry</name></expr></argument>,
<argument><expr>&amp;<name>indirect_child_mergeinfo</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session1</name></name></expr></argument>, <argument><expr><name>merged_path</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>indirect_child_mergeinfo</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__record_wc_mergeinfo</name><argument_list>(<argument><expr><name>merged_path</name></expr></argument>,
<argument><expr><name>child_target_mergeinfo</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></for>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>single_file_merge_get_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>filename</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc_target</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr>&amp;<name>fp</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><name>wc_target</name></expr></argument>, <argument><expr>".tmp"</expr></argument>,
<argument><expr><name>svn_io_file_del_none</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>svn_stream_from_aprfile2</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_file</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>void</name></type>
<name>single_file_merge_notify</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_wc_notify_action_t</name></type> <name>action</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name></type> <name>text_state</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name></type> <name>prop_state</name></decl></param>,
<param><decl><type><name>svn_wc_notify_t</name> *</type><name>header_notification</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>header_sent</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name> <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name>text_state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>prop_state</name></name> = <name>prop_state</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>notify</name>-&gt;<name>content_state</name></name> == <name>svn_wc_notify_state_missing</name></expr>)</condition><then>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>action</name></name> = <name>svn_wc_notify_skip</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>IS_OPERATIVE_NOTIFICATION</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call>
&amp;&amp; <name>header_notification</name>
&amp;&amp; (! *<name>header_sent</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>notification_receiver</name><argument_list>(<argument><expr><name>notify_baton</name></expr></argument>, <argument><expr><name>header_notification</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>header_sent</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>notification_receiver</name><argument_list>(<argument><expr><name>notify_baton</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<struct>struct <name>get_mergeinfo_walk_baton</name> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>base_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>merge_src_canon_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>merge_target_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_root_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>url1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>url2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_mergeinfo_walk_cb</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>get_mergeinfo_walk_baton</name> *</type><name>wb</name> <init>= <expr><name>walk_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergehash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>switched</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_mergeinfo_from_merge_src</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>path_is_merge_target</name> <init>=
<expr>!<call><name>svn_path_compare_paths</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>merge_target_path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name> <init>= <expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> != 0)
&amp;&amp; !<name><name>entry</name>-&gt;<name>absent</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>deleted</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>absent</name></name> || <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>propval</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>switched</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr>&amp;<name>propval</name></expr></argument>, <argument><expr><name>SVN_PROP_MERGEINFO</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name><name>wb</name>-&gt;<name>base_access</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propval</name> &amp;&amp; !<name>path_is_merge_target</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>merge_src_child_path</name> <init>=
<expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>merge_src_canon_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>merge_target_path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name>merge_src_child_path</name></expr></argument>,
<argument><expr><name>path</name> + <call><name>strlen</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>merge_target_path</name></name></expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name>merge_src_child_path</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_parse</name><argument_list>(<argument><expr>&amp;<name>mergehash</name></expr></argument>, <argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>propval</name>-&gt;<name>len</name></name> == 0
|| <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>mergehash</name></expr></argument>, <argument><expr><name><name>merge_src_child_path</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>has_mergeinfo_from_merge_src</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original_ra_url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mergeinfo_url</name> <init>=
<expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>source_root_url</name></name></expr></argument>,
<argument><expr>++(<name><name>merge_src_child_path</name>-&gt;<name>data</name></name>)</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name> *</type><name>start_revision</name></decl>, *<decl><type ref="prev"/><name>end_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start_url</name></decl>, *<decl><type ref="prev"/><name>end_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_rev</name></decl>, <decl><type ref="prev"/><name>rev1_opt</name></decl>, <decl><type ref="prev"/><name>rev2_opt</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>peg_rev</name>.<name>value</name>.<name>number</name></name> = <name><name>wb</name>-&gt;<name>revision1</name></name> &lt; <name><name>wb</name>-&gt;<name>revision2</name></name>
? <name><name>wb</name>-&gt;<name>revision2</name></name> : <name><name>wb</name>-&gt;<name>revision1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>peg_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rev1_opt</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rev1_opt</name>.<name>value</name>.<name>number</name></name> = <name><name>wb</name>-&gt;<name>revision1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rev2_opt</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rev2_opt</name>.<name>value</name>.<name>number</name></name> = <name><name>wb</name>-&gt;<name>revision2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ensure_ra_session_url</name><argument_list>(<argument><expr>&amp;<name>original_ra_url</name></expr></argument>,
<argument><expr><name><name>wb</name>-&gt;<name>ra_session</name></name></expr></argument>,
<argument><expr><name>mergeinfo_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_client__repos_locations</name><argument_list>(<argument><expr>&amp;<name>start_url</name></expr></argument>, <argument><expr>&amp;<name>start_revision</name></expr></argument>,
<argument><expr>&amp;<name>end_url</name></expr></argument>, <argument><expr>&amp;<name>end_revision</name></expr></argument>,
<argument><expr><name><name>wb</name>-&gt;<name>ra_session</name></name></expr></argument>, <argument><expr><name>mergeinfo_url</name></expr></argument>,
<argument><expr>&amp;<name>peg_rev</name></expr></argument>, <argument><expr>&amp;<name>rev1_opt</name></expr></argument>, <argument><expr>&amp;<name>rev2_opt</name></expr></argument>,
<argument><expr><name><name>wb</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name>
|| <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name>
|| <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CLIENT_UNRELATED_RESOURCES</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<return>return <expr><name>err</name></expr>;</return></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>has_mergeinfo_from_merge_src</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>original_ra_url</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>ra_session</name></name></expr></argument>,
<argument><expr><name>original_ra_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__path_switched</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>switched</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>path_is_merge_target</name>
|| <name>has_mergeinfo_from_merge_src</name>
|| <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name>
|| <name>switched</name>
|| <name><name>entry</name>-&gt;<name>depth</name></name> == <name>svn_depth_empty</name>
|| <name><name>entry</name>-&gt;<name>depth</name></name> == <name>svn_depth_files</name>
|| <name><name>entry</name>-&gt;<name>absent</name></name>
|| ((<name><name>wb</name>-&gt;<name>depth</name></name> == <name>svn_depth_immediates</name>) &amp;&amp;
(<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>) &amp;&amp;
(<call><name>strcmp</name><argument_list>(<argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> != 0) &amp;&amp;
(<call><name>strcmp</name><argument_list>(<argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>merge_target_path</name></name></expr></argument>)</argument_list></call> == 0))</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>children_with_mergeinfo</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>child</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>children_with_mergeinfo</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>missing_child</name></name> = (<name><name>entry</name>-&gt;<name>depth</name></name> == <name>svn_depth_empty</name>
|| <name><name>entry</name>-&gt;<name>depth</name></name> == <name>svn_depth_files</name>
|| ((<name><name>wb</name>-&gt;<name>depth</name></name> == <name>svn_depth_immediates</name>) &amp;&amp;
(<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>) &amp;&amp;
(<call><name>strcmp</name><argument_list>(<argument><expr><name>parent_path</name></expr></argument>,
<argument><expr><name><name>wb</name>-&gt;<name>merge_target_path</name></name></expr></argument>)</argument_list></call> == 0)))
? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>switched</name></name> = <name>switched</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>absent</name></name> = <name><name>entry</name>-&gt;<name>absent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>scheduled_for_deletion</name></name> =
<name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>propval</name>
&amp;&amp; <call><name>strstr</name><argument_list>(<argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>SVN_MERGEINFO_NONINHERITABLE_STR</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>child</name>-&gt;<name>has_noninheritable</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name><name>child</name>-&gt;<name>has_noninheritable</name></name>
&amp;&amp; (<name><name>entry</name>-&gt;<name>depth</name></name> == <name>svn_depth_empty</name>
|| <name><name>entry</name>-&gt;<name>depth</name></name> == <name>svn_depth_files</name>)</expr>)</condition><then>
<expr_stmt><expr><name><name>child</name>-&gt;<name>has_noninheritable</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>children_with_mergeinfo</name></name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call> = <name>child</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_mergeinfo_error_handler</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>root_err</name> <init>= <expr><call><name>svn_error_root_cause</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>root_err</name> == <name>SVN_NO_ERROR</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<switch>switch <condition>(<expr><name><name>root_err</name>-&gt;<name>apr_err</name></name></expr>)</condition> <block>{
<case>case <expr><name>SVN_ERR_WC_PATH_NOT_FOUND</name></expr>:
</case><case>case <expr><name>SVN_ERR_WC_NOT_LOCKED</name></expr>:
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><default>default:
<return>return <expr><name>err</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>find_child_or_parent</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_client__merge_path_t</name> **</type><name>child_or_parent</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>looking_for_child</name></decl></param>,
<param><decl><type><name>int</name></type> <name>start_index</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>child_or_parent</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>start_index</name> &gt;= 0 &amp;&amp; <name>start_index</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>j</name> = <name>looking_for_child</name> ? <name>start_index</name> + 1 : <name>start_index</name></expr>;</init>
<condition><expr><name>looking_for_child</name> ? <name>j</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name> : <name>j</name> &gt;= 0</expr>;</condition>
<incr><expr><name>j</name> = <name>looking_for_child</name> ? <name>j</name> + 1 : <name>j</name> - 1</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>potential_child_or_parent</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>j</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>svn_path_compare_paths</name><argument_list>(<argument><expr><name>path</name></expr></argument>,
<argument><expr><name><name>potential_child_or_parent</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cmp</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>child_or_parent</name> = <name>potential_child_or_parent</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr>(<name>looking_for_child</name> &amp;&amp; <name>cmp</name> &lt; 0)
|| (!<name>looking_for_child</name> &amp;&amp; <name>cmp</name> &gt; 0)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>looking_for_child</name></expr>)</condition><then>
<expr_stmt><expr><name>j</name>++</expr>;</expr_stmt></then></if>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr>!<name>looking_for_child</name> &amp;&amp; <name>j</name> == 0</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if></else></if></else></if>
}</block></for>
}</block></then></if>
<return>return <expr><name>j</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>insert_child_to_merge</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_client__merge_path_t</name> *</type><name>insert_element</name></decl></param>,
<param><decl><type><name>int</name></type> <name>insert_index</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>insert_index</name> == <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call> = <name>insert_element</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>curr</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name> - 1</expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>curr_copy</name> <init>=
<expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>children_with_mergeinfo</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>curr_copy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>curr_copy</name> = *<name>curr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call> = <name>curr_copy</name></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name> - 2</expr>;</init> <condition><expr><name>j</name> &gt;= <name>insert_index</name></expr>;</condition> <incr><expr><name>j</name>--</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>prev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>curr</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>j</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>j</name> == <name>insert_index</name></expr>)</condition><then>
<expr_stmt><expr>*<name>curr</name> = *<name>insert_element</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>prev</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>j</name> - 1</expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>curr</name> = *<name>prev</name></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_merge_path_t_as_paths</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child1</name> <init>= <expr>*((<name>svn_client__merge_path_t</name> * const *) <name>a</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child2</name> <init>= <expr>*((<name>svn_client__merge_path_t</name> * const *) <name>b</name>)</expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_path_compare_paths</name><argument_list>(<argument><expr><name><name>child1</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>child2</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>insert_parent_and_sibs_of_sw_absent_del_entry</name><parameter_list>(
<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_cmd_baton</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>curr_index</name></decl></param>,
<param><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name> <init>= <expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>insert_index</name></decl>, <decl><type ref="prev"/><name>parent_index</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name><name>child</name>-&gt;<name>absent</name></name>
|| (<name><name>child</name>-&gt;<name>switched</name></name>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>merge_cmd_baton</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call> != 0))</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>parent_index</name> = <call><name>find_child_or_parent</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>parent</name></expr></argument>,
<argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>*<name>curr_index</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>parent</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>parent</name>-&gt;<name>missing_child</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>parent</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>children_with_mergeinfo</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>parent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>children_with_mergeinfo</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name>-&gt;<name>missing_child</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_child_to_merge</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>parent_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(*<name>curr_index</name>)++</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_try3</name><argument_list>(<argument><expr>&amp;<name>parent_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name><name>merge_cmd_baton</name>-&gt;<name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>merge_cmd_baton</name>-&gt;<name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>parent_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>sibling_of_missing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>child_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>insert_index</name> = <call><name>find_child_or_parent</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr>&amp;<name>sibling_of_missing</name></expr></argument>, <argument><expr><name>child_path</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>parent_index</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>sibling_of_missing</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sibling_of_missing</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>children_with_mergeinfo</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>sibling_of_missing</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sibling_of_missing</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>children_with_mergeinfo</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>child_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_child_to_merge</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>sibling_of_missing</name></expr></argument>,
<argument><expr><name>insert_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_mergeinfo_paths</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
<param><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_cmd_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>merge_src_canon_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_root_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url2</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision1</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision2</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_wc_entry_callbacks2_t</name></type> <name>walk_callbacks</name> <init>=
<expr><block>{ <expr><name>get_mergeinfo_walk_cb</name></expr>, <expr><name>get_mergeinfo_error_handler</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>get_mergeinfo_walk_baton</name></type> <name>wb</name> <init>= <expr><block>{
<expr><name>adm_access</name></expr>, <expr><name>children_with_mergeinfo</name></expr>,
<expr><name>merge_src_canon_path</name></expr>, <expr><name><name>merge_cmd_baton</name>-&gt;<name>target</name></name></expr>, <expr><name>source_root_url</name></expr>,
<expr><name>url1</name></expr>, <expr><name>url2</name></expr>, <expr><name>revision1</name></expr>, <expr><name>revision2</name></expr>,
<expr><name>depth</name></expr>, <expr><name>ra_session</name></expr>, <expr><name>ctx</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>walk_callbacks</name>.<name>found_entry</name></name><argument_list>(<argument><expr><name><name>merge_cmd_baton</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr>&amp;<name>wb</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_walk_entries3</name><argument_list>(<argument><expr><name><name>merge_cmd_baton</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr>&amp;<name>walk_callbacks</name></expr></argument>, <argument><expr>&amp;<name>wb</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name><name>merge_cmd_baton</name>-&gt;<name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>merge_cmd_baton</name>-&gt;<name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>children_with_mergeinfo</name>-&gt;<name>elts</name></name></expr></argument>,
<argument><expr><name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><name><name>children_with_mergeinfo</name>-&gt;<name>elt_size</name></name></expr></argument>,
<argument><expr><name>compare_merge_path_t_as_paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>insert_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>has_noninheritable</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>child_access</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_try3</name><argument_list>(<argument><expr>&amp;<name>child_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>-1</expr></argument>,
<argument><expr><name><name>merge_cmd_baton</name>-&gt;<name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>merge_cmd_baton</name>-&gt;<name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>child_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child_of_noninheritable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>child_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>insert_index</name> = <call><name>find_child_or_parent</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr>&amp;<name>child_of_noninheritable</name></expr></argument>,
<argument><expr><name>child_path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>child_of_noninheritable</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>child_of_noninheritable</name> =
<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>children_with_mergeinfo</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>child_of_noninheritable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child_of_noninheritable</name>-&gt;<name>path</name></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>children_with_mergeinfo</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>child_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>insert_child_to_merge</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name>child_of_noninheritable</name></expr></argument>,
<argument><expr><name>insert_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>merge_cmd_baton</name>-&gt;<name>dry_run</name></name>
&amp;&amp; <name><name>merge_cmd_baton</name>-&gt;<name>same_repos</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>inherited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_wc_mergeinfo</name>
<argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>inherited</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>svn_mergeinfo_nearest_ancestor</name></expr></argument>,
<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>child_of_noninheritable</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>merge_cmd_baton</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name><name>merge_cmd_baton</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__record_wc_mergeinfo</name><argument_list>(
<argument><expr><name><name>child_of_noninheritable</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>insert_parent_and_sibs_of_sw_absent_del_entry</name><argument_list>(
<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>merge_cmd_baton</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>, <argument><expr><name>child</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_changed_revs</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>revs</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>revision</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>revs</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>revision</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>revision</name> = <name><name>log_entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>svn_revnum_t</name> *</expr></argument>)</argument_list></call> = <name>revision</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>remove_noop_merge_ranges</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>operative_ranges_p</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>ranges</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>oldest_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>oldest_changed_rev</name></decl>, <decl><type ref="prev"/><name>youngest_changed_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>changed_revs</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ranges</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>operative_ranges</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>ranges</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ranges</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><name><name>ranges</name>-&gt;<name>elt_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>log_targets</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>log_targets</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = ""</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>ranges</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>r</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>max_rev</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>end</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>min_rev</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>end</name></name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>youngest_rev</name></expr></argument>)</argument_list></call>) || (<name>max_rev</name> &gt; <name>youngest_rev</name>)</expr>)</condition><then>
<expr_stmt><expr><name>youngest_rev</name> = <name>max_rev</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>oldest_rev</name></expr></argument>)</argument_list></call>) || (<name>min_rev</name> &lt; <name>oldest_rev</name>)</expr>)</condition><then>
<expr_stmt><expr><name>oldest_rev</name> = <name>min_rev</name></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_log2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>log_targets</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>,
<argument><expr><name>oldest_rev</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>log_changed_revs</name></expr></argument>, <argument><expr><name>changed_revs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>youngest_changed_rev</name> = *(<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>changed_revs</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>svn_revnum_t</name> *</expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<expr_stmt><expr><name>oldest_changed_rev</name> = *(<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>changed_revs</name></expr></argument>,
<argument><expr><name><name>changed_revs</name>-&gt;<name>nelts</name></name> - 1</expr></argument>,
<argument><expr><name>svn_revnum_t</name> *</expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>ranges</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>range_min</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>range</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name><name>range</name>-&gt;<name>end</name></name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>range_max</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>range</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name><name>range</name>-&gt;<name>end</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>range_min</name> &gt; <name>youngest_changed_rev</name>)
|| (<name>range_max</name> &lt; <name>oldest_changed_rev</name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>changed_revs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>changed_rev</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>changed_revs</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>svn_revnum_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(*<name>changed_rev</name> &gt;= <name>range_min</name>) &amp;&amp; (*<name>changed_rev</name> &lt;= <name>range_max</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>operative_ranges</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></for>
<expr_stmt><expr>*<name>operative_ranges_p</name> = <name>operative_ranges</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <name>merge_source_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl>;</decl_stmt>
}</block></struct></type> <name>merge_source_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare_merge_source_ts</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>a_rev</name> <init>= <expr>((const <name>merge_source_t</name> *)<name>a</name>)-&gt;<name>rev1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>b_rev</name> <init>= <expr>((const <name>merge_source_t</name> *)<name>b</name>)-&gt;<name>rev1</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>a_rev</name> == <name>b_rev</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr><name>a_rev</name> &lt; <name>b_rev</name> ? 1 : -1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>combine_range_with_segments</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>merge_source_ts_p</name></decl></param>,
<param><decl><type><name>svn_merge_range_t</name> *</type><name>range</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>segments</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_root_url</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>merge_source_ts</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>merge_source_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>minrev</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>range</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name><name>range</name>-&gt;<name>end</name></name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>maxrev</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>range</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name><name>range</name>-&gt;<name>end</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>subtractive</name> <init>= <expr>(<name><name>range</name>-&gt;<name>start</name></name> &gt; <name><name>range</name>-&gt;<name>end</name></name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>segments</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_location_segment_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>merge_source_t</name> *</type><name>merge_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>segment</name>-&gt;<name>range_end</name></name> &lt; <name>minrev</name>)
|| (<name><name>segment</name>-&gt;<name>range_start</name></name> &gt; <name>maxrev</name>)
|| (! <name><name>segment</name>-&gt;<name>path</name></name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>rev1</name> = <call><name>MAX</name><argument_list>(<argument><expr><name><name>segment</name>-&gt;<name>range_start</name></name></expr></argument>, <argument><expr><name>minrev</name></expr></argument>)</argument_list></call> - 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>minrev</name> &lt;= <name><name>segment</name>-&gt;<name>range_start</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>i</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>path1</name> = (<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>i</name> - 1</expr></argument>,
<argument><expr><name>svn_location_segment_t</name> *</expr></argument>)</argument_list></call>)-&gt;<name>path</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(! <name>path1</name>) &amp;&amp; (<name>i</name> &gt; 1)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>path1</name> = (<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>i</name> - 2</expr></argument>,
<argument><expr><name>svn_location_segment_t</name> *</expr></argument>)</argument_list></call>)-&gt;<name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rev1</name> = (<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>i</name> - 2</expr></argument>,
<argument><expr><name>svn_location_segment_t</name> *</expr></argument>)</argument_list></call>)-&gt;<name>range_end</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>path1</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>segment</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>! (<name>path1</name> &amp;&amp; <name><name>segment</name>-&gt;<name>path</name></name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>merge_source</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>merge_source</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_source</name>-&gt;<name>url1</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>source_root_url</name></expr></argument>,
<argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>path1</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_source</name>-&gt;<name>url2</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>source_root_url</name></expr></argument>,
<argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name><name>segment</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_source</name>-&gt;<name>rev1</name></name> = <name>rev1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_source</name>-&gt;<name>rev2</name></name> = <call><name>MIN</name><argument_list>(<argument><expr><name><name>segment</name>-&gt;<name>range_end</name></name></expr></argument>, <argument><expr><name>maxrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>subtractive</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>tmprev</name> <init>= <expr><name><name>merge_source</name>-&gt;<name>rev1</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpurl</name> <init>= <expr><name><name>merge_source</name>-&gt;<name>url1</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>merge_source</name>-&gt;<name>rev1</name></name> = <name><name>merge_source</name>-&gt;<name>rev2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_source</name>-&gt;<name>url1</name></name> = <name><name>merge_source</name>-&gt;<name>url2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_source</name>-&gt;<name>rev2</name></name> = <name>tmprev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_source</name>-&gt;<name>url2</name></name> = <name>tmpurl</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>merge_source_ts</name></expr></argument>, <argument><expr><name>merge_source_t</name> *</expr></argument>)</argument_list></call> = <name>merge_source</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>subtractive</name> &amp;&amp; (<name><name>merge_source_ts</name>-&gt;<name>nelts</name></name> &gt; 1)</expr>)</condition><then>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>merge_source_ts</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>merge_source_ts</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><name><name>merge_source_ts</name>-&gt;<name>elt_size</name></name></expr></argument>, <argument><expr><name>compare_merge_source_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>merge_source_ts_p</name> = <name>merge_source_ts</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>normalize_merge_sources</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>merge_sources_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_root_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>ranges_to_merge</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>peg_revnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>oldest_requested</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_requested</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>trim_revision</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>youngest_opt_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>merge_range_ts</name></decl>, *<decl><type ref="prev"/><name>segments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>youngest_opt_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>merge_sources_p</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>merge_source_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name><argument_list>(<argument><expr>&amp;<name>peg_revnum</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>source</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>peg_revnum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_BAD_REVISION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>merge_range_ts</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ranges_to_merge</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>ranges_to_merge</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>range_start_rev</name></decl>, <decl><type ref="prev"/><name>range_end_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name> *</type><name>range_start</name> <init>=
<expr>&amp;((<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>ranges_to_merge</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></call>)-&gt;<name>start</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name> *</type><name>range_end</name> <init>=
<expr>&amp;((<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>ranges_to_merge</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></call>)-&gt;<name>end</name>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>range_start</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)
|| (<name><name>range_end</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_BAD_REVISION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Not all required revisions are specified"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name><argument_list>(<argument><expr>&amp;<name>range_start_rev</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>range_start</name></expr></argument>,
<argument><expr><name>source</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name><argument_list>(<argument><expr>&amp;<name>range_end_rev</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>range_end</name></expr></argument>,
<argument><expr><name>source</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>range_start_rev</name> != <name>range_end_rev</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name></name> = <name>range_start_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name></name> = <name>range_end_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>inheritable</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>merge_range_ts</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>merge_range_ts</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>merge_range_ts</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>merge_range_ts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>minrev</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>range</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name><name>range</name>-&gt;<name>end</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>maxrev</name> <init>= <expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>range</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name><name>range</name>-&gt;<name>end</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>oldest_requested</name></expr></argument>)</argument_list></call>)
|| (<name>minrev</name> &lt; <name>oldest_requested</name>)</expr>)</condition><then>
<expr_stmt><expr><name>oldest_requested</name> = <name>minrev</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>youngest_requested</name></expr></argument>)</argument_list></call>)
|| (<name>maxrev</name> &gt; <name>youngest_requested</name>)</expr>)</condition><then>
<expr_stmt><expr><name>youngest_requested</name> = <name>maxrev</name></expr>;</expr_stmt></then></if>
}</block></for>
<if>if <condition>(<expr><name>peg_revnum</name> &lt; <name>youngest_requested</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>requested</name></decl>, <decl><type ref="prev"/><name>unspec</name></decl>, <decl><type ref="prev"/><name>pegrev</name></decl>, *<decl><type ref="prev"/><name>start_revision</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>unspec</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requested</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>requested</name>.<name>value</name>.<name>number</name></name> = <name>youngest_requested</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pegrev</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pegrev</name>.<name>value</name>.<name>number</name></name> = <name>peg_revnum</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__repos_locations</name><argument_list>(<argument><expr>&amp;<name>start_url</name></expr></argument>, <argument><expr>&amp;<name>start_revision</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>source_url</name></expr></argument>,
<argument><expr>&amp;<name>pegrev</name></expr></argument>, <argument><expr>&amp;<name>requested</name></expr></argument>,
<argument><expr>&amp;<name>unspec</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>peg_revnum</name> = <name>youngest_requested</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__repos_location_segments</name><argument_list>(<argument><expr>&amp;<name>segments</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>,
<argument><expr><name>peg_revnum</name></expr></argument>,
<argument><expr><name>youngest_requested</name></expr></argument>,
<argument><expr><name>oldest_requested</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>trim_revision</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>segments</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>svn_location_segment_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>segment</name>-&gt;<name>range_start</name></name> != <name>oldest_requested</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>trim_revision</name> = <name><name>segment</name>-&gt;<name>range_start</name></name></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr>! <name><name>segment</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>segments</name>-&gt;<name>nelts</name></name> &gt; 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>segment2</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>svn_location_segment_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl>, *<decl><type ref="prev"/><name>segment_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>range_start_rev</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>range_start_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range_start_rev</name>.<name>value</name>.<name>number</name></name> = <name><name>segment2</name>-&gt;<name>range_start</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>segment_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>source_root_url</name></expr></argument>,
<argument><expr><name><name>segment2</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_copy_source</name><argument_list>(<argument><expr><name>segment_url</name></expr></argument>,
<argument><expr>&amp;<name>range_start_rev</name></expr></argument>,
<argument><expr>&amp;<name>copyfrom_path</name></expr></argument>,
<argument><expr>&amp;<name>copyfrom_rev</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copyfrom_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copyfrom_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>new_segment</name> <init>=
<expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_segment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new_segment</name>-&gt;<name>path</name></name> = (*<name>copyfrom_path</name> == '/')
? <name>copyfrom_path</name> + 1 : <name>copyfrom_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_segment</name>-&gt;<name>range_start</name></name> = <name>copyfrom_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_segment</name>-&gt;<name>range_end</name></name> = <name>copyfrom_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>segment</name>-&gt;<name>range_start</name></name> = <name>copyfrom_rev</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>svn_location_segment_t</name> *</expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>segments</name>-&gt;<name>elts</name></name> + <name><name>segments</name>-&gt;<name>elt_size</name></name></expr></argument>,
<argument><expr><name><name>segments</name>-&gt;<name>elts</name></name></expr></argument>,
<argument><expr><name><name>segments</name>-&gt;<name>elt_size</name></name> * (<name><name>segments</name>-&gt;<name>nelts</name></name> - 1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>svn_location_segment_t</name> *</expr></argument>)</argument_list></call> =
<name>new_segment</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if></else></if>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>merge_range_ts</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>merge_range_ts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>merge_sources</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>trim_revision</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>MAX</name><argument_list>(<argument><expr><name><name>range</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name><name>range</name>-&gt;<name>end</name></name></expr></argument>)</argument_list></call> &lt; <name>trim_revision</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>range</name>-&gt;<name>start</name></name> &lt; <name>trim_revision</name></expr>)</condition><then>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name></name> = <name>trim_revision</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>range</name>-&gt;<name>end</name></name> &lt; <name>trim_revision</name></expr>)</condition><then>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name></name> = <name>trim_revision</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>combine_range_with_segments</name><argument_list>(<argument><expr>&amp;<name>merge_sources</name></expr></argument>, <argument><expr><name>range</name></expr></argument>,
<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>source_root_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>merge_sources</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr>*<name>merge_sources_p</name></expr></argument>, <argument><expr><name>merge_source_t</name> *</expr></argument>)</argument_list></call> =
<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>merge_sources</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>merge_source_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>filter_natural_history_from_mergeinfo</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>filtered_rangelist</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_rel_path</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>implicit_mergeinfo</name></decl></param>,
<param><decl><type><name>svn_merge_range_t</name> *</type><name>requested_range</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>requested_rangelist</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>requested_rangelist</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> =
<call><name>svn_merge_range_dup</name><argument_list>(<argument><expr><name>requested_range</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>filtered_rangelist</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>implicit_mergeinfo</name>
&amp;&amp; (<name><name>requested_range</name>-&gt;<name>start</name></name> &lt; <name><name>requested_range</name>-&gt;<name>end</name></name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>implied_rangelist</name> <init>=
<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>implicit_mergeinfo</name></expr></argument>, <argument><expr><name>source_rel_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>implied_rangelist</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_remove</name><argument_list>(<argument><expr><name>filtered_rangelist</name></expr></argument>,
<argument><expr><name>implied_rangelist</name></expr></argument>,
<argument><expr><name>requested_rangelist</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr>! (*<name>filtered_rangelist</name>)</expr>)</condition><then>
<expr_stmt><expr>*<name>filtered_rangelist</name> = <name>requested_rangelist</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_file_merge</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url1</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url2</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>sources_related</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>notification_receiver_baton_t</name> *</type><name>notify_b</name></decl></param>,
<param><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props1</name></decl>, *<decl><type ref="prev"/><name>props2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl>, *<decl><type ref="prev"/><name>tmpfile2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl>, *<decl><type ref="prev"/><name>mimetype2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>pval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl>, *<decl><type ref="prev"/><name>remaining_ranges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_notify_state_t</name></type> <name>prop_state</name> <init>= <expr><name>svn_wc_notify_state_unknown</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_notify_state_t</name></type> <name>text_state</name> <init>= <expr><name>svn_wc_notify_state_unknown</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name> <init>= <expr><name><name>merge_b</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mergeinfo_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>target_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>conflicted_range</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>indirect</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_rollback</name> <init>= <expr>(<name>revision1</name> &gt; <name>revision2</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>primary_url</name> <init>= <expr><name>is_rollback</name> ? <name>url1</name> : <name>url2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>honor_mergeinfo</name></decl>, <decl><type ref="prev"/><name>record_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>implicit_mergeinfo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mergeinfo_behavior</name><argument_list>(<argument><expr>&amp;<name>honor_mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>record_mergeinfo</name></expr></argument>, <argument><expr><name>merge_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_b</name>-&gt;<name>is_single_file_merge</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_try3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>.<name>start</name></name> = <name>revision1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>.<name>end</name></name> = <name>revision2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>.<name>inheritable</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>honor_mergeinfo</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_root_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>merge_target</name> <init>=
<expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>merge_target</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session1</name></name></expr></argument>,
<argument><expr>&amp;<name>source_root_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__path_relative_to_root</name><argument_list>(<argument><expr>&amp;<name>mergeinfo_path</name></expr></argument>, <argument><expr><name>primary_url</name></expr></argument>,
<argument><expr><name>source_root_url</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session1</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_full_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>target_mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>implicit_mergeinfo</name></expr></argument>,
<argument><expr><name>entry</name></expr></argument>, <argument><expr>&amp;<name>indirect</name></expr></argument>, <argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session1</name></name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><call><name>MAX</name><argument_list>(<argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session1</name></name></expr></argument>, <argument><expr><name>url1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>merge_b</name>-&gt;<name>record_only</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>calculate_remaining_ranges</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>merge_target</name></expr></argument>,
<argument><expr><name>source_root_url</name></expr></argument>,
<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>url2</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name>target_mergeinfo</name></expr></argument>,
<argument><expr><name>implicit_mergeinfo</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session1</name></name></expr></argument>,
<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>remaining_ranges</name> = <name><name>merge_target</name>-&gt;<name>remaining_ranges</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>honor_mergeinfo</name> || <name><name>merge_b</name>-&gt;<name>record_only</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>remaining_ranges</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>&amp;<name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>remaining_ranges</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = &amp;<name>range</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>merge_b</name>-&gt;<name>record_only</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ranges_to_merge</name> <init>= <expr><name>remaining_ranges</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>merge_b</name>-&gt;<name>sources_ancestral</name></name> &amp;&amp; (<name><name>remaining_ranges</name>-&gt;<name>nelts</name></name> &gt; 1)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_sess_url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ensure_ra_session_url</name><argument_list>(<argument><expr>&amp;<name>old_sess_url</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session1</name></name></expr></argument>,
<argument><expr><name>primary_url</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remove_noop_merge_ranges</name><argument_list>(<argument><expr>&amp;<name>ranges_to_merge</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session1</name></name></expr></argument>,
<argument><expr><name>remaining_ranges</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>old_sess_url</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session1</name></name></expr></argument>, <argument><expr><name>old_sess_url</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>ranges_to_merge</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>header_sent</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session1</name></decl>, *<decl><type ref="prev"/><name>ra_session2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>r</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>ranges_to_merge</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>same_repos</name></name>
? <name>svn_wc_notify_merge_begin</name>
: <name>svn_wc_notify_foreign_merge_begin</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>merge_b</name>-&gt;<name>sources_ancestral</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>n</name>-&gt;<name>merge_range</name></name> = <name>r</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>ra_session1</name> = <name><name>merge_b</name>-&gt;<name>ra_session1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ra_session2</name> = <name><name>merge_b</name>-&gt;<name>ra_session2</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>honor_mergeinfo</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>url2</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>is_rollback</name> &amp;&amp; <name><name>r</name>-&gt;<name>start</name></name> != <name>revision1</name></expr>)</condition><then>
<expr_stmt><expr><name>ra_session1</name> = <name>ra_session2</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>is_rollback</name> &amp;&amp; <name><name>r</name>-&gt;<name>end</name></name> != <name>revision2</name></expr>)</condition><then>
<expr_stmt><expr><name>ra_session2</name> = <name>ra_session1</name></expr>;</expr_stmt></then></if></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>single_file_merge_get_file</name><argument_list>(<argument><expr>&amp;<name>tmpfile1</name></expr></argument>, <argument><expr><name>ra_session1</name></expr></argument>,
<argument><expr>&amp;<name>props1</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>single_file_merge_get_file</name><argument_list>(<argument><expr>&amp;<name>tmpfile2</name></expr></argument>, <argument><expr><name>ra_session2</name></expr></argument>,
<argument><expr>&amp;<name>props2</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>end</name></name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props1</name></expr></argument>, <argument><expr><name>SVN_PROP_MIME_TYPE</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>SVN_PROP_MIME_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mimetype1</name> = <name>pval</name> ? <name><name>pval</name>-&gt;<name>data</name></name> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props2</name></expr></argument>, <argument><expr><name>SVN_PROP_MIME_TYPE</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>SVN_PROP_MIME_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mimetype2</name> = <name>pval</name> ? <name><name>pval</name>-&gt;<name>data</name></name> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_prop_diffs</name><argument_list>(<argument><expr>&amp;<name>propchanges</name></expr></argument>, <argument><expr><name>props2</name></expr></argument>, <argument><expr><name>props1</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! (<name><name>merge_b</name>-&gt;<name>ignore_ancestry</name></name> || <name>sources_related</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>merge_file_deleted</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>,
<argument><expr>&amp;<name>text_state</name></expr></argument>,
<argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>,
<argument><expr><name>props1</name></expr></argument>,
<argument><expr><name>merge_b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>single_file_merge_notify</name><argument_list>(<argument><expr><name>notify_b</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>svn_wc_notify_update_delete</name></expr></argument>, <argument><expr><name>text_state</name></expr></argument>,
<argument><expr><name>svn_wc_notify_state_unknown</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr>&amp;<name>header_sent</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>merge_file_added</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>,
<argument><expr>&amp;<name>text_state</name></expr></argument>, <argument><expr>&amp;<name>prop_state</name></expr></argument>,
<argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>tmpfile1</name></expr></argument>,
<argument><expr><name>tmpfile2</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>start</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>end</name></name></expr></argument>,
<argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>,
<argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>props1</name></expr></argument>,
<argument><expr><name>merge_b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>single_file_merge_notify</name><argument_list>(<argument><expr><name>notify_b</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>svn_wc_notify_update_add</name></expr></argument>, <argument><expr><name>text_state</name></expr></argument>,
<argument><expr><name>prop_state</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr>&amp;<name>header_sent</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>merge_file_changed</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>,
<argument><expr>&amp;<name>text_state</name></expr></argument>, <argument><expr>&amp;<name>prop_state</name></expr></argument>,
<argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>tmpfile1</name></expr></argument>,
<argument><expr><name>tmpfile2</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>start</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>end</name></name></expr></argument>,
<argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>,
<argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>props1</name></expr></argument>,
<argument><expr><name>merge_b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>single_file_merge_notify</name><argument_list>(<argument><expr><name>notify_b</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>svn_wc_notify_update_update</name></expr></argument>, <argument><expr><name>text_state</name></expr></argument>,
<argument><expr><name>prop_state</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr>&amp;<name>header_sent</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>tmpfile1</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; ! <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>tmpfile2</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; ! <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>i</name> &lt; (<name><name>ranges_to_merge</name>-&gt;<name>nelts</name></name> - 1))
&amp;&amp; <call><name>is_path_conflicted_by_merge</name><argument_list>(<argument><expr><name>merge_b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>conflicted_range</name> = <name>r</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name>record_mergeinfo</name> &amp;&amp; <name><name>remaining_ranges</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>merges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>filtered_rangelist</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>filter_natural_history_from_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>filtered_rangelist</name></expr></argument>,
<argument><expr><name>mergeinfo_path</name></expr></argument>,
<argument><expr><name>implicit_mergeinfo</name></expr></argument>,
<argument><expr>&amp;<name>range</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>filtered_rangelist</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>determine_merges_performed</name><argument_list>(<argument><expr>&amp;<name>merges</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>filtered_rangelist</name></expr></argument>,
<argument><expr><name>svn_depth_infinity</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>notify_b</name></expr></argument>,
<argument><expr><name>merge_b</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>indirect</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__record_wc_mergeinfo</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>target_mergeinfo</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>update_wc_mergeinfo</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>mergeinfo_path</name></expr></argument>,
<argument><expr><name>merges</name></expr></argument>, <argument><expr><name>is_rollback</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_sleep_for_timestamps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>conflicted_range</name></expr>)</condition><then>
<return>return <expr><call><name>make_merge_conflict_error</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>conflicted_range</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_directory_merge</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url1</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url2</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parent_entry</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>notification_receiver_baton_t</name> *</type><name>notify_b</name></decl></param>,
<param><decl><type><name>merge_cmd_baton_t</name> *</type><name>merge_b</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>merge_target_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>inheritable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>target_merge_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_rollback</name> <init>= <expr>(<name>revision1</name> &gt; <name>revision2</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>primary_url</name> <init>= <expr><name>is_rollback</name> ? <name>url1</name> : <name>url2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_root_url</name></decl>, *<decl><type ref="prev"/><name>mergeinfo_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>honor_mergeinfo</name></decl>, <decl><type ref="prev"/><name>record_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>same_urls</name> <init>= <expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>url2</name></expr></argument>)</argument_list></call> == 0)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mergeinfo_behavior</name><argument_list>(<argument><expr>&amp;<name>honor_mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>record_mergeinfo</name></expr></argument>, <argument><expr><name>merge_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>children_with_mergeinfo</name> =
<call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_b</name>-&gt;<name>children_with_mergeinfo</name></name> = <name>children_with_mergeinfo</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! (<name><name>merge_b</name>-&gt;<name>sources_ancestral</name></name> &amp;&amp; <name><name>merge_b</name>-&gt;<name>same_repos</name></name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>merge_b</name>-&gt;<name>sources_ancestral</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>item</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>itemrange</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>itemrange</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>remaining_ranges</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>itemrange</name>-&gt;<name>start</name></name> = <name>revision1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itemrange</name>-&gt;<name>end</name></name> = <name>revision2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>itemrange</name>-&gt;<name>inheritable</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>remaining_ranges</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>itemrange</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name>-&gt;<name>remaining_ranges</name></name> = <name>remaining_ranges</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call> = <name>item</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>drive_merge_report_editor</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>url2</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>is_rollback</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>notify_b</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>merge_callbacks</name></expr></argument>,
<argument><expr><name>merge_b</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ra_session</name> = <name>is_rollback</name> ? <name><name>merge_b</name>-&gt;<name>ra_session1</name></name> : <name><name>merge_b</name>-&gt;<name>ra_session2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>source_root_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__path_relative_to_root</name><argument_list>(<argument><expr>&amp;<name>mergeinfo_path</name></expr></argument>, <argument><expr><name>primary_url</name></expr></argument>,
<argument><expr><name>source_root_url</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_mergeinfo_paths</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>merge_b</name></expr></argument>,
<argument><expr><name>mergeinfo_path</name></expr></argument>, <argument><expr><name>parent_entry</name></expr></argument>, <argument><expr><name>source_root_url</name></expr></argument>,
<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>url2</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target_merge_path</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_b</name>-&gt;<name>target_missing_child</name></name> = <name><name>target_merge_path</name>-&gt;<name>missing_child</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inheritable</name> = ((! <name><name>merge_b</name>-&gt;<name>target_missing_child</name></name>)
&amp;&amp; ((<name>depth</name> == <name>svn_depth_infinity</name>)
|| (<name>depth</name> == <name>svn_depth_immediates</name>)))</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>populate_remaining_ranges</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name>source_root_url</name></expr></argument>,
<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>url2</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name>inheritable</name></expr></argument>, <argument><expr><name>honor_mergeinfo</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>mergeinfo_path</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>merge_b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>.<name>start</name></name> = <name>revision1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>.<name>end</name></name> = <name>revision2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>.<name>inheritable</name></name> = <name>inheritable</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>honor_mergeinfo</name> &amp;&amp; !<name><name>merge_b</name>-&gt;<name>record_only</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl>, <decl><type ref="prev"/><name>end_rev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>start_rev</name> = <call><name>get_most_inclusive_start_rev</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name>is_rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>start_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>range</name>.<name>start</name></name> = <name>start_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_rev</name> = <call><name>get_youngest_end_rev</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>is_rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>.<name>start</name></name> = <name>start_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>end_rev</name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>next_end_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>real_url1</name> <init>= <expr><name>url1</name></expr></init>, *<name>real_url2</name> <init>= <expr><name>url2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_sess1_url</name> <init>= <expr><name>NULL</name></expr></init>, *<name>old_sess2_url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>slice_remaining_ranges</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>is_rollback</name></expr></argument>,
<argument><expr><name>end_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_b</name>-&gt;<name>cur_ancestor_index</name></name> = -1</expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>same_urls</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>is_rollback</name> &amp;&amp; (<name>end_rev</name> != <name>revision2</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>real_url2</name> = <name>url1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ensure_ra_session_url</name>
<argument_list>(<argument><expr>&amp;<name>old_sess2_url</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>ra_session2</name></name></expr></argument>,
<argument><expr><name>real_url2</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(! <name>is_rollback</name>) &amp;&amp; (<name>start_rev</name> != <name>revision1</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>real_url1</name> = <name>url2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ensure_ra_session_url</name>
<argument_list>(<argument><expr>&amp;<name>old_sess1_url</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>ra_session1</name></name></expr></argument>,
<argument><expr><name>real_url1</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>drive_merge_report_editor</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>target</name></name></expr></argument>,
<argument><expr><name>real_url1</name></expr></argument>, <argument><expr><name>start_rev</name></expr></argument>,
<argument><expr><name>real_url2</name></expr></argument>, <argument><expr><name>end_rev</name></expr></argument>,
<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name>is_rollback</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>notify_b</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr>&amp;<name>merge_callbacks</name></expr></argument>, <argument><expr><name>merge_b</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>old_sess1_url</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session1</name></name></expr></argument>,
<argument><expr><name>old_sess1_url</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>old_sess2_url</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>ra_session2</name></name></expr></argument>,
<argument><expr><name>old_sess2_url</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>remove_first_range_from_remaining_ranges</name><argument_list>(
<argument><expr><name>end_rev</name></expr></argument>, <argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_end_rev</name> = <call><name>get_youngest_end_rev</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name>is_rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>next_end_rev</name> != <name>SVN_INVALID_REVNUM</name>)
&amp;&amp; <call><name>is_path_conflicted_by_merge</name><argument_list>(<argument><expr><name>merge_b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name></type> <name>conflicted_range</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conflicted_range</name>.<name>start</name></name> = <name>start_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conflicted_range</name>.<name>end</name></name> = <name>end_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>make_merge_conflict_error</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>target</name></name></expr></argument>,
<argument><expr>&amp;<name>conflicted_range</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>.<name>end</name></name> = <name>end_rev</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>start_rev</name> = <name>end_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_rev</name> = <name>next_end_rev</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<name><name>merge_b</name>-&gt;<name>record_only</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>notify_b</name>-&gt;<name>cur_ancestor_index</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>drive_merge_report_editor</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>target</name></name></expr></argument>,
<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>url2</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>is_rollback</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>notify_b</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr>&amp;<name>merge_callbacks</name></expr></argument>, <argument><expr><name>merge_b</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>record_mergeinfo</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>filtered_rangelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>merge_target</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>merges</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>remove_absent_children</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>target</name></name></expr></argument>,
<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>notify_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>filter_natural_history_from_mergeinfo</name><argument_list>(
<argument><expr>&amp;<name>filtered_rangelist</name></expr></argument>, <argument><expr><name>mergeinfo_path</name></expr></argument>, <argument><expr><name><name>merge_target</name>-&gt;<name>implicit_mergeinfo</name></name></expr></argument>,
<argument><expr>&amp;<name>range</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>filtered_rangelist</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>determine_merges_performed</name><argument_list>(<argument><expr>&amp;<name>merges</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>target</name></name></expr></argument>,
<argument><expr><name>filtered_rangelist</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>notify_b</name></expr></argument>,
<argument><expr><name>merge_b</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>record_mergeinfo_on_merged_children</name><argument_list>(<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>notify_b</name></expr></argument>, <argument><expr><name>merge_b</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>update_wc_mergeinfo</name><argument_list>(<argument><expr><name><name>merge_b</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>parent_entry</name></expr></argument>,
<argument><expr><name>mergeinfo_path</name></expr></argument>, <argument><expr><name>merges</name></expr></argument>,
<argument><expr><name>is_rollback</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name></name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>children_with_mergeinfo</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_repos_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_merge_src_canon_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>child_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>child_merge_rangelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>child_merges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>child</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>child</name> || <name><name>child</name>-&gt;<name>absent</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call> == <name>merge_target_len</name></expr>)</condition><then>
<expr_stmt><expr><name>child_repos_path</name> = ""</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>child_repos_path</name> = <name><name>child</name>-&gt;<name>path</name></name> +
(<name>merge_target_len</name> ? <name>merge_target_len</name> + 1 : 0)</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>child_merge_src_canon_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>mergeinfo_path</name></expr></argument>,
<argument><expr><name>child_repos_path</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>child_entry</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>child_merges</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>filter_natural_history_from_mergeinfo</name><argument_list>(
<argument><expr>&amp;<name>child_merge_rangelist</name></expr></argument>, <argument><expr><name>child_merge_src_canon_path</name></expr></argument>,
<argument><expr><name><name>child</name>-&gt;<name>implicit_mergeinfo</name></name></expr></argument>, <argument><expr>&amp;<name>range</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>child_merge_rangelist</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then>
<continue>continue;</continue></then>
<else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>child_merge_rangelist</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>rng</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>child_merge_rangelist</name></expr></argument>, <argument><expr><name>j</name></expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>child_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
<expr_stmt><expr><name><name>rng</name>-&gt;<name>inheritable</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>rng</name>-&gt;<name>inheritable</name></name> = (!(<name><name>child</name>-&gt;<name>missing_child</name></name>)
&amp;&amp; (<name>depth</name> == <name>svn_depth_infinity</name>
|| <name>depth</name> == <name>svn_depth_immediates</name>))</expr>;</expr_stmt></else></if>
}</block></for>
}</block></else></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>child_merges</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>child_merge_rangelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>indirect_mergeinfo</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__record_wc_mergeinfo</name><argument_list>(
<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>child</name>-&gt;<name>pre_merge_mergeinfo</name></name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>update_wc_mergeinfo</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>child_entry</name></expr></argument>,
<argument><expr><name>child_merge_src_canon_path</name></expr></argument>,
<argument><expr><name>child_merges</name></expr></argument>, <argument><expr><name>is_rollback</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>mark_mergeinfo_as_inheritable_for_a_range</name><argument_list>(
<argument><expr><name><name>child</name>-&gt;<name>pre_merge_mergeinfo</name></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>,
<argument><expr>&amp;<name>range</name></expr></argument>,
<argument><expr><name>child_merge_src_canon_path</name></expr></argument>,
<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>merge_b</name></expr></argument>,
<argument><expr><name>children_with_mergeinfo</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>in_switched_subtree</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>switched</name></name></expr>)</condition><then>
<expr_stmt><expr><name>in_switched_subtree</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>i</name> &gt; 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_client__merge_path_t</name> *</type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> - 1</expr></init></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr><name>j</name> &gt; 0</expr>;</condition> <incr><expr><name>j</name>--</expr></incr>) <block>{
<expr_stmt><expr><name>parent</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children_with_mergeinfo</name></expr></argument>, <argument><expr><name>j</name></expr></argument>,
<argument><expr><name>svn_client__merge_path_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>parent</name>
&amp;&amp; <name><name>parent</name>-&gt;<name>switched</name></name>
&amp;&amp; <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>in_switched_subtree</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__elide_mergeinfo</name><argument_list>(
<argument><expr><name><name>child</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>in_switched_subtree</name> ? <name>NULL</name> : <name><name>merge_b</name>-&gt;<name>target</name></name></expr></argument>,
<argument><expr><name>child_entry</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>notify_b</name>-&gt;<name>added_paths</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>notify_b</name>-&gt;<name>added_paths</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>added_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>added_path_parent_propval</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>added_path</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr>&amp;<name>added_path_parent_propval</name></expr></argument>,
<argument><expr><name>SVN_PROP_MERGEINFO</name></expr></argument>,
<argument><expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>added_path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>added_path_parent_propval</name>
&amp;&amp; <call><name>strstr</name><argument_list>(<argument><expr><name><name>added_path_parent_propval</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>SVN_MERGEINFO_NONINHERITABLE_STR</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>inherited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>rng</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>merge_mergeinfo</name></decl>, <decl><type ref="prev"/><name>added_path_mergeinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>common_ancestor_path</name> <init>=
<expr><call><name>svn_path_get_longest_ancestor</name><argument_list>(<argument><expr><name>added_path</name></expr></argument>,
<argument><expr><name><name>target_merge_path</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relative_added_path</name> <init>=
<expr><name>added_path</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>common_ancestor_path</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>added_path</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>merge_mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rangelist</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rng</name> = <call><name>svn_merge_range_dup</name><argument_list>(<argument><expr>&amp;<name>range</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
<expr_stmt><expr><name><name>rng</name>-&gt;<name>inheritable</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>rng</name>-&gt;<name>inheritable</name></name> =
(!(<name>depth</name> == <name>svn_depth_infinity</name>
|| <name>depth</name> == <name>svn_depth_immediates</name>))</expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>rangelist</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>rng</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>merge_mergeinfo</name></expr></argument>,
<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>mergeinfo_path</name></expr></argument>,
<argument><expr><name>relative_added_path</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>rangelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_wc_mergeinfo</name><argument_list>(
<argument><expr>&amp;<name>added_path_mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>inherited</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>svn_mergeinfo_explicit</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>added_path</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>merge_b</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>added_path_mergeinfo</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr><name>merge_mergeinfo</name></expr></argument>,
<argument><expr><name>added_path_mergeinfo</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__record_wc_mergeinfo</name><argument_list>(<argument><expr><name>added_path</name></expr></argument>,
<argument><expr><name>merge_mergeinfo</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_merge</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>merge_sources</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>target_entry</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>sources_ancestral</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>sources_related</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>same_repos</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>record_only</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>merge_options</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>merge_cmd_baton_t</name></type> <name>merge_cmd_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>notification_receiver_baton_t</name></type> <name>notify_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>checked_mergeinfo_capability</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>record_only</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name>sources_ancestral</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_INCORRECT_PARAMS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Use of two URLs is not compatible with "
"mergeinfo modification"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>! <name>same_repos</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_INCORRECT_PARAMS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Merge from foreign repository is not "
"compatible with mergeinfo modification"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>dry_run</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_unknown</name></expr>)</condition><then>
<expr_stmt><expr><name>depth</name> = <name><name>target_entry</name>-&gt;<name>depth</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>cfg</name> = <name><name>ctx</name>-&gt;<name>config</name></name> ? <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_CONFIG</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>diff3_cmd</name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_HELPERS</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_DIFF3_CMD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>force</name></name> = <name>force</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>dry_run</name></name> = <name>dry_run</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>record_only</name></name> = <name>record_only</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>ignore_ancestry</name></name> = <name>ignore_ancestry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>same_repos</name></name> = <name>same_repos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>mergeinfo_capable</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>sources_ancestral</name></name> = <name>sources_ancestral</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>target_missing_child</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>pool</name></name> = <name>subpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>merge_options</name></name> = <name>merge_options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>diff3_cmd</name></name> = <name>diff3_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_baton</name>.<name>wrapped_func</name></name> = <name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_baton</name>.<name>wrapped_baton</name></name> = <name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_baton</name>.<name>nbr_notifications</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_baton</name>.<name>nbr_operative_notifications</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_baton</name>.<name>merged_paths</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_baton</name>.<name>skipped_paths</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_baton</name>.<name>added_paths</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_baton</name>.<name>is_single_file_merge</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_baton</name>.<name>children_with_mergeinfo</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_baton</name>.<name>cur_ancestor_index</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_baton</name>.<name>merge_b</name></name> = &amp;<name>merge_cmd_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify_baton</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>merge_sources</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>merge_source_t</name> *</type><name>merge_source</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>merge_sources</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>merge_source_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url1</name></decl>, *<decl><type ref="prev"/><name>url2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl>, <decl><type ref="prev"/><name>rev2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session1</name></decl>, *<decl><type ref="prev"/><name>ra_session2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url1</name> = <name><name>merge_source</name>-&gt;<name>url1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>url2</name> = <name><name>merge_source</name>-&gt;<name>url2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rev1</name> = <name><name>merge_source</name>-&gt;<name>rev1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rev2</name> = <name><name>merge_source</name>-&gt;<name>rev2</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>url2</name></expr></argument>)</argument_list></call> == 0) &amp;&amp; (<name>rev1</name> == <name>rev2</name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session1</name></expr></argument>, <argument><expr><name>url1</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session2</name></expr></argument>, <argument><expr><name>url2</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>url</name></name> = <name>url2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>added_path</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>add_necessitated_merge</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>dry_run_deletions</name></name> =
<name>dry_run</name> ? <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>conflicted_paths</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>target_has_dummy_merge_range</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>ra_session1</name></name> = <name>ra_session1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_cmd_baton</name>.<name>ra_session2</name></name> = <name>ra_session2</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>checked_mergeinfo_capability</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_has_capability</name><argument_list>(<argument><expr><name>ra_session1</name></expr></argument>,
<argument><expr>&amp;<name><name>merge_cmd_baton</name>.<name>mergeinfo_capable</name></name></expr></argument>,
<argument><expr><name>SVN_RA_CAPABILITY_MERGEINFO</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>checked_mergeinfo_capability</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>target_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_file_merge</name><argument_list>(<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>rev1</name></expr></argument>, <argument><expr><name>url2</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><name>sources_related</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr>&amp;<name>notify_baton</name></expr></argument>, <argument><expr>&amp;<name>merge_cmd_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>target_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_directory_merge</name><argument_list>(<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>rev1</name></expr></argument>, <argument><expr><name>url2</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>, <argument><expr><name>target_entry</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr>&amp;<name>notify_baton</name></expr></argument>,
<argument><expr>&amp;<name>merge_cmd_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr>! <name>dry_run</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__elide_mergeinfo</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>target_entry</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>merge_cousins_and_supplement_mergeinfo</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL1</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL2</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>yc_rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_repos_root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc_repos_root</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>record_only</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>merge_options</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_opt_revision_range_t</name> *</type><name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>remove_sources</name></decl>, *<decl><type ref="prev"/><name>add_sources</name></decl>, *<decl><type ref="prev"/><name>ranges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>same_repos</name> <init>=
<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>wc_repos_root</name></expr></argument>, <argument><expr><name>source_repos_root</name></expr></argument>)</argument_list></call> == 0) ? <name>TRUE</name> : <name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>peg_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_session_url</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>old_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name>.<name>value</name>.<name>number</name></name> = <name>rev1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name>.<name>value</name>.<name>number</name></name> = <name>yc_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ranges</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>peg_revision</name>.<name>value</name>.<name>number</name></name> = <name>rev1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>URL1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>normalize_merge_sources</name><argument_list>(<argument><expr>&amp;<name>remove_sources</name></expr></argument>, <argument><expr><name>URL1</name></expr></argument>, <argument><expr><name>URL1</name></expr></argument>,
<argument><expr><name>source_repos_root</name></expr></argument>, <argument><expr>&amp;<name>peg_revision</name></expr></argument>,
<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name>.<name>value</name>.<name>number</name></name> = <name>yc_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name>.<name>value</name>.<name>number</name></name> = <name>rev2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ranges</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>peg_revision</name>.<name>value</name>.<name>number</name></name> = <name>rev2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>URL2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>normalize_merge_sources</name><argument_list>(<argument><expr>&amp;<name>add_sources</name></expr></argument>, <argument><expr><name>URL2</name></expr></argument>, <argument><expr><name>URL2</name></expr></argument>,
<argument><expr><name>source_repos_root</name></expr></argument>, <argument><expr>&amp;<name>peg_revision</name></expr></argument>,
<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>old_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>record_only</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>merge_source_t</name> *</type><name>faux_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>faux_sources</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>merge_source_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>faux_source</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>faux_source</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faux_source</name>-&gt;<name>url1</name></name> = <name>URL1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faux_source</name>-&gt;<name>url2</name></name> = <name>URL2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faux_source</name>-&gt;<name>rev1</name></name> = <name>rev1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>faux_source</name>-&gt;<name>rev2</name></name> = <name>rev2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>faux_sources</name></expr></argument>, <argument><expr><name>merge_source_t</name> *</expr></argument>)</argument_list></call> = <name>faux_source</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_merge</name><argument_list>(<argument><expr><name>faux_sources</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>same_repos</name></expr></argument>,
<argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>dry_run</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>merge_options</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>! <name>same_repos</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_INCORRECT_PARAMS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Merge from foreign repository is not "
"compatible with mergeinfo modification"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>same_repos</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_merge</name><argument_list>(<argument><expr><name>add_sources</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>same_repos</name></expr></argument>,
<argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>dry_run</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>merge_options</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_merge</name><argument_list>(<argument><expr><name>remove_sources</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>same_repos</name></expr></argument>,
<argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>dry_run</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>merge_options</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_merge3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>record_only</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>merge_options</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL1</name></decl>, *<decl><type ref="prev"/><name>URL2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl>, <decl><type ref="prev"/><name>rev2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>related</name> <init>= <expr><name>FALSE</name></expr></init>, <name>ancestral</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc_repos_root</name></decl>, *<decl><type ref="prev"/><name>source_repos_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session1</name></decl>, *<decl><type ref="prev"/><name>ra_session2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>merge_sources</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>merge_source_t</name> *</type><name>merge_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>working_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>yc_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>yc_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>sesspool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>same_repos</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>revision1</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)
|| (<name><name>revision2</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_BAD_REVISION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Not all required revisions are specified"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_url_from_path</name><argument_list>(<argument><expr>&amp;<name>URL1</name></expr></argument>, <argument><expr><name>source1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>URL1</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' has no URL"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>source1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_url_from_path</name><argument_list>(<argument><expr>&amp;<name>URL2</name></expr></argument>, <argument><expr><name>source2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>URL2</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' has no URL"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>source2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr>! <name>dry_run</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>working_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_working</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_repos_root</name><argument_list>(<argument><expr>&amp;<name>wc_repos_root</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr>&amp;<name>working_rev</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sesspool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session1</name></expr></argument>,
<argument><expr><name>URL1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session2</name></expr></argument>,
<argument><expr><name>URL2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name><argument_list>(<argument><expr>&amp;<name>rev1</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>ra_session1</name></expr></argument>,
<argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name><argument_list>(<argument><expr>&amp;<name>rev2</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>ra_session2</name></expr></argument>,
<argument><expr><name>revision2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ra_session1</name></expr></argument>, <argument><expr>&amp;<name>source_repos_root</name></expr></argument>, <argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>same_repos</name> = (<call><name>strcmp</name><argument_list>(<argument><expr><name>source_repos_root</name></expr></argument>, <argument><expr><name>wc_repos_root</name></expr></argument>)</argument_list></call> == 0) ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>ignore_ancestry</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_youngest_common_ancestor</name><argument_list>(<argument><expr>&amp;<name>yc_path</name></expr></argument>, <argument><expr>&amp;<name>yc_rev</name></expr></argument>,
<argument><expr><name>URL1</name></expr></argument>, <argument><expr><name>rev1</name></expr></argument>,
<argument><expr><name>URL2</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>yc_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>yc_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ranges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_range_t</name> *</type><name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_revision</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>peg_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name>related</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>yc_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>source_repos_root</name></expr></argument>,
<argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>yc_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>yc_path</name></expr></argument>, <argument><expr><name>URL2</name></expr></argument>)</argument_list></call> == 0) &amp;&amp; (<name>yc_rev</name> == <name>rev2</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ancestral</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name>.<name>value</name>.<name>number</name></name> = <name>rev1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name>.<name>value</name>.<name>number</name></name> = <name>yc_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ranges</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>peg_revision</name>.<name>value</name>.<name>number</name></name> = <name>rev1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>normalize_merge_sources</name><argument_list>(<argument><expr>&amp;<name>merge_sources</name></expr></argument>, <argument><expr><name>URL1</name></expr></argument>, <argument><expr><name>URL1</name></expr></argument>,
<argument><expr><name>source_repos_root</name></expr></argument>, <argument><expr>&amp;<name>peg_revision</name></expr></argument>,
<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>ra_session1</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>yc_path</name></expr></argument>, <argument><expr><name>URL1</name></expr></argument>)</argument_list></call> == 0) &amp;&amp; (<name>yc_rev</name> == <name>rev1</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ancestral</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>range</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name>.<name>value</name>.<name>number</name></name> = <name>yc_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name>.<name>value</name>.<name>number</name></name> = <name>rev2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ranges</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>peg_revision</name>.<name>value</name>.<name>number</name></name> = <name>rev2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>normalize_merge_sources</name><argument_list>(<argument><expr>&amp;<name>merge_sources</name></expr></argument>, <argument><expr><name>URL2</name></expr></argument>, <argument><expr><name>URL2</name></expr></argument>,
<argument><expr><name>source_repos_root</name></expr></argument>, <argument><expr>&amp;<name>peg_revision</name></expr></argument>,
<argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>ra_session2</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>merge_cousins_and_supplement_mergeinfo</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>ra_session1</name></expr></argument>,
<argument><expr><name>URL1</name></expr></argument>, <argument><expr><name>rev1</name></expr></argument>,
<argument><expr><name>URL2</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>,
<argument><expr><name>yc_rev</name></expr></argument>,
<argument><expr><name>source_repos_root</name></expr></argument>,
<argument><expr><name>wc_repos_root</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>force</name></expr></argument>,
<argument><expr><name>record_only</name></expr></argument>, <argument><expr><name>dry_run</name></expr></argument>,
<argument><expr><name>merge_options</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>merge_sources</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>merge_source_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>merge_source</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>merge_source</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_source</name>-&gt;<name>url1</name></name> = <name>URL1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_source</name>-&gt;<name>url2</name></name> = <name>URL2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_source</name>-&gt;<name>rev1</name></name> = <name>rev1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_source</name>-&gt;<name>rev2</name></name> = <name>rev2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>merge_sources</name></expr></argument>, <argument><expr><name>merge_source_t</name> *</expr></argument>)</argument_list></call> = <name>merge_source</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_merge</name><argument_list>(<argument><expr><name>merge_sources</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>ancestral</name></expr></argument>, <argument><expr><name>related</name></expr></argument>, <argument><expr><name>same_repos</name></expr></argument>,
<argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>dry_run</name></expr></argument>,
<argument><expr><name>record_only</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>merge_options</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_merge2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>merge_options</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_client_merge3</name><argument_list>(<argument><expr><name>source1</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>source2</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>dry_run</name></expr></argument>,
<argument><expr><name>merge_options</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_merge</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_client_merge2</name><argument_list>(<argument><expr><name>source1</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>source2</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>force</name></expr></argument>,
<argument><expr><name>dry_run</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ensure_wc_reflects_repository_subtree</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_revision_status_t</name> *</type><name>wc_stat</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_revision_status</name><argument_list>(<argument><expr>&amp;<name>wc_stat</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>wc_stat</name>-&gt;<name>switched</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_NOT_READY_TO_MERGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot reintegrate into a working copy "
"with a switched subtree"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>wc_stat</name>-&gt;<name>sparse_checkout</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_NOT_READY_TO_MERGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot reintegrate into a working copy "
"not entirely at infinite depth"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>wc_stat</name>-&gt;<name>modified</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_NOT_READY_TO_MERGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot reintegrate into a working copy "
"that has local modifications"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>! (<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>wc_stat</name>-&gt;<name>min_rev</name></name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>wc_stat</name>-&gt;<name>max_rev</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_NOT_READY_TO_MERGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot determine revision of working copy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>wc_stat</name>-&gt;<name>min_rev</name></name> != <name><name>wc_stat</name>-&gt;<name>max_rev</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_NOT_READY_TO_MERGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot reintegrate into mixed-revision "
"working copy; try updating first"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ensure_all_missing_ranges_are_phantoms</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name></type> <name>history_as_mergeinfo</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>history_as_mergeinfo</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rangelist</name> = <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name>++</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>rangelist</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>dirent</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>range</name>-&gt;<name>start</name></name> &lt; <name><name>range</name>-&gt;<name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_stat</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>,
<argument><expr><name><name>range</name>-&gt;<name>end</name></name></expr></argument>,
<argument><expr>&amp;<name>dirent</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_merge_range_contains_rev</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name><name>dirent</name>-&gt;<name>created_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_url</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_session_url</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>full_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>full_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>full_url</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_NOT_READY_TO_MERGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"At least one revision (r%ld) "
"not yet merged from '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>dirent</name>-&gt;<name>created_rev</name></name></expr></argument>, <argument><expr><name>full_url</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></for>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>remove_irrelevant_ranges</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_catalog_t</name> *</type><name>catalog_p</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>catalog</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>segments</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_repos_rel_path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>new_catalog</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>history_as_mergeinfo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__mergeinfo_from_segments</name><argument_list>(<argument><expr>&amp;<name>history_as_mergeinfo</name></expr></argument>,
<argument><expr><name>segments</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl>, <decl><type ref="prev"/><name>filtered_mergeinfo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mergeinfo</name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_intersect</name><argument_list>(<argument><expr>&amp;<name>filtered_mergeinfo</name></expr></argument>,
<argument><expr><name>mergeinfo</name></expr></argument>,
<argument><expr><name>history_as_mergeinfo</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>filtered_mergeinfo</name></expr></argument>)</argument_list></call>
|| <call><name>strcmp</name><argument_list>(<argument><expr><name>source_repos_rel_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>new_catalog</name></expr></argument>,
<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>filtered_mergeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr>*<name>catalog_p</name> = <name>new_catalog</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>calculate_left_hand_side</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>url_left</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>rev_left</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>source_mergeinfo_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_repos_rel_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>target_rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_repos_rel_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_repos_root</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>source_rev</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>segments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>have_mergeinfo_for_source</name> <init>= <expr><name>FALSE</name></expr></init>,
<name>have_mergeinfo_for_descendants</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>mergeinfo_catalog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>source_repos_rel_path_as_array</name>
<init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__repos_location_segments</name><argument_list>(<argument><expr>&amp;<name>segments</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>target_repos_rel_path</name></expr></argument>,
<argument><expr><name>target_rev</name></expr></argument>, <argument><expr><name>target_rev</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>source_repos_rel_path_as_array</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call>
= <name>source_repos_rel_path</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_mergeinfo</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>mergeinfo_catalog</name></expr></argument>,
<argument><expr><name>source_repos_rel_path_as_array</name></expr></argument>, <argument><expr><name>source_rev</name></expr></argument>,
<argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>mergeinfo_catalog</name></expr>)</condition><then>
<expr_stmt><expr><name>mergeinfo_catalog</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remove_irrelevant_ranges</name><argument_list>(<argument><expr>&amp;<name>mergeinfo_catalog</name></expr></argument>,
<argument><expr><name>mergeinfo_catalog</name></expr></argument>,
<argument><expr><name>segments</name></expr></argument>,
<argument><expr><name>source_repos_rel_path</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__elide_mergeinfo_catalog</name><argument_list>(<argument><expr><name>mergeinfo_catalog</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>mergeinfo_catalog</name></expr></argument>, <argument><expr><name>source_repos_rel_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>have_mergeinfo_for_source</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>mergeinfo_catalog</name></expr></argument>)</argument_list></call> &gt; 1 ||
(! <name>have_mergeinfo_for_source</name> &amp;&amp; <call><name>apr_hash_count</name><argument_list>(<argument><expr><name>mergeinfo_catalog</name></expr></argument>)</argument_list></call> == 1)</expr>)</condition><then>
<expr_stmt><expr><name>have_mergeinfo_for_descendants</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>have_mergeinfo_for_source</name> &amp;&amp; ! <name>have_mergeinfo_for_descendants</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>yc_ancestor_path</name></decl>,
*<decl><type ref="prev"/><name>source_url</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>source_repos_root</name></expr></argument>, <argument><expr><name>source_repos_rel_path</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></init>,
*<name>target_url</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>source_repos_root</name></expr></argument>, <argument><expr><name>target_repos_rel_path</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_youngest_common_ancestor</name><argument_list>(<argument><expr>&amp;<name>yc_ancestor_path</name></expr></argument>,
<argument><expr><name>rev_left</name></expr></argument>,
<argument><expr><name>source_url</name></expr></argument>, <argument><expr><name>source_rev</name></expr></argument>,
<argument><expr><name>target_url</name></expr></argument>, <argument><expr><name>target_rev</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>yc_ancestor_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr>*<name>rev_left</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_NOT_READY_TO_MERGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s@%ld' must be ancestrally related to "
"'%s@%ld'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source_url</name></expr></argument>, <argument><expr><name>source_rev</name></expr></argument>,
<argument><expr><name>target_url</name></expr></argument>, <argument><expr><name>target_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>*<name>url_left</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>source_repos_root</name></expr></argument>, <argument><expr><name>yc_ancestor_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>source_mergeinfo_p</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>! <name>have_mergeinfo_for_descendants</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>source_mergeinfo</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>mergeinfo_catalog</name></expr></argument>,
<argument><expr><name>source_repos_rel_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = <name><name>segments</name>-&gt;<name>nelts</name></name> - 1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name>
<init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_location_segment_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>segment</name>-&gt;<name>path</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>rangelist</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>source_mergeinfo</name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name><name>segment</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rangelist</name> != <name>NULL</name> &amp;&amp; <name><name>rangelist</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>last_range</name>
<init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rangelist</name></expr></argument>, <argument><expr><name><name>rangelist</name>-&gt;<name>nelts</name></name> - 1</expr></argument>,
<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>rev_left</name> = <name><name>last_range</name>-&gt;<name>end</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>url_left</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>source_repos_root</name></expr></argument>, <argument><expr><name><name>segment</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>source_mergeinfo_p</name> = <call><name>svn_mergeinfo_dup</name><argument_list>(<argument><expr><name>source_mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_url</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_session_url</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>full_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>full_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>full_url</name></expr></argument>, <argument><expr><name>source_repos_rel_path</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_NOT_READY_TO_MERGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Cannot reintegrate from '%s' yet:\n"
"Some revisions have been merged under it "
"that have not been merged\n"
"into the reintegration target; "
"merge them first, then retry."</expr></argument>, <argument><expr><name>full_url</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_merge_reintegrate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>merge_options</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc_repos_root</name></decl>, *<decl><type ref="prev"/><name>source_repos_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>working_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_repos_rel_path</name></decl>, *<decl><type ref="prev"/><name>target_repos_rel_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>yc_ancestor_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>yc_ancestor_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url1</name></decl>, *<decl><type ref="prev"/><name>url2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl>, <decl><type ref="prev"/><name>rev2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>source_mergeinfo</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr>(! <name>dry_run</name>)</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_url_from_path</name><argument_list>(<argument><expr>&amp;<name>url2</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>url2</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' has no URL"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>working_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_working</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_repos_root</name><argument_list>(<argument><expr>&amp;<name>wc_repos_root</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr>&amp;<name>working_revision</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>wc_repos_root</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>source_repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>source_repos_root</name></expr></argument>, <argument><expr><name>wc_repos_root</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_UNRELATED_RESOURCES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' must be from the same repository as "
"'%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>ensure_wc_reflects_repository_subtree</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rev1</name> = <name><name>entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__path_relative_to_root</name><argument_list>(<argument><expr>&amp;<name>source_repos_rel_path</name></expr></argument>,
<argument><expr><name>url2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__path_relative_to_root</name><argument_list>(<argument><expr>&amp;<name>target_repos_rel_path</name></expr></argument>,
<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>wc_repos_root</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name><argument_list>(<argument><expr>&amp;<name>rev2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>source_repos_rel_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>calculate_left_hand_side</name><argument_list>(<argument><expr>&amp;<name>url1</name></expr></argument>, <argument><expr>&amp;<name>rev1</name></expr></argument>, <argument><expr>&amp;<name>source_mergeinfo</name></expr></argument>,
<argument><expr><name>target_repos_rel_path</name></expr></argument>,
<argument><expr><name>rev1</name></expr></argument>,
<argument><expr><name>source_repos_rel_path</name></expr></argument>,
<argument><expr><name>source_repos_root</name></expr></argument>,
<argument><expr><name>rev2</name></expr></argument>,
<argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_youngest_common_ancestor</name><argument_list>(<argument><expr>&amp;<name>yc_ancestor_path</name></expr></argument>,
<argument><expr>&amp;<name>yc_ancestor_rev</name></expr></argument>,
<argument><expr><name>url2</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>,
<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>rev1</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>yc_ancestor_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>yc_ancestor_rev</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_NOT_READY_TO_MERGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s@%ld' must be ancestrally related to "
"'%s@%ld'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url1</name></expr></argument>, <argument><expr><name>rev1</name></expr></argument>, <argument><expr><name>url2</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>rev1</name> &gt; <name>yc_ancestor_rev</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>opt_rev1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>target_mergeinfo</name></decl>, <decl><type ref="prev"/><name>deleted_mergeinfo</name></decl>, <decl><type ref="prev"/><name>added_mergeinfo</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>opt_rev1</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_rev1</name>.<name>value</name>.<name>number</name></name> = <name>rev1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_history_as_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>target_mergeinfo</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>,
<argument><expr>&amp;<name>opt_rev1</name></expr></argument>,
<argument><expr><name>rev1</name></expr></argument>,
<argument><expr><name>yc_ancestor_rev</name> + 1</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_diff</name><argument_list>(<argument><expr>&amp;<name>deleted_mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>added_mergeinfo</name></expr></argument>,
<argument><expr><name>target_mergeinfo</name></expr></argument>, <argument><expr><name>source_mergeinfo</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>ensure_all_missing_ranges_are_phantoms</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>deleted_mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>merge_cousins_and_supplement_mergeinfo</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>,
<argument><expr><name>url1</name></expr></argument>, <argument><expr><name>rev1</name></expr></argument>, <argument><expr><name>url2</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>,
<argument><expr><name>yc_ancestor_rev</name></expr></argument>,
<argument><expr><name>source_repos_root</name></expr></argument>,
<argument><expr><name>wc_repos_root</name></expr></argument>,
<argument><expr><name>svn_depth_infinity</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>dry_run</name></expr></argument>,
<argument><expr><name>merge_options</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_merge_peg3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>ranges_to_merge</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>record_only</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>merge_options</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>merge_sources</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc_repos_root</name></decl>, *<decl><type ref="prev"/><name>source_repos_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>working_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>sesspool</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ranges_to_merge</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr>(! <name>dry_run</name>)</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_url_from_path</name><argument_list>(<argument><expr>&amp;<name>URL</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>URL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' has no URL"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>working_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_working</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_repos_root</name><argument_list>(<argument><expr>&amp;<name>wc_repos_root</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr>&amp;<name>working_rev</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sesspool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>,
<argument><expr><name>URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>source_repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>normalize_merge_sources</name><argument_list>(<argument><expr>&amp;<name>merge_sources</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>,
<argument><expr><name>source_repos_root</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>ranges_to_merge</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>sesspool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_merge</name><argument_list>(<argument><expr><name>merge_sources</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>wc_repos_root</name></expr></argument>, <argument><expr><name>source_repos_root</name></expr></argument>)</argument_list></call> == 0)</expr></argument>,
<argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>dry_run</name></expr></argument>, <argument><expr><name>record_only</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>merge_options</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_merge_peg2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>merge_options</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_opt_revision_range_t</name></type> <name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ranges_to_merge</name> <init>=
<expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>range</name>.<name>start</name></name> = *<name>revision1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>.<name>end</name></name> = *<name>revision2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>ranges_to_merge</name></expr></argument>, <argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></call> = &amp;<name>range</name></expr>;</expr_stmt>
<return>return <expr><call><name>svn_client_merge_peg3</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>ranges_to_merge</name></expr></argument>,
<argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>target_wcpath</name></expr></argument>,
<argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>dry_run</name></expr></argument>,
<argument><expr><name>merge_options</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_merge_peg</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_client_merge_peg2</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>,
<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>force</name></expr></argument>,
<argument><expr><name>dry_run</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
