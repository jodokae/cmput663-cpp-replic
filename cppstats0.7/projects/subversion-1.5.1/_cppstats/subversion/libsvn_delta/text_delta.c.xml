<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_delta/text_delta.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"delta.h"</cpp:file></cpp:include>
<struct>struct <name>svn_txdelta_stream_t</name> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_next_window_fn_t</name></type> <name>next_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_md5_digest_fn_t</name></type> <name>md5_digest</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>txdelta_baton</name> <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>more_source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>more</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_md5_ctx_t</name></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>tpush_baton</name> <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>wh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>whb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>source_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>source_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>source_done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>target_len</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>apply_baton</name> <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>sbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>sbuf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>sbuf_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>sbuf_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>tbuf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_md5_ctx_t</name></type> <name>md5_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>result_digest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error_info</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><name>svn_txdelta_window_t</name> *</type>
<name>svn_txdelta__make_window</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_txdelta__ops_baton_t</name> *</type><name>build_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>new_data</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>window</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>window</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>-&gt;<name>sview_offset</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>-&gt;<name>sview_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>-&gt;<name>tview_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>-&gt;<name>num_ops</name></name> = <name><name>build_baton</name>-&gt;<name>num_ops</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>-&gt;<name>src_ops</name></name> = <name><name>build_baton</name>-&gt;<name>src_ops</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>-&gt;<name>ops</name></name> = <name><name>build_baton</name>-&gt;<name>ops</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_data</name>-&gt;<name>data</name></name> = <name><name>build_baton</name>-&gt;<name>new_data</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_data</name>-&gt;<name>len</name></name> = <name><name>build_baton</name>-&gt;<name>new_data</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>-&gt;<name>new_data</name></name> = <name>new_data</name></expr>;</expr_stmt>
<return>return <expr><name>window</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_txdelta_window_t</name> *</type>
<name>compute_window</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>source_len</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>target_len</name></decl></param>,
<param><decl><type><name>svn_filesize_t</name></type> <name>source_offset</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_txdelta__ops_baton_t</name></type> <name>build_baton</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>build_baton</name>.<name>new_data</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>source_len</name> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>svn_txdelta__vdelta</name><argument_list>(<argument><expr>&amp;<name>build_baton</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>source_len</name></expr></argument>, <argument><expr><name>target_len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_txdelta__xdelta</name><argument_list>(<argument><expr>&amp;<name>build_baton</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>source_len</name></expr></argument>, <argument><expr><name>target_len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>window</name> = <call><name>svn_txdelta__make_window</name><argument_list>(<argument><expr>&amp;<name>build_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>-&gt;<name>sview_offset</name></name> = <name>source_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>-&gt;<name>sview_len</name></name> = <name>source_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>-&gt;<name>tview_len</name></name> = <name>target_len</name></expr>;</expr_stmt>
<return>return <expr><name>window</name></expr>;</return>
}</block></function>
<function><type><name>svn_txdelta_window_t</name> *</type>
<name>svn_txdelta_window_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_txdelta__ops_baton_t</name></type> <name>build_baton</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_t</name> *</type><name>new_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_size_t</name></type> <name>ops_size</name> <init>= <expr>(<name><name>window</name>-&gt;<name>num_ops</name></name> * <sizeof>sizeof<argument_list>(<argument><expr>*<name><name>build_baton</name>.<name>ops</name></name></expr></argument>)</argument_list></sizeof>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>build_baton</name>.<name>num_ops</name></name> = <name><name>window</name>-&gt;<name>num_ops</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>build_baton</name>.<name>src_ops</name></name> = <name><name>window</name>-&gt;<name>src_ops</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>build_baton</name>.<name>ops_size</name></name> = <name><name>window</name>-&gt;<name>num_ops</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>build_baton</name>.<name>ops</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ops_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>build_baton</name>.<name>ops</name></name></expr></argument>, <argument><expr><name><name>window</name>-&gt;<name>ops</name></name></expr></argument>, <argument><expr><name>ops_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>build_baton</name>.<name>new_data</name></name> =
<call><name>svn_stringbuf_create_from_string</name><argument_list>(<argument><expr><name><name>window</name>-&gt;<name>new_data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_window</name> = <call><name>svn_txdelta__make_window</name><argument_list>(<argument><expr>&amp;<name>build_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_window</name>-&gt;<name>sview_offset</name></name> = <name><name>window</name>-&gt;<name>sview_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_window</name>-&gt;<name>sview_len</name></name> = <name><name>window</name>-&gt;<name>sview_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_window</name>-&gt;<name>tview_len</name></name> = <name><name>window</name>-&gt;<name>tview_len</name></name></expr>;</expr_stmt>
<return>return <expr><name>new_window</name></expr>;</return>
}</block></function>
<function_decl><type><name>svn_txdelta_window_t</name> *</type>
<name>svn_txdelta__copy_window</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function><type><name>svn_txdelta_window_t</name> *</type>
<name>svn_txdelta__copy_window</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_txdelta_window_dup</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>void</name></type>
<name>svn_txdelta__insert_op</name><argument_list>(<argument><expr><name>svn_txdelta__ops_baton_t</name> *<name>build_baton</name></expr></argument>,
<argument>enum <expr><name>svn_delta_action</name> <name>opcode</name></expr></argument>,
<argument><expr><name>apr_size_t</name> <name>offset</name></expr></argument>,
<argument><expr><name>apr_size_t</name> <name>length</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>new_data</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list> <block>{
<decl_stmt><decl><type><name>svn_txdelta_op_t</name> *</type><name>op</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>build_baton</name>-&gt;<name>num_ops</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>op</name> = &amp;<name><name>build_baton</name>-&gt;<name>ops</name><index>[<expr><name><name>build_baton</name>-&gt;<name>num_ops</name></name> - 1</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>op</name>-&gt;<name>action_code</name></name> == <name>opcode</name>
&amp;&amp; (<name>opcode</name> == <name>svn_txdelta_new</name>
|| <name><name>op</name>-&gt;<name>offset</name></name> + <name><name>op</name>-&gt;<name>length</name></name> == <name>offset</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>op</name>-&gt;<name>length</name></name> += <name>length</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>opcode</name> == <name>svn_txdelta_new</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>build_baton</name>-&gt;<name>new_data</name></name></expr></argument>,
<argument><expr><name>new_data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>build_baton</name>-&gt;<name>num_ops</name></name> == <name><name>build_baton</name>-&gt;<name>ops_size</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_txdelta_op_t</name> *<specifier>const</specifier></type> <name>old_ops</name> <init>= <expr><name><name>build_baton</name>-&gt;<name>ops</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>new_ops_size</name> <init>= <expr>(<name><name>build_baton</name>-&gt;<name>ops_size</name></name> == 0
? 16 : 2 * <name><name>build_baton</name>-&gt;<name>ops_size</name></name>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>build_baton</name>-&gt;<name>ops</name></name> =
<call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>new_ops_size</name> * <sizeof>sizeof<argument_list>(<argument><expr>*<name><name>build_baton</name>-&gt;<name>ops</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>old_ops</name></expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>build_baton</name>-&gt;<name>ops</name></name></expr></argument>, <argument><expr><name>old_ops</name></expr></argument>,
<argument><expr><name><name>build_baton</name>-&gt;<name>ops_size</name></name> * <sizeof>sizeof<argument_list>(<argument><expr>*<name><name>build_baton</name>-&gt;<name>ops</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>build_baton</name>-&gt;<name>ops_size</name></name> = <name>new_ops_size</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>op</name> = &amp;<name><name>build_baton</name>-&gt;<name>ops</name><index>[<expr><name><name>build_baton</name>-&gt;<name>num_ops</name></name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition> <block>{
<case>case <expr><name>svn_txdelta_source</name></expr>:
<expr_stmt><expr>++<name><name>build_baton</name>-&gt;<name>src_ops</name></name></expr>;</expr_stmt>
</case><case>case <expr><name>svn_txdelta_target</name></expr>:
<expr_stmt><expr><name><name>op</name>-&gt;<name>action_code</name></name> = <name>opcode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name>-&gt;<name>offset</name></name> = <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name>-&gt;<name>length</name></name> = <name>length</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_txdelta_new</name></expr>:
<expr_stmt><expr><name><name>op</name>-&gt;<name>action_code</name></name> = <name>opcode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name>-&gt;<name>offset</name></name> = <name><name>build_baton</name>-&gt;<name>new_data</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name>-&gt;<name>length</name></name> = <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>build_baton</name>-&gt;<name>new_data</name></name></expr></argument>, <argument><expr><name>new_data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!"unknown delta op."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
<expr_stmt><expr>++<name><name>build_baton</name>-&gt;<name>num_ops</name></name></expr>;</expr_stmt>
}</block></decl></decl_stmt>
<function><type><name>svn_txdelta_stream_t</name> *</type>
<name>svn_txdelta_stream_create</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_txdelta_next_window_fn_t</name></type> <name>next_window</name></decl></param>,
<param><decl><type><name>svn_txdelta_md5_digest_fn_t</name></type> <name>md5_digest</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_txdelta_stream_t</name> *</type><name>stream</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>baton</name></name> = <name>baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>next_window</name></name> = <name>next_window</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>md5_digest</name></name> = <name>md5_digest</name></expr>;</expr_stmt>
<return>return <expr><name>stream</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_txdelta_next_window</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> **</type><name>window</name></decl></param>,
<param><decl><type><name>svn_txdelta_stream_t</name> *</type><name>stream</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name><name>stream</name>-&gt;<name>next_window</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type>
<name>svn_txdelta_md5_digest</name><parameter_list>(<param><decl><type><name>svn_txdelta_stream_t</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name><name>stream</name>-&gt;<name>md5_digest</name></name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txdelta_next_window</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> **</type><name>window</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>txdelta_baton</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>source_len</name> <init>= <expr><name>SVN_DELTA_WINDOW_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>target_len</name> <init>= <expr><name>SVN_DELTA_WINDOW_SIZE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>more_source</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_read</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>source</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr>&amp;<name>source_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>more_source</name></name> = (<name>source_len</name> == <name>SVN_DELTA_WINDOW_SIZE</name>)</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>source_len</name> = 0</expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_read</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>buf</name></name> + <name>source_len</name></expr></argument>,
<argument><expr>&amp;<name>target_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>pos</name></name> += <name>source_len</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>target_len</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_md5_final</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>digest</name></name></expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>context</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>window</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>more</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;(<name><name>b</name>-&gt;<name>context</name></name>)</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>buf</name></name> + <name>source_len</name></expr></argument>,
<argument><expr><name>target_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>window</name> = <call><name>compute_window</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name>source_len</name></expr></argument>, <argument><expr><name>target_len</name></expr></argument>,
<argument><expr><name><name>b</name>-&gt;<name>pos</name></name> - <name>source_len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type>
<name>txdelta_md5_digest</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>txdelta_baton</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>more</name></name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><name><name>b</name>-&gt;<name>digest</name></name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_txdelta</name><parameter_list>(<param><decl><type><name>svn_txdelta_stream_t</name> **</type><name>stream</name></decl></param>,
<param><decl><type><name>svn_stream_t</name> *</type><name>source</name></decl></param>,
<param><decl><type><name>svn_stream_t</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>txdelta_baton</name> *</type><name>b</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>source</name></name> = <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>more_source</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>more</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>pos</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>buf</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>2 * <name>SVN_DELTA_WINDOW_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5_init</name><argument_list>(<argument><expr>&amp;(<name><name>b</name>-&gt;<name>context</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>stream</name> = <call><name>svn_txdelta_stream_create</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>txdelta_next_window</name></expr></argument>,
<argument><expr><name>txdelta_md5_digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>tpush_write_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>tpush_baton</name> *</type><name>tb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>chunk_len</name></decl>, <decl><type ref="prev"/><name>data_len</name> <init>= <expr>*<name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>tb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>data_len</name> &gt; 0</expr>)</condition> <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>tb</name>-&gt;<name>source_len</name></name> == 0 &amp;&amp; !<name><name>tb</name>-&gt;<name>source_done</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>tb</name>-&gt;<name>source_len</name></name> = <name>SVN_DELTA_WINDOW_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_read</name><argument_list>(<argument><expr><name><name>tb</name>-&gt;<name>source</name></name></expr></argument>, <argument><expr><name><name>tb</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr>&amp;<name><name>tb</name>-&gt;<name>source_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>tb</name>-&gt;<name>source_len</name></name> &lt; <name>SVN_DELTA_WINDOW_SIZE</name></expr>)</condition><then>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>source_done</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><name>chunk_len</name> = <name>SVN_DELTA_WINDOW_SIZE</name> - <name><name>tb</name>-&gt;<name>target_len</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>chunk_len</name> &gt; <name>data_len</name></expr>)</condition><then>
<expr_stmt><expr><name>chunk_len</name> = <name>data_len</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tb</name>-&gt;<name>buf</name></name> + <name><name>tb</name>-&gt;<name>source_len</name></name> + <name><name>tb</name>-&gt;<name>target_len</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>chunk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> += <name>chunk_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data_len</name> -= <name>chunk_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>target_len</name></name> += <name>chunk_len</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>tb</name>-&gt;<name>target_len</name></name> == <name>SVN_DELTA_WINDOW_SIZE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>window</name> = <call><name>compute_window</name><argument_list>(<argument><expr><name><name>tb</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name><name>tb</name>-&gt;<name>source_len</name></name></expr></argument>, <argument><expr><name><name>tb</name>-&gt;<name>target_len</name></name></expr></argument>,
<argument><expr><name><name>tb</name>-&gt;<name>source_offset</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>tb</name>-&gt;<name>wh</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>tb</name>-&gt;<name>whb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>source_offset</name></name> += <name><name>tb</name>-&gt;<name>source_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>source_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>target_len</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>tpush_close_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>tpush_baton</name> *</type><name>tb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>tb</name>-&gt;<name>target_len</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>window</name> = <call><name>compute_window</name><argument_list>(<argument><expr><name><name>tb</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name><name>tb</name>-&gt;<name>source_len</name></name></expr></argument>, <argument><expr><name><name>tb</name>-&gt;<name>target_len</name></name></expr></argument>,
<argument><expr><name><name>tb</name>-&gt;<name>source_offset</name></name></expr></argument>, <argument><expr><name><name>tb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>tb</name>-&gt;<name>wh</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>tb</name>-&gt;<name>whb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>tb</name>-&gt;<name>wh</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>tb</name>-&gt;<name>whb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_stream_t</name> *</type>
<name>svn_txdelta_target_push</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>handler</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>, <param><decl><type><name>svn_stream_t</name> *</type><name>source</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>tpush_baton</name> *</type><name>tb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tb</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>tb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>source</name></name> = <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>wh</name></name> = <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>whb</name></name> = <name>handler_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>buf</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>2 * <name>SVN_DELTA_WINDOW_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>source_offset</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>source_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>source_done</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tb</name>-&gt;<name>target_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>svn_stream_create</name><argument_list>(<argument><expr><name>tb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>tpush_write_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>tpush_close_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>stream</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>void</name></type>
<name>size_buffer</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>buf_size</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>view_len</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>view_len</name> &gt; *<name>buf_size</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>buf_size</name> *= 2</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>buf_size</name> &lt; <name>view_len</name></expr>)</condition><then>
<expr_stmt><expr>*<name>buf_size</name> = <name>view_len</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>svn_txdelta_apply_instructions</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sbuf</name></decl></param>, <param><decl><type><name>char</name> *</type><name>tbuf</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>tlen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_txdelta_op_t</name> *</type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>tpos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>op</name> = <name><name>window</name>-&gt;<name>ops</name></name></expr>;</init> <condition><expr><name>op</name> &lt; <name><name>window</name>-&gt;<name>ops</name></name> + <name><name>window</name>-&gt;<name>num_ops</name></name></expr>;</condition> <incr><expr><name>op</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_size_t</name></type> <name>buf_len</name> <init>= <expr>(<name><name>op</name>-&gt;<name>length</name></name> &lt; *<name>tlen</name> - <name>tpos</name>
? <name><name>op</name>-&gt;<name>length</name></name> : *<name>tlen</name> - <name>tpos</name>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tpos</name> + <name><name>op</name>-&gt;<name>length</name></name> &lt;= <name><name>window</name>-&gt;<name>tview_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>op</name>-&gt;<name>action_code</name></name></expr>)</condition> <block>{
<case>case <expr><name>svn_txdelta_source</name></expr>:
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>op</name>-&gt;<name>offset</name></name> + <name><name>op</name>-&gt;<name>length</name></name> &lt;= <name><name>window</name>-&gt;<name>sview_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tbuf</name> + <name>tpos</name></expr></argument>, <argument><expr><name>sbuf</name> + <name><name>op</name>-&gt;<name>offset</name></name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_txdelta_target</name></expr>:
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>op</name>-&gt;<name>offset</name></name> &lt; <name>tpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name><name>op</name>-&gt;<name>offset</name></name></expr>, <expr><name>j</name> = <name>tpos</name></expr>;</init> <condition><expr><name>i</name> &lt; <name><name>op</name>-&gt;<name>offset</name></name> + <name>buf_len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>tbuf</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name><name>tbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>
<break>break;</break>
</case><case>case <expr><name>svn_txdelta_new</name></expr>:
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>op</name>-&gt;<name>offset</name></name> + <name><name>op</name>-&gt;<name>length</name></name> &lt;= <name><name>window</name>-&gt;<name>new_data</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tbuf</name> + <name>tpos</name></expr></argument>,
<argument><expr><name><name>window</name>-&gt;<name>new_data</name>-&gt;<name>data</name></name> + <name><name>op</name>-&gt;<name>offset</name></name></expr></argument>,
<argument><expr><name>buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!"Invalid delta instruction code"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
<expr_stmt><expr><name>tpos</name> += <name><name>op</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tpos</name> &gt;= *<name>tlen</name></expr>)</condition><then>
<return>return;</return></then></if>
}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tpos</name> == <name><name>window</name>-&gt;<name>tview_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>tlen</name> = <name>tpos</name></expr>;</expr_stmt>
}</block></function>
<function_decl><type><name>void</name></type>
<name>svn_txdelta__apply_instructions</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sbuf</name></decl></param>, <param><decl><type><name>char</name> *</type><name>tbuf</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>tlen</name></decl></param>)</parameter_list>;</function_decl>
<function><type><name>void</name></type>
<name>svn_txdelta__apply_instructions</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sbuf</name></decl></param>, <param><decl><type><name>char</name> *</type><name>tbuf</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>tlen</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_txdelta_apply_instructions</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>apply_window</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>apply_baton</name> *</type><name>ab</name> <init>= <expr>(struct <name>apply_baton</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>window</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ab</name>-&gt;<name>result_digest</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_md5_final</name><argument_list>(<argument><expr><name><name>ab</name>-&gt;<name>result_digest</name></name></expr></argument>, <argument><expr>&amp;(<name><name>ab</name>-&gt;<name>md5_context</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_stream_close</name><argument_list>(<argument><expr><name><name>ab</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>ab</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>window</name>-&gt;<name>sview_len</name></name> == 0
|| (<name><name>window</name>-&gt;<name>sview_offset</name></name> &gt;= <name><name>ab</name>-&gt;<name>sbuf_offset</name></name>
&amp;&amp; (<name><name>window</name>-&gt;<name>sview_offset</name></name> + <name><name>window</name>-&gt;<name>sview_len</name></name>
&gt;= <name><name>ab</name>-&gt;<name>sbuf_offset</name></name> + <name><name>ab</name>-&gt;<name>sbuf_len</name></name>))</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>size_buffer</name><argument_list>(<argument><expr>&amp;<name><name>ab</name>-&gt;<name>tbuf</name></name></expr></argument>, <argument><expr>&amp;<name><name>ab</name>-&gt;<name>tbuf_size</name></name></expr></argument>, <argument><expr><name><name>window</name>-&gt;<name>tview_len</name></name></expr></argument>, <argument><expr><name><name>ab</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>window</name>-&gt;<name>sview_offset</name></name> != <name><name>ab</name>-&gt;<name>sbuf_offset</name></name>
|| <name><name>window</name>-&gt;<name>sview_len</name></name> &gt; <name><name>ab</name>-&gt;<name>sbuf_size</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>old_sbuf</name> <init>= <expr><name><name>ab</name>-&gt;<name>sbuf</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>size_buffer</name><argument_list>(<argument><expr>&amp;<name><name>ab</name>-&gt;<name>sbuf</name></name></expr></argument>, <argument><expr>&amp;<name><name>ab</name>-&gt;<name>sbuf_size</name></name></expr></argument>, <argument><expr><name><name>window</name>-&gt;<name>sview_len</name></name></expr></argument>, <argument><expr><name><name>ab</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ab</name>-&gt;<name>sbuf_offset</name></name> + <name><name>ab</name>-&gt;<name>sbuf_len</name></name> &gt; <name><name>window</name>-&gt;<name>sview_offset</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>start</name> <init>=
<expr><call>(<name>apr_size_t</name>)<argument_list>(<argument><expr><name><name>window</name>-&gt;<name>sview_offset</name></name> - <name><name>ab</name>-&gt;<name>sbuf_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ab</name>-&gt;<name>sbuf</name></name></expr></argument>, <argument><expr><name>old_sbuf</name> + <name>start</name></expr></argument>, <argument><expr><name><name>ab</name>-&gt;<name>sbuf_len</name></name> - <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>sbuf_len</name></name> -= <name>start</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>ab</name>-&gt;<name>sbuf_len</name></name> = 0</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>sbuf_offset</name></name> = <name><name>window</name>-&gt;<name>sview_offset</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ab</name>-&gt;<name>sbuf_len</name></name> &lt; <name><name>window</name>-&gt;<name>sview_len</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <name><name>window</name>-&gt;<name>sview_len</name></name> - <name><name>ab</name>-&gt;<name>sbuf_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_stream_read</name><argument_list>(<argument><expr><name><name>ab</name>-&gt;<name>source</name></name></expr></argument>, <argument><expr><name><name>ab</name>-&gt;<name>sbuf</name></name> + <name><name>ab</name>-&gt;<name>sbuf_len</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>SVN_NO_ERROR</name> &amp;&amp; <name>len</name> != <name><name>window</name>-&gt;<name>sview_len</name></name> - <name><name>ab</name>-&gt;<name>sbuf_len</name></name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_INCOMPLETE_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Delta source ended unexpectedly"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>err</name> != <name>SVN_NO_ERROR</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>sbuf_len</name></name> = <name><name>window</name>-&gt;<name>sview_len</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>len</name> = <name><name>window</name>-&gt;<name>tview_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_txdelta_apply_instructions</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>ab</name>-&gt;<name>sbuf</name></name></expr></argument>, <argument><expr><name><name>ab</name>-&gt;<name>tbuf</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> == <name><name>window</name>-&gt;<name>tview_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ab</name>-&gt;<name>result_digest</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;(<name><name>ab</name>-&gt;<name>md5_context</name></name>)</expr></argument>, <argument><expr><name><name>ab</name>-&gt;<name>tbuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>ab</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name><name>ab</name>-&gt;<name>tbuf</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_txdelta_apply</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>source</name></decl></param>,
<param><decl><type><name>svn_stream_t</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>result_digest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apply_baton</name> *</type><name>ab</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ab</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>source</name></name> = <name>source</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>pool</name></name> = <name>subpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>sbuf</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>sbuf_size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>sbuf_offset</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>sbuf_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>tbuf</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>tbuf_size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>result_digest</name></name> = <name>result_digest</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result_digest</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_md5_init</name><argument_list>(<argument><expr>&amp;(<name><name>ab</name>-&gt;<name>md5_context</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>error_info</name></expr>)</condition><then>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>error_info</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>error_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>ab</name>-&gt;<name>error_info</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>handler</name> = <name>apply_window</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>handler_baton</name> = <name>ab</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_txdelta_send_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>string</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>handler</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_txdelta_window_t</name></type> <name>window</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_op_t</name></type> <name>op</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>op</name>.<name>action_code</name></name> = <name>svn_txdelta_new</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name>.<name>offset</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>op</name>.<name>length</name></name> = <name><name>string</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>.<name>tview_len</name></name> = <name><name>string</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>.<name>num_ops</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>.<name>ops</name></name> = &amp;<name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>window</name>.<name>new_data</name></name> = <name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name>handler</name>)<argument_list>(<argument><expr>&amp;<name>window</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name>handler</name>)<argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_txdelta_send_stream</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>handler</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>digest</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_txdelta_stream_t</name> *</type><name>txstream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_txdelta</name><argument_list>(<argument><expr>&amp;<name>txstream</name></expr></argument>, <argument><expr><call><name>svn_stream_empty</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_txdelta_send_txstream</name><argument_list>(<argument><expr><name>txstream</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>digest</name> &amp;&amp; (! <name>err</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>result_md5</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result_md5</name> = <call><name>svn_txdelta_md5_digest</name><argument_list>(<argument><expr><name>txstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>result_md5</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_txdelta_send_txstream</name><parameter_list>(<param><decl><type><name>svn_txdelta_stream_t</name> *</type><name>txstream</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>handler</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>wpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>wpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_next_window</name><argument_list>(<argument><expr>&amp;<name>window</name></expr></argument>, <argument><expr><name>txstream</name></expr></argument>, <argument><expr><name>wpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name>handler</name>)<argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>window</name> != <name>NULL</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>wpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
