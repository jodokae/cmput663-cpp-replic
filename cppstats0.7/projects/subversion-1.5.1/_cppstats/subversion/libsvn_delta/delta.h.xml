<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_delta/delta.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_LIBSVN_DELTA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_DELTA_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DELTA_WINDOW_SIZE</name></cpp:macro> <cpp:value>102400</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>svn_txdelta__ops_baton_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>num_ops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>src_ops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ops_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_op_t</name> *</type><name>ops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>new_data</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_txdelta__ops_baton_t</name>;</typedef>
<decl_stmt><decl><type><name>void</name></type> <name>svn_txdelta__insert_op</name><argument_list>(<argument><expr><name>svn_txdelta__ops_baton_t</name> *<name>build_baton</name></expr></argument>,
<argument>enum <expr><name>svn_delta_action</name> <name>opcode</name></expr></argument>,
<argument><expr><name>apr_size_t</name> <name>offset</name></expr></argument>,
<argument><expr><name>apr_size_t</name> <name>length</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>new_data</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>svn_txdelta_window_t</name> *</type>
<name>svn_txdelta__make_window</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_txdelta__ops_baton_t</name> *</type><name>build_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_txdelta__vdelta</name><parameter_list>(<param><decl><type><name>svn_txdelta__ops_baton_t</name> *</type><name>build_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>source_len</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>target_len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_txdelta__xdelta</name><parameter_list>(<param><decl><type><name>svn_txdelta__ops_baton_t</name> *</type><name>build_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>source_len</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>target_len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
