<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/svnserve/server.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SERVER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_network_io.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>server_baton_t</name> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>pwdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_authz_t</name> *</type><name>authzdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authz_repos_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>fs_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>tunnel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tunnel_user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>read_only</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_HAVE_SASL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_sasl</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>server_baton_t</name>;</typedef>
<enum>enum <name>authn_type</name> <block>{ <decl><name>UNAUTHENTICATED</name></decl>, <decl><name>AUTHENTICATED</name></decl> }</block>;</enum>
<enum>enum <name>access_type</name> <block>{ <decl><name>NO_ACCESS</name></decl>, <decl><name>READ_ACCESS</name></decl>, <decl><name>WRITE_ACCESS</name></decl> }</block>;</enum>
<enum>enum <name>access_type</name> <name>get_access</name><expr_stmt><expr>(<name>server_baton_t</name> *<name>b</name>, enum <name>authn_type</name> <name>auth</name>)</expr>;</expr_stmt></enum>
<typedef>typedef <type><struct>struct <name>serve_params_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>tunnel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tunnel_user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>read_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>pwdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_authz_t</name> *</type><name>authzdb</name></decl>;</decl_stmt>
}</block></struct></type> <name>serve_params_t</name>;</typedef>
<function_decl><type><name>svn_error_t</name> *</type><name>serve</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>serve_params_t</name> *</type><name>params</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>load_configs</name><parameter_list>(<param><decl><type><name>svn_config_t</name> **</type><name>cfg</name></decl></param>,
<param><decl><type><name>svn_config_t</name> **</type><name>pwdb</name></decl></param>,
<param><decl><type><name>svn_authz_t</name> **</type><name>authzdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>must_exist</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>cyrus_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>cyrus_auth_request</name><argument_list>(<argument><expr><name>svn_ra_svn_conn_t</name> *<name>conn</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>,
<argument><expr><name>server_baton_t</name> *<name>b</name></expr></argument>,
<argument>enum <expr><name>access_type</name> <name>required</name></expr></argument>,
<argument><expr><name>svn_boolean_t</name> <name>needs_username</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
