<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/svnserve/winservice.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"winservice.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsvc.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINSERVICE_SERVICE_NAME</name></cpp:macro> <cpp:value>"svnserve"</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>winservice_dispatcher_thread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>winservice_start_event</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SERVICE_STATUS_HANDLE</name></type> <name>winservice_status_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SERVICE_STATUS</name></type> <name>winservice_status</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dbg_print</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>text</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>OutputDebugStringA</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg_print</name><parameter_list>(<param><type><name>text</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>winservice_atexit</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>winservice_update_state</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>winservice_status_handle</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>SetServiceStatus</name><argument_list>(<argument><expr><name>winservice_status_handle</name></expr></argument>, <argument><expr>&amp;<name>winservice_status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"SetServiceStatus - FAILED\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>winservice_cleanup</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>winservice_start_event</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>winservice_start_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>winservice_start_event</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>winservice_dispatcher_thread</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"winservice_cleanup:"
" waiting for dispatcher thread to exit\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>winservice_dispatcher_thread</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>winservice_dispatcher_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>winservice_dispatcher_thread</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <name>WINAPI</name></type>
<name>winservice_handler</name><parameter_list>(<param><decl><type><name>DWORD</name></type> <name>control</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>control</name></expr>)</condition> <block>{
<case>case <expr><name>SERVICE_CONTROL_INTERROGATE</name></expr>:
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"SERVICE_CONTROL_INTERROGATE\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>winservice_update_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SERVICE_CONTROL_STOP</name></expr>:
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"SERVICE_CONTROL_STOP\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>winservice_status</name>.<name>dwCurrentState</name></name> = <name>SERVICE_STOP_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>winservice_update_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>winservice_notify_stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <name>WINAPI</name></type>
<name>winservice_service_main</name><parameter_list>(<param><decl><type><name>DWORD</name></type> <name>argc</name></decl></param>, <param><decl><type><name>LPTSTR</name> *</type><name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>winservice_start_event</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>winservice_status_handle</name> =
<call><name>RegisterServiceCtrlHandler</name><argument_list>(<argument><expr><name>WINSERVICE_SERVICE_NAME</name></expr></argument>, <argument><expr><name>winservice_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>winservice_status_handle</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>error</name> = <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"RegisterServiceCtrlHandler FAILED\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>winservice_status</name>.<name>dwWin32ExitCode</name></name> = <name>error</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>winservice_start_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name><name>winservice_status</name>.<name>dwCurrentState</name></name> = <name>SERVICE_START_PENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>winservice_status</name>.<name>dwWin32ExitCode</name></name> = <name>ERROR_SUCCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>winservice_update_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"winservice_service_main: service is starting\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>winservice_start_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SERVICE_TABLE_ENTRY</name></type> <name><name>winservice_service_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>WINSERVICE_SERVICE_NAME</name></expr>, <expr><name>winservice_service_main</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type>
<name>winservice_dispatcher_thread_routine</name><parameter_list>(<param><decl><type><name>PVOID</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"winservice_dispatcher_thread_routine: starting\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>StartServiceCtrlDispatcher</name><argument_list>(<argument><expr><name>winservice_service_table</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>error</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"dispatcher: FAILED to connect to SCM\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>error</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"dispatcher: SCM is done using this process -- exiting\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERROR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>winservice_start</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>handles</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>thread_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>error_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>wait_status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"winservice_start: starting svnserve as a service...\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr>&amp;<name>winservice_status</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>winservice_status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>winservice_status</name>.<name>dwServiceType</name></name> = <name>SERVICE_WIN32_OWN_PROCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>winservice_status</name>.<name>dwControlsAccepted</name></name> = <name>SERVICE_ACCEPT_STOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>winservice_status</name>.<name>dwCurrentState</name></name> = <name>SERVICE_STOPPED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>winservice_start_event</name> = <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>winservice_start_event</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>apr_status</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_status</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to create winservice_start_event"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>winservice_dispatcher_thread</name> =
(<name>HANDLE</name>)<call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>winservice_dispatcher_thread_routine</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>thread_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>winservice_dispatcher_thread</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>apr_status</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>winservice_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_status</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The service failed to start"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>handles</name><index>[<expr>0</expr>]</index></name> = <name>winservice_start_event</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handles</name><index>[<expr>1</expr>]</index></name> = <name>winservice_dispatcher_thread</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wait_status</name> = <call><name>WaitForMultipleObjects</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>handles</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>wait_status</name></expr>)</condition> <block>{
<case>case <expr><name>WAIT_OBJECT_0</name></expr>:
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"winservice_start: service is now starting\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>winservice_start_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>winservice_start_event</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>winservice_atexit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>WAIT_OBJECT_0</name>+1</expr>:
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"winservice_start: dispatcher thread has failed\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>GetExitCodeThread</name><argument_list>(<argument><expr><name>winservice_dispatcher_thread</name></expr></argument>, <argument><expr>&amp;<name>error_code</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"winservice_start: dispatcher thread failed\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error_code</name> == <name>ERROR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><name>error_code</name> = <name>ERROR_INTERNAL_ERROR</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>error_code</name> = <name>ERROR_INTERNAL_ERROR</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>winservice_dispatcher_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>winservice_dispatcher_thread</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>winservice_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_wrap_apr</name>
<argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>error_code</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to connect to Service Control Manager"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</case><default>default:
<expr_stmt><expr><name>apr_status</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"winservice_start: WaitForMultipleObjects failed!\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>winservice_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_wrap_apr</name>
<argument_list>(<argument><expr><name>apr_status</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The service failed to start; an internal error"
" occurred while starting the service"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><name>void</name></type>
<name>winservice_running</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>winservice_status</name>.<name>dwCurrentState</name></name> = <name>SERVICE_RUNNING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>winservice_update_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"winservice_notify_running: service is now running\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>winservice_stop</name><parameter_list>(<param><decl><type><name>DWORD</name></type> <name>exit_code</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"winservice_stop - notifying SCM that service has stopped\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>winservice_status</name>.<name>dwCurrentState</name></name> = <name>SERVICE_STOPPED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>winservice_status</name>.<name>dwWin32ExitCode</name></name> = <name>exit_code</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>winservice_update_state</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>winservice_dispatcher_thread</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"waiting for dispatcher thread to exit...\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>winservice_dispatcher_thread</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"dispatcher thread has exited.\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>winservice_dispatcher_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>winservice_dispatcher_thread</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>exit_code</name> = <name><name>winservice_status</name>.<name>dwWin32ExitCode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"dispatcher thread was not running\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>winservice_start_event</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>winservice_start_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>winservice_start_event</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"winservice_stop - service has stopped\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>winservice_atexit</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dbg_print</name><argument_list>(<argument><expr>"winservice_atexit - stopping\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>winservice_stop</name><argument_list>(<argument><expr><name>ERROR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>winservice_is_stopping</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name><name>winservice_status</name>.<name>dwCurrentState</name></name> == <name>SERVICE_STOP_PENDING</name>)</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
