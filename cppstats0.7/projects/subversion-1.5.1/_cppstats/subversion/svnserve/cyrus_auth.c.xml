<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/svnserve/cyrus_auth.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_HAVE_SASL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra_svn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/ra_svn_sasl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"server.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>int</name></type> <name>canonicalize_username</name><parameter_list>(<param><decl><type><name>sasl_conn_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>context</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>in</name></decl></param>,
<param><decl><type><name>unsigned</name></type> <name>inlen</name></decl></param>,
<param><decl><type><name>unsigned</name></type> <name>flags</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user_realm</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>out</name></decl></param>,
<param><decl><type><name>unsigned</name></type> <name>out_max</name></decl></param>, <param><decl><type><name>unsigned</name> *</type><name>out_len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>realm_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>user_realm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>pos</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>out_len</name> = <name>inlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr>'@'</expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pos</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>pos</name>+1</expr></argument>, <argument><expr><name>user_realm</name></expr></argument>, <argument><expr><name>inlen</name>-(<name>pos</name>-<name>in</name>+1)</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>SASL_BADPROT</name></expr>;</return></then></if>
}</block></then> <else>else
<expr_stmt><expr>*<name>out_len</name> += <name>realm_len</name> + 1</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>*<name>out_len</name> &gt; <name>out_max</name></expr>)</condition><then>
<return>return <expr><name>SASL_BADPROT</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>pos</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>out</name><index>[<expr><name>inlen</name></expr>]</index></name> = '@'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr>&amp;<name><name>out</name><index>[<expr><name>inlen</name>+1</expr>]</index></name></expr></argument>, <argument><expr><name>user_realm</name></expr></argument>, <argument><expr><name>realm_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SASL_OK</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>sasl_callback_t</name></type> <name><name>callbacks</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>SASL_CB_CANON_USER</name></expr>, <expr><name>canonicalize_username</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>SASL_CB_LIST_END</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>initialize</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>svn_ra_svn__sasl_common_init</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Could not initialize the SASL library"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>sasl_server_init</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>SVN_RA_SVN_SASL_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>SASL_OK</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_AUTHORIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>sasl_errstring</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_error_quick_wrap</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Could not initialize the SASL library"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>cyrus_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_atomic__init_once</name><argument_list>(<argument><expr>&amp;<name>svn_ra_svn__sasl_status</name></expr></argument>, <argument><expr><name>initialize</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fail_auth</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>sasl_conn_t</name> *</type><name>sasl_ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name> <init>= <expr><call><name>sasl_errdetail</name><argument_list>(<argument><expr><name>sasl_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"w(c)"</expr></argument>, <argument><expr>"failure"</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_ra_svn_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>write_failure</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>svn_error_t</name> **</type><name>err_p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>write_err</name> <init>= <expr><call><name>svn_ra_svn_write_cmd_failure</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>err_p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr>*<name>err_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>err_p</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>write_err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fail_cmd</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>sasl_conn_t</name> *</type><name>sasl_ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_AUTHORIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>sasl_errdetail</name><argument_list>(<argument><expr><name>sasl_ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>write_failure</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_ra_svn_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>try_auth</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>sasl_conn_t</name> *</type><name>sasl_ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>server_baton_t</name> *</type><name>b</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>success</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>out</name></decl>, *<decl><type ref="prev"/><name>mech</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>arg</name> <init>= <expr><name>NULL</name></expr></init>, *<name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>outlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_base64</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>success</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"w(?s)"</expr></argument>, <argument><expr>&amp;<name>mech</name></expr></argument>, <argument><expr>&amp;<name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mech</name></expr></argument>, <argument><expr>"EXTERNAL"</expr></argument>)</argument_list></call> == 0 &amp;&amp; !<name>in</name></expr>)</condition><then>
<expr_stmt><expr><name>in</name> = <call><name>svn_string_create</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>tunnel_user</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>in</name></expr>)</condition><then>
<expr_stmt><expr><name>in</name> = <call><name>svn_base64_decode_string</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><name>use_base64</name> = (<call><name>strcmp</name><argument_list>(<argument><expr><name>mech</name></expr></argument>, <argument><expr>"CRAM-MD5"</expr></argument>)</argument_list></call> != 0)</expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>sasl_server_start</name><argument_list>(<argument><expr><name>sasl_ctx</name></expr></argument>, <argument><expr><name>mech</name></expr></argument>,
<argument><expr><name>in</name> ? <name><name>in</name>-&gt;<name>data</name></name> : <name>NULL</name></expr></argument>,
<argument><expr><name>in</name> ? <name><name>in</name>-&gt;<name>len</name></name> : 0</expr></argument>, <argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr>&amp;<name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>SASL_OK</name> &amp;&amp; <name>result</name> != <name>SASL_CONTINUE</name></expr>)</condition><then>
<return>return <expr><call><name>fail_auth</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sasl_ctx</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<while>while <condition>(<expr><name>result</name> == <name>SASL_CONTINUE</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>svn_ra_svn_item_t</name> *</type><name>item</name></decl>;</decl_stmt>
<expr_stmt><expr><name>arg</name> = <call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>use_base64</name></expr>)</condition><then>
<expr_stmt><expr><name>arg</name> = <call><name>svn_base64_encode_string</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"w(s)"</expr></argument>, <argument><expr>"step"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_item</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>item</name>-&gt;<name>kind</name></name> != <name>SVN_RA_SVN_STRING</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>in</name> = <name><name>item</name>-&gt;<name>u</name>.<name>string</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>use_base64</name></expr>)</condition><then>
<expr_stmt><expr><name>in</name> = <call><name>svn_base64_decode_string</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>result</name> = <call><name>sasl_server_step</name><argument_list>(<argument><expr><name>sasl_ctx</name></expr></argument>, <argument><expr><name><name>in</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>in</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr>&amp;<name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>result</name> != <name>SASL_OK</name></expr>)</condition><then>
<return>return <expr><call><name>fail_auth</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sasl_ctx</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>outlen</name></expr>)</condition><then>
<expr_stmt><expr><name>arg</name> = <call><name>svn_base64_encode_string</name><argument_list>(<argument><expr><call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>arg</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>success</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"w(?s)"</expr></argument>, <argument><expr>"success"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>sasl_dispose_cb</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sasl_conn_t</name> *</type><name>sasl_ctx</name> <init>= <expr>(<name>sasl_conn_t</name>*) <name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sasl_dispose</name><argument_list>(<argument><expr>&amp;<name>sasl_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>cyrus_auth_request</name><argument_list>(<argument><expr><name>svn_ra_svn_conn_t</name> *<name>conn</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>,
<argument><expr><name>server_baton_t</name> *<name>b</name></expr></argument>,
<argument>enum <expr><name>access_type</name> <name>required</name></expr></argument>,
<argument><expr><name>svn_boolean_t</name> <name>needs_username</name></expr></argument>)</argument_list> <block>{
<decl_stmt><decl><type><name>sasl_conn_t</name> *</type><name>sasl_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>localaddrport</name> <init>= <expr><name>NULL</name></expr></init>, *<name>remoteaddrport</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mechlist</name></decl>, *<decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><name>APRMAXHOSTLEN</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sasl_security_properties_t</name></type> <name>secprops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>success</name></decl>, <decl><type ref="prev"/><name>no_anonymous</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mech_count</name></decl>, <decl><type ref="prev"/><name>result</name> <init>= <expr><name>SASL_OK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn__get_addresses</name><argument_list>(<argument><expr>&amp;<name>localaddrport</name></expr></argument>, <argument><expr>&amp;<name>remoteaddrport</name></expr></argument>,
<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_gethostname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't get hostname"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>write_failure</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_ra_svn_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>sasl_server_new</name><argument_list>(<argument><expr><name>SVN_RA_SVN_SASL_NAME</name></expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>realm</name></name></expr></argument>,
<argument><expr><name>localaddrport</name></expr></argument>, <argument><expr><name>remoteaddrport</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SASL_SUCCESS_DATA</name></expr></argument>,
<argument><expr>&amp;<name>sasl_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>SASL_OK</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_AUTHORIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>sasl_errstring</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>write_failure</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_ra_svn_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sasl_ctx</name></expr></argument>, <argument><expr><name>sasl_dispose_cb</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_svn__default_secprops</name><argument_list>(<argument><expr>&amp;<name>secprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>secprops</name>.<name>security_flags</name></name> = <name>SASL_SEC_NOPLAINTEXT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>no_anonymous</name> = <name>needs_username</name> || <call><name>get_access</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>UNAUTHENTICATED</name></expr></argument>)</argument_list></call> &lt; <name>required</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>no_anonymous</name></expr>)</condition><then>
<expr_stmt><expr><name><name>secprops</name>.<name>security_flags</name></name> |= <name>SASL_SEC_NOANONYMOUS</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>cfg</name></name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_SECTION_SASL</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_MIN_SSF</name></expr></argument>,
<argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>secprops</name>.<name>min_ssf</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>cfg</name></name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_SECTION_SASL</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_MAX_SSF</name></expr></argument>,
<argument><expr>"256"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>secprops</name>.<name>max_ssf</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>sasl_setprop</name><argument_list>(<argument><expr><name>sasl_ctx</name></expr></argument>, <argument><expr><name>SASL_SEC_PROPS</name></expr></argument>, <argument><expr>&amp;<name>secprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>SASL_OK</name></expr>)</condition><then>
<return>return <expr><call><name>fail_cmd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sasl_ctx</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>tunnel_user</name></name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>sasl_setprop</name><argument_list>(<argument><expr><name>sasl_ctx</name></expr></argument>, <argument><expr><name>SASL_AUTH_EXTERNAL</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>tunnel_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>result</name> != <name>SASL_OK</name></expr>)</condition><then>
<return>return <expr><call><name>fail_cmd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sasl_ctx</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>result</name> = <call><name>sasl_listmech</name><argument_list>(<argument><expr><name>sasl_ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>mechlist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>mech_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>SASL_OK</name></expr>)</condition><then>
<return>return <expr><call><name>fail_cmd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sasl_ctx</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>mech_count</name> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_AUTHORIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Could not obtain the list"
" of SASL mechanisms"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>write_failure</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_ra_svn_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd_response</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"(w)c"</expr></argument>,
<argument><expr><name>mechlist</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>realm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>try_auth</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sasl_ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>success</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr>!<name>success</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn__enable_sasl_encryption</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sasl_ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>no_anonymous</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>user</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>sasl_getprop</name><argument_list>(<argument><expr><name>sasl_ctx</name></expr></argument>, <argument><expr><name>SASL_USERNAME</name></expr></argument>, <argument><expr>&amp;<name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>SASL_OK</name></expr>)</condition><then>
<return>return <expr><call><name>fail_cmd</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sasl_ctx</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>p</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr>'@'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>b</name>-&gt;<name>user</name></name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>p</name> - (<name>char</name> *)<name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_AUTHORIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Couldn't obtain the authenticated"
" username"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>write_failure</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_ra_svn_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
